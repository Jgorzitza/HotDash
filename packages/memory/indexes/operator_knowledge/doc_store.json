{
  "docstore/data": {
    "docs/runbooks/agent_shutdown_checklist.md": {
      "__data__": "{\"id_\":\"docs/runbooks/agent_shutdown_checklist.md\",\"metadata\":{\"source\":\"docs/runbooks/agent_shutdown_checklist.md\",\"lastModified\":\"2025-10-18T07:27:16.189Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"# Agent Shutdown (Restart‑safe)\\n\\n> **Order of operations:** Agents shut down **first**, then the Manager runs their shutdown.  \\n> Goal: a **clean restart** where any agent can resume with zero hidden context.\\n>\\n> **No‑Wait Policy:** Do not wait for Manager acknowledgement. If told to shut down (or at end of day), execute this checklist immediately, capture evidence, and post the handoff note. Only pause if the Manager explicitly says “hold”.\\n\\n---\\n\\n## 0) Save State (≤ 1 min)\\n\\n- [ ] Do NOT commit/push. Manager will handle git operations.\\n- [ ] Ensure your feedback file contains the latest evidence and the completion block if applicable.\\n- [ ] Ensure PR body includes:\\n  - `Refs #<issue>` or `Fixes #<issue>` (when DoD is fully met)\\n  - A line: `Allowed paths: <pattern(s)>`\\n\\n---\\n\\n## 1) CI & Sandbox (≤ 1 min)\\n\\n- [ ] Diffs stay **within Allowed paths** (Danger will enforce on PR).\\n- [ ] No new `.md` outside allow-list (Docs Policy will fail otherwise).\\n- [ ] **Dev mode safety:** Do **not** send customer messages, take payments, or run production Shopify mutations.  \\n       If the UI needed sample “approvals,” ensure they are **fixtures** only:\\n      `provenance.mode=\\\"dev:test\\\"`, include `feedback_ref`, and **Apply disabled**.\\n\\n---\\n\\n## 2) Feedback — Final Entry for Today (2–4 min)\\n\\nOpen `feedback/<agent>/<YYYY‑MM‑DD>.md` and append this block:\\n\\n```md\\n### Shutdown — <HH:MM> (local time)\\n\\n**Status**\\n\\n- Task / Issue: #<id> — PR: #<id or draft> — Branch: agent/<agent>/<molecule>\\n- DoD completion: <percent or checklist state>\\n- What changed since last entry: <1–3 bullets>\\n\\n**Evidence**\\n\\n- Tests/logs/screens: <links or short notes>\\n- Tool calls (MCP/adapters) used: <list>\\n\\n**Blockers**\\n\\n- <concise description> → **owner**: <me/manager/other> — **ETA**: <date/time>\\n\\n**Next‑start plan (first 1–2 actions)**\\n\\n1. …\\n2. …\\n\\n**Self‑grade (1–5)**\\n\\n- Progress vs DoD: <1–5>\\n- Evidence quality: <1–5>\\n- Alignment (North Star / Rules / Allowed paths): <1–5>\\n- Tool discipline (MCP‑first, no freehand, no secrets): <1–5>\\n- Communication (feedback clarity & cadence): <1–5>\\n\\n**Retrospective**\\n\\n- 2–3 things I did well today:\\n  1. …\\n  2. …\\n- 1–2 things to do differently tomorrow:\\n  1. …\\n- **One thing I will stop entirely:** …\\n```\\n\\n> Keep it concise but specific. The Manager will rely on this to set tomorrow’s direction and unblock you immediately.\\n\\n---\\n\\n## 3) Handoff to Manager (≤ 1 min)\\n\\n- [ ] Verify your feedback file is up to date.\\n- [ ] Post a one-liner in the Issue comment:\\n      \\\"Shutdown complete — see latest feedback entry (includes WORK COMPLETE block if applicable).\\\"\\n- [ ] Manager will create/refresh PR and handle CI/review/merge.\\n\\n---\\n\\n## 4) Local Clean‑up (≤ 1 min)\\n\\n- [ ] Close terminals connected to secrets/tunnels; ensure `.env*` not staged.\\n- [ ] Stop any local services you started (db, tunnels, dev servers).\\n\\n---\\n\\n## 5) Signal Manager\\n\\n- [ ] Post a one‑liner in the **Issue comment**: “Shutdown complete — see latest feedback entry for status/next‑start plan.”\\n- [ ] @mention the Manager if a blocker needs immediate attention.\\n\\n---\\n\\n## Appendix — Quick Commands (optional)\\n\\n```bash\\n# Show changed files quickly\\ngit status -s\\n\\n# Push current branch\\ngit push -u origin HEAD\\n\\n# Create or mark draft PR via GitHub CLI (if you use it)\\ngh pr create --draft --fill || gh pr ready --undo  # toggle draft state\\n```\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"AyWij9LlHiIHmKivmHPqcsUmwjoqJoHtawDMpej95JE=\"}",
      "__type__": "DOCUMENT"
    },
    "docs/runbooks/agent_startup_checklist.md": {
      "__data__": "{\"id_\":\"docs/runbooks/agent_startup_checklist.md\",\"metadata\":{\"source\":\"docs/runbooks/agent_startup_checklist.md\",\"lastModified\":\"2025-10-19T00:09:22.235Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"# Agent Startup (Daily)\\n\\n## PATH\\n\\n- [ ] Navigate to repo root ~/HotDash/hot-dash/ or /home/justin/HotDash/hot-dash/\\n\\n## 0) Align to the Star (60 sec)\\n\\n- [ ] Skim `docs/NORTH_STAR.md`, `docs/OPERATING_MODEL.md`, and `docs/RULES.md`.\\n- [ ] If your direction conflicts with these, **pause** and post a short note in the Issue:\\n      “Direction misaligned with North Star/Operating Model — please confirm or revise.”\\n      (Agents are expected to hold the manager accountable for alignment.)\\n\\n## 1) Direction & Issue (60 sec)\\n\\n- [ ] Read `docs/directions/<agent>.md` — note **today’s objective** and **constraints**.\\n- [ ] Open your **Issue(s)**; copy the **DoD** and confirm **Allowed paths** (fnmatch).\\n- [ ] Start today’s header in `feedback/<agent>/<YYYY-MM-DD>.md` with your plan.\\n\\n## 2) Tools & Env (60–90 sec)\\n\\n- [ ] MCP tools resolve and respond (role-specific): Shopify Admin, Supabase, Chatwoot, etc. Shopify dev + storefront work requires MCP.\\n- [ ] GA4/GSC use internal adapters (no MCP). Use provided scripts/adapters and attach command + stderr to feedback.\\n- [ ] If a tool fails, paste the exact command + output in your feedback and **stop** until unblocked.\\n\\n## 3) Sandbox (30 sec)\\n\\n- [ ] Work only inside the Issue’s **Allowed paths** (Danger will fail out-of-scope diffs).\\n- [ ] Do NOT create branches; Manager controls all git operations.\\n\\n## 4) Feedback Discipline (throughout)\\n\\n- [ ] Append-only entries to `feedback/<agent>/<YYYY-MM-DD>.md`:\\n      commands + results, blockers (minimal repro), next intent.\\n- [ ] Do **not** create new `.md` beyond allow-list; don’t edit other agents’ files.\\n\\n## 5) Work Protocol\\n\\n- [ ] **MCP-first / server adapters only.** Shopify/Supabase/Fly/GitHub via MCP. GA4/GSC via internal adapters. No freehand HTTP or secrets in logs.\\n- [ ] Keep changes molecule-sized (≤ 2 days); commit early with Issue reference:\\n      `Refs #<issue>` → final slice uses `Fixes #<issue>`.\\n\\n## 6) Completion Protocol (when you finish a slice)\\n\\n- [ ] Do NOT open a PR yourself; Manager will.\\n- [ ] Append the completion block to `feedback/<agent>/<YYYY-MM-DD>.md`:\\n\\n  ```md\\n  ## WORK COMPLETE - READY FOR PR\\n\\n  Summary: <what you built>\\n  Files: <list>\\n  Tests: <summary>\\n  Evidence: <links/notes>\\n  ```\\n\\n- [ ] Ensure diffs stay within **Allowed paths**; include tests and evidence in your feedback.\\n\\n## 7) Build/Dev Mode Safety\\n\\n- [ ] **No** customer messaging, payments, or production Shopify mutations.\\n- [ ] If UI needs sample “approvals,” create **fixtures** only:\\n      `provenance.mode=\\\"dev:test\\\"`, include a `feedback_ref`, and keep **Apply disabled**.\\n- [ ] Autopublish toggles exist but are OFF. Do not enable; stage work behind flags.\\n\\n## 8) Escalation\\n\\n- [ ] If blocked > 10 minutes after tool attempts, log the blocker with exact error/output\\n      in your feedback file and @mention the manager in the **Issue** with a proposed next step.\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"AHSkI8QfZVDR9AU2k+YLj7hPnrszowaeINn2f/JdH4Q=\"}",
      "__type__": "DOCUMENT"
    },
    "docs/runbooks/ai_agent_review_checklist.md": {
      "__data__": "{\"id_\":\"docs/runbooks/ai_agent_review_checklist.md\",\"metadata\":{\"source\":\"docs/runbooks/ai_agent_review_checklist.md\",\"lastModified\":\"2025-10-18T06:43:59.486Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"# AI Agent Review Checklist (HITL)\\n\\n- Effective: 2025-10-18\\n- Scope: All customer-facing AI outputs, including approvals and public replies\\n\\n## Preconditions\\n\\n- [ ] Reviewer assigned in `app/agents/config/agents.json` (`ai-customer.human_review = true`)\\n- [ ] Evidence links present in PR and feedback entries\\n- [ ] Task → Issue → PR chain is explicit\\n\\n## Review Steps\\n\\n- [ ] Verify prompt, system instructions, and guardrails comply with `docs/RULES.md`\\n- [ ] Confirm no PII or secrets in prompts, logs, or artifacts\\n- [ ] Reproduce output locally with the exact inputs; attach transcripts\\n- [ ] Validate rollback/disable path (feature flag, revert plan)\\n- [ ] Check evaluation plan (manual or automated) and acceptance criteria\\n- [ ] Ensure customer-visible copy matches tone and product guidelines\\n\\n## Decision\\n\\n- [ ] Approve with links to evidence\\n- [ ] Request changes (list gaps + owner + ETA)\\n- [ ] Block (critical risk; add escalation)\\n\\n## Artifacts\\n\\n- Attach transcripts to `artifacts/ai-customer/<DATE>/review_*.jsonl` and hash them in a manifest\\n\\n## Escalation\\n\\n- If a credential or product decision is missing, pause that lane and file `reports/manager/ESCALATION.md`\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"PrzCeQGCsRZbEFeN9tFnUJkID7HCIXn6CLk3pJ9MBpw=\"}",
      "__type__": "DOCUMENT"
    },
    "docs/runbooks/data_staging_apply.md": {
      "__data__": "{\"id_\":\"docs/runbooks/data_staging_apply.md\",\"metadata\":{\"source\":\"docs/runbooks/data_staging_apply.md\",\"lastModified\":\"2025-10-19T01:16:01.498Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"# Data Staging Apply Runbook\\n\\n> Purpose: Rehearse Supabase migrations against staging using the IPv4 pooler, capture rollback evidence, and hand off a clean audit trail for manager sign-off.\\n\\n## Prerequisites\\n\\n- Repository checked out at `/home/justin/HotDash/hot-dash`.\\n- Vault access for Supabase staging secrets: `vault/occ/supabase/database_url_staging.env` and `vault/occ/supabase/service_key_staging.env`.\\n- Supabase CLI ≥ 2.48 installed (`supabase --version`).\\n- `psql` available in `PATH`.\\n- Feedback file for the day created at `feedback/data/<YYYY-MM-DD>.md`.\\n- `/tmp/data_plan.json` updated with the active molecule(s).\\n\\n## 0. Alignment & Logging\\n\\n1. Run through `docs/runbooks/agent_startup_checklist.md`.\\n2. Skim today’s direction at `docs/directions/data.md` for scope changes.\\n3. Start the daily header in `feedback/data/<YYYY-MM-DD>.md` with:\\n   - Objective\\n   - Planned commands\\n   - Artifact folder you will write to.\\n\\n## 1. Environment Setup\\n\\n```bash\\ncd /home/justin/HotDash/hot-dash\\nexport LOG_ROOT=\\\"artifacts/ops/$(date -u +%Y-%m-%d)\\\"\\nmkdir -p \\\"$LOG_ROOT\\\"\\nset -a\\nsource vault/occ/supabase/database_url_staging.env  # exports DATABASE_URL (IPv4 pooler, sslmode=require)\\nsource vault/occ/supabase/service_key_staging.env   # exports SUPABASE_SERVICE_KEY when needed\\nset +a\\n```\\n\\n- **Do not** mutate the DSN—staging connections must flow through the IPv4 session pooler; IPv6 hosts fail today.\\n- Capture the exact commands above in your feedback log.\\n- **MCP Credentials (browser-less workflow):** the Supabase CLI stores your OAuth session at `~/.supabase/access-token`. When MCP tooling or parity scripts need access, export it just-in-time without writing secrets to disk:\\n\\n  ```bash\\n  export SUPABASE_ACCESS_TOKEN=\\\"$(cat ~/.supabase/access-token)\\\"\\n  export SUPABASE_SERVICE_KEY=\\\"$(SUPABASE_ACCESS_TOKEN=\\\"$SUPABASE_ACCESS_TOKEN\\\" \\\\\\n    supabase projects api-keys get mmbjiyhsvniqxibzgyvx --output json \\\\\\n    | jq -r '.[] | select(.name==\\\"service_role\\\").api_key')\\\"\\n  ```\\n\\n  - Never commit these values; they are rotated per the Supabase dashboard.\\n  - Use the inline `curl`/MCP calls immediately, then `unset` both variables once evidence has been captured.\\n\\n## 2. Connectivity Check (Evidence Required)\\n\\n```bash\\npsql \\\"$DATABASE_URL\\\" -c \\\"select current_database(), inet_server_addr(), now();\\\" \\\\\\n  | tee \\\"$LOG_ROOT/ipv4_pooler_check_$(date -u +%H%M%S).log\\\"\\n```\\n\\nConfirm the server address resolves to the IPv4 pooler and attach the log path in your feedback.\\n\\n## 3. Inventory Pending Migrations\\n\\n```bash\\nsupabase migration list --db-url \\\"$DATABASE_URL\\\" \\\\\\n  | tee \\\"$LOG_ROOT/migration_status_pre_$(date -u +%H%M%S).txt\\\"\\n```\\n\\n- Identify the migrations you expect to touch (inventory bundle, knowledge base tables, analytics/dashboard RPCs).\\n- Note missing rollback scripts or prior partial applies; stage fixes before proceeding.\\n\\n## 4. Non-Destructive Apply Rehearsal\\n\\n1. Create a timestamped rehearsal directory:\\n\\n   ```bash\\n   export REHEARSAL_DIR=\\\"$LOG_ROOT/rehearsal_$(date -u +%Y%m%dT%H%M%SZ)\\\"\\n   mkdir -p \\\"$REHEARSAL_DIR\\\"\\n   ```\\n\\n2. Apply each migration file individually with `ON_ERROR_STOP` so failures surface quickly. Example pattern:\\n\\n   ```bash\\n   for file in supabase/migrations/2025101109*.sql \\\\\\n               supabase/migrations/2025101114*.sql \\\\\\n               supabase/migrations/20251015*.sql \\\\\\n               supabase/migrations/20251019004500_programmatic_seo_blueprints.sql; do\\n     echo \\\"==> $file\\\" | tee -a \\\"$REHEARSAL_DIR/migration_apply.log\\\"\\n     psql \\\"$DATABASE_URL\\\" -v ON_ERROR_STOP=1 -f \\\"$file\\\" \\\\\\n       >> \\\"$REHEARSAL_DIR/migration_apply.log\\\" 2>&1 || {\\n       echo \\\"!! failure: $file\\\" | tee -a \\\"$REHEARSAL_DIR/migration_apply.log\\\"\\n     }\\n     echo >> \\\"$REHEARSAL_DIR/migration_apply.log\\\"\\n   done\\n   ```\\n\\n3. If a statement fails:\\n   - Record the error (line number, object) in feedback.\\n   - Attempt **up to three** fixes/replays per molecule, logging each attempt (`mcp_attempt#.jsonl`).\\n   - Update `/tmp/data_plan.json` with the new status and evidence paths.\\n\\n## 5. Rollback Rehearsal\\n\\n1. Locate companion rollback SQL in `supabase/migrations.backup/`.\\n2. For every migration you executed, run the rollback script in isolation:\\n\\n   ```bash\\n   for file in supabase/migrations.backup/*rollback*.sql; do\\n     echo \\\"==> rollback $file\\\" | tee -a \\\"$REHEARSAL_DIR/migration_rollback.log\\\"\\n     psql \\\"$DATABASE_URL\\\" -v ON_ERROR_STOP=1 -f \\\"$file\\\" \\\\\\n       >> \\\"$REHEARSAL_DIR/migration_rollback.log\\\" 2>&1 || {\\n       echo \\\"!! rollback failure: $file\\\" | tee -a \\\"$REHEARSAL_DIR/migration_rollback.log\\\"\\n     }\\n     echo >> \\\"$REHEARSAL_DIR/migration_rollback.log\\\"\\n   done\\n   ```\\n\\n3. Capture any missing rollback coverage and open a follow-up task if scripts are absent.\\n\\n## 6. RLS Contract Verification\\n\\nRun the canonical RLS contract tests against staging (after re-applying forward migrations if you rolled them back):\\n\\n```bash\\npsql \\\"$DATABASE_URL\\\" -f supabase/rls_tests.sql \\\\\\n  | tee \\\"$REHEARSAL_DIR/rls_contract.log\\\"\\n```\\n\\n- All tests must pass. Log any failure with the schema/table affected. The script now asserts RLS/policy coverage for the Programmatic SEO tables (`programmatic_seo_blueprints`, `programmatic_seo_generation_runs`, `programmatic_seo_internal_links`) in addition to inventory + approvals datasets.\\n- If the contract file is missing, halt and escalate to the manager.\\n\\n## 7. Post-Run Cleanup\\n\\n1. Re-run `supabase migration list --db-url \\\"$DATABASE_URL\\\"` and save to `\\\"$REHEARSAL_DIR/migration_status_post.txt\\\"`.\\n2. Move any intermediate `psql` transcripts into the rehearsal directory for a single artifact bundle.\\n3. Update `/tmp/data_plan.json` with:\\n   - `status` for each molecule (`completed`, `blocked`, etc.).\\n   - `evidence` arrays referencing the new log paths.\\n4. Append results to `artifacts/data/<date>/mcp_attempt#.jsonl` if you used MCP server calls.\\n\\n## 8. Feedback & Hand-off\\n\\nIn `feedback/data/<YYYY-MM-DD>.md` document:\\n\\n- Summary of apply + rollback outcomes.\\n- Links to key logs (connectivity check, apply log, rollback log, RLS contract).\\n- Any blockers (missing tables, duplicate indexes, absent rollback scripts).\\n- Next actions or escalations (e.g., coordination with DevOps for production window).\\n\\nFinally, notify the manager per `docs/directions/data.md` if production scheduling or additional approvals are required.\\n\\n## 9. Troubleshooting\\n\\n- **IPv6 errors:** Ensure you sourced the pooler DSN from vault; the host should end with `.pooler.supabase.co`.\\n- **Duplicate object errors:** Amend migrations to use `IF NOT EXISTS` / `DROP ... IF EXISTS` guards before the next rehearsal.\\n- **Missing tables or columns:** Verify prior migrations applied in staging; fetch history with `supabase migration fetch`.\\n- **Permission denied:** Confirm `service_key_staging.env` was sourced; some admin checks require `SUPABASE_SERVICE_KEY`.\\n- **Long-running statements:** Use `psql --set=lock_timeout='5s'` for rehearsal if locks persist; document any contention in feedback.\\n\\n## Version History\\n\\n- 2025-10-18: Recreated runbook with IPv4 pooler workflow, apply/rollback evidence requirements, and RLS contract validation.\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"eoQ7PRlONOXLQAlcElJg+NPO65pAQMK1XDqVkk+wjEk=\"}",
      "__type__": "DOCUMENT"
    },
    "docs/runbooks/drift_checklist.md": {
      "__data__": "{\"id_\":\"docs/runbooks/drift_checklist.md\",\"metadata\":{\"source\":\"docs/runbooks/drift_checklist.md\",\"lastModified\":\"2025-10-17T18:47:30.093Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"# Drift Checklist (Daily at Shutdown) — Manager Only\\n\\n> **Who runs this:** Manager.  \\n> **When:** After **all agents** have completed their shutdown, and **before** you finalize Manager Shutdown.  \\n> **Goal:** no policy drift, no stray docs, no secret leaks, and a repo that restarts clean.\\n\\n---\\n\\n## 1) Secrets & Hygiene\\n\\n- [ ] **HEAD scan** (fast):\\n  ```bash\\n  gitleaks detect --source . --redact\\n  ```\\n- [ ] **History scan (Fri only)** or when you suspect a leak:\\n  ```bash\\n  gitleaks git -v --redact --report-format sarif --report-path .reports/gitleaks-history.sarif --log-opts=\\\"--all\\\" .\\n  ```\\n- [ ] Confirm **Push Protection** & **Secret Scanning** are enabled (Settings → Code security & analysis).\\n- [ ] Ensure `.env*` files are ignored and **not staged**.\\n\\n---\\n\\n## 2) Docs Governance (no sprawl)\\n\\n- [ ] Policy check (allow-list):\\n\\n  ```bash\\n  node scripts/policy/check-docs.mjs\\n  ```\\n\\n  Expect **0 violations**. Fix or quarantine via archive sweep (below).\\n\\n- [ ] **Planning TTL** (sweep anything > 2 days):\\n\\n  ```bash\\n  node scripts/ops/archive-docs.mjs\\n  git commit -am \\\"chore: planning TTL sweep\\\" && git push\\n  ```\\n\\n- [ ] **Stale docs clean-up**\\n  - [ ] Archive/remove any completed items from `docs/directions/<agent>.md` (leave “done” + PR link)\\n  - [ ] Move any one-off scratch notes into `feedback/<agent>/<YYYY-MM-DD>.md` or delete\\n\\n---\\n\\n## 3) CI & Required Checks\\n\\n- [ ] On `main`, the following are **required and passing**:\\n  - **Docs Policy**\\n  - **Danger**\\n  - **Gitleaks (Secrets Scan)**\\n  - **Validate AI Agent Config**\\n\\n- [ ] Sample PR sanity (create/choose one active PR):\\n  - [ ] **Docs Policy** passes (no rogue `.md`)\\n  - [ ] **Danger** passes (Issue linkage + Allowed paths present; tests if code changed)\\n  - [ ] **Gitleaks** passes\\n  - [ ] Diffs stay **within Allowed paths**\\n\\n---\\n\\n## 4) Sandboxes & Protections\\n\\n- [ ] **Branch protection** on `main` still enforces required checks.\\n- [ ] **CODEOWNERS** still guards `docs/**` and `feedback/**` (manager review).\\n- [ ] (Optional) Close **stale branches** (> 14 days no commits) unless actively used.\\n\\n---\\n\\n## 5) Directions & Feedback Consistency\\n\\n- [ ] For each active agent:\\n  - [ ] Today’s `feedback/<agent>/<YYYY-MM-DD>.md` ends with **status → next intent**\\n  - [ ] `docs/directions/<agent>.md` reflects **tomorrow’s objective** + constraints + Issue/PR links\\n  - [ ] Blockers have **owner + ETA** posted in the **Issue** (not only in feedback)\\n\\n---\\n\\n## 6) North Star & Plan\\n\\n- [ ] If scope changed today, update **NORTH_STAR** metrics and **PROJECT_PLAN** gates\\n- [ ] If not, confirm we’re still aligned: **no side projects, no extra docs**\\n\\n---\\n\\n## 7) Optional Deep Checks (weekly or after large changes)\\n\\n- [ ] Re-run history scan (see 1) and review SARIF in the Security tab\\n- [ ] Sample end-to-end flow: open a test PR → validate checks → ensure Danger rules catch missing artifacts\\n- [ ] Review **rulesets** (if used) to ensure path restrictions haven’t been loosened\\n\\n---\\n\\n## 8) Final State for Restart\\n\\n- [ ] Open Issues contain **DoD + Allowed paths + owner**\\n- [ ] Draft PRs exist for mid-slice work; bodies include **Fixes/Refs** and **Allowed paths**\\n- [ ] No dirty working tree: `git status` clean\\n- [ ] Post a one-liner in `feedback/manager/<YYYY-MM-DD>.md`: open PRs/Issues, top blockers, first action on restart\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"tajdVwnl4GNAyUSLzScTighDhCWn6l0w/xOUmkxutQI=\"}",
      "__type__": "DOCUMENT"
    },
    "docs/runbooks/manager_emergency_startup.md": {
      "__data__": "{\"id_\":\"docs/runbooks/manager_emergency_startup.md\",\"metadata\":{\"source\":\"docs/runbooks/manager_emergency_startup.md\",\"lastModified\":\"2025-10-17T18:47:30.093Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"# Manager Emergency Startup (Crash Recovery)\\n\\n> **When to use:** The machine crashed, agents didn’t finish shutdown, context may be missing.  \\n> **Goal:** Reconstruct current state safely and relaunch work with zero guesswork.\\n\\n---\\n\\n## PATH\\n\\n- [ ] Navigate to repo root ~/HotDash/hot-dash/ or /home/justin/HotDash/hot-dash/\\n\\n## 0) Safety First (no writes yet)\\n\\n- [ ] Disconnect tunnels/VPNs that may auto-run commands on resume.\\n- [ ] Do **not** force-push or delete anything. We will read & snapshot first.\\n\\n---\\n\\n## 1) Snapshot & Health (read-only where possible)\\n\\n### 1.1 Git status snapshot\\n\\n```bash\\ngit rev-parse --abbrev-ref HEAD\\ngit status -s\\ngit log --oneline -n 5\\ngit branch --list \\\"agent/*\\\"\\n```\\n\\n### 1.2 Find WIP/dangling work (reflog + stash)\\n\\n```bash\\ngit reflog -n 20\\ngit stash list\\n```\\n\\n- If you see `WIP` or local commits not on origin: note the SHAs. **Do not reset yet.**\\n\\n### 1.3 Confirm origin/remote\\n\\n```bash\\ngit remote -v\\ngit fetch --all --prune\\n```\\n\\n### 1.4 CI/Guardrails (read-only checks)\\n\\n- GitHub: `main` required checks still enforced (Docs Policy, Danger, Gitleaks, AI Config).\\n- Settings → Code security & analysis: Push Protection & Secret Scanning are **ON**.\\n\\n---\\n\\n## 2) Secret & Policy Sanity (fast scans)\\n\\n> Safe to run locally; does not modify state.\\n\\n```bash\\n# HEAD secrets scan\\ngitleaks detect --source . --redact\\n\\n# Docs allow-list (violations indicate untracked/dirty MD drift)\\nnode scripts/policy/check-docs.mjs || true\\n```\\n\\n- If either flags a problem, note it for **Step 6** (triage). Do not fix yet; finish state recovery first.\\n\\n---\\n\\n## 3) Recover Agent Work-In-Progress\\n\\n### 3.1 Ensure every agent has a branch\\n\\n```bash\\ngit branch --list \\\"agent/*\\\" | sed 's/* //'\\n```\\n\\n- If an agent was active and has **no** branch:\\n  - Check reflog for their local WIP commit; create a temp branch:\\n    ```bash\\n    git checkout -b recover/<agent>/<date>-<time> <SHA_FROM_REFLOG>\\n    ```\\n\\n### 3.2 Draft PRs for mid-slice work\\n\\nFor each branch without a PR, create a **Draft PR** (optional via GitHub CLI):\\n\\n```bash\\n# from branch agent/<agent>/<molecule>\\ngh pr create --draft --fill || true\\n```\\n\\n- In the PR body, add (or verify):\\n  - `Refs #<issue>` (or `Fixes #<issue>` if complete)\\n  - `Allowed paths: <pattern(s)>`\\n  - Brief **Design sketch** if new code paths\\n  - Links to tests/logs/screens if they exist\\n\\n> Draft PRs preserve state so agents can resume on any machine.\\n\\n---\\n\\n## 4) Rebuild Context from Logs & Files\\n\\n### 4.1 Feedback logs\\n\\n```bash\\nls -1 feedback/*/$(date +%F).md 2>/dev/null || true\\n```\\n\\n- If today’s logs are missing for an agent, check **yesterday’s** file and the last PR comments.\\n- If the terminal/history holds context:\\n  - Copy relevant, **non-secret** command lines & outcomes into today’s feedback log with a new “Recovery Note” section.\\n\\n### 4.2 Directions\\n\\n- Open `docs/directions/<agent>.md` and ensure it points at the current **Issue** and **PR**.\\n- If direction is out of date, add a short “Recovery Objective” for the next 2–4 hours.\\n\\n### 4.3 Issues\\n\\n- For each active Issue, add a manager comment:\\n  - “Crash recovery: branch = …, PR = …, next step = …, blocker owner/ETA = …”\\n\\n---\\n\\n## 5) Tool & Env Smoke (read-only or safe checks)\\n\\n```bash\\n# Shopify CLI present\\nshopify version\\n\\n# Supabase CLI present\\nsupabase --version\\n\\n# Quick MCP/adapter pings as read-only (or via health endpoints if you have them)\\n# e.g., curl -sSf http://localhost:<your-app-port>/health || true\\n```\\n\\n- If a tool is unavailable, note it in the Issue as a **blocker** with owner/ETA.\\n\\n---\\n\\n## 6) Triage & Fix (only now make small, safe changes)\\n\\n### 6.1 Secrets\\n\\n- If `gitleaks` flagged a leak:\\n  - Rotate the secret(s) and **do not** commit secrets in any form.\\n  - If necessary, schedule history cleanup with `git filter-repo` on a separate branch per the incident playbook.\\n\\n### 6.2 Docs policy violations\\n\\n- Run the planning TTL sweep (moves stray/old planning docs and reindexes):\\n  ```bash\\n  node scripts/ops/archive-docs.mjs\\n  git commit -am \\\"chore: planning TTL sweep\\\" && git push\\n  ```\\n\\n### 6.3 Stabilize PRs\\n\\n- Ensure PRs include Issue linkage and **Allowed paths**; keep as **Draft** until agents verify tests.\\n\\n---\\n\\n## 7) Relaunch Plan (make it explicit)\\n\\n- Create/resize Tasks (≤ 2-day molecules) for any recovered branches; set **DoD** + **Allowed paths**.\\n- Update `docs/directions/<agent>.md` with “Recovery Objective” + constraints + Issue/PR links.\\n- Post a one‑liner in `feedback/manager/$(date +%F).md`:\\n  - Open PRs/Issues recovered, top blockers & owners, **first step on restart** for each agent.\\n\\n---\\n\\n## 8) Optional: Fresh Clone Sanity (if local repo seems corrupted)\\n\\n```bash\\ncd ~ && mkdir -p CrashRecovery && cd CrashRecovery\\ngit clone git@github.com:<owner>/<repo>.git fresh\\ncd fresh && git fetch --all --prune\\n# Compare branches\\ngit branch -r | grep agent/\\n```\\n\\n- If diffs are confusing locally, continue work from `fresh/` on the recovered draft PR branches.\\n\\n---\\n\\n## 9) Greenlight\\n\\n- `main` checks green; Push Protection **ON**.\\n- Draft PRs exist for mid-slice work with Issue linkage + Allowed paths.\\n- Directions updated; Issues have a restart comment.\\n- Manager posts **Crash Recovery Summary** in today’s feedback.\\n\\n## 10) Proceed with work\\n\\n> You can now proceed with the normal **Manager Startup**.\\n\\n- Execute `docs/runbooks/manager_startup_checklist.md`\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"+BYSyOLZ3pnmhezNGtgwDJW/vPyn0hf/+gSyVpn0NkU=\"}",
      "__type__": "DOCUMENT"
    },
    "docs/runbooks/manager_shutdown_checklist.md": {
      "__data__": "{\"id_\":\"docs/runbooks/manager_shutdown_checklist.md\",\"metadata\":{\"source\":\"docs/runbooks/manager_shutdown_checklist.md\",\"lastModified\":\"2025-10-18T06:11:12.551Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"# Manager Shutdown (Restart‑safe, Complete)\\n\\n> Use this any time you step away or reboot. Goal: a **clean restart** where agents can resume with zero hidden context.\\n\\n---\\n\\n## 1) Normalize PRs & Issues\\n\\n- [ ] Every active **PR** links an **Issue** (`Fixes #<issue>`) **and** includes a line:\\n      `Allowed paths: <pattern(s)>` in the PR body.\\n- [ ] If work is mid‑slice, convert to **Draft PR** (preserve state; avoid local-only context).\\n- [ ] Add a short **Issue comment** (per task) with:\\n  - Current status (1 line)\\n  - **Next concrete step**\\n  - **Blockers** with **owner + ETA**\\n  - Links to any relevant logs/evidence (screenshots, test output)\\n\\n## 2a) Manager-Controlled Git \\u0014 Close Out\\n\\n- [ ] Run: `node scripts/policy/check-feedback.mjs --date 2025-10-15`\\n- [ ] For any agent with WORK COMPLETE but no PR yet, create branch/PR now\\n- [ ] For open PRs, ensure evidence links to the feedback file\\n- [ ] After merge, update directions to next task\\n\\n---\\n\\n## 2) CI & Guardrails (must be green)\\n\\n- [ ] `main` status checks **green**: _Docs Policy, Danger, Gitleaks, Validate AI Agent Config_.\\n- [ ] **Push Protection & Secret Scanning** enabled (Settings → Code security & analysis).\\n- [ ] Local pre‑shutdown checks (paste and run):\\n  ```bash\\n  node scripts/policy/check-docs.mjs\\n  node scripts/policy/check-ai-config.mjs\\n  gitleaks detect --source . --redact\\n  ```\\n  _If any fail: stop, fix, commit, and re‑run until green._\\n\\n---\\n\\n## 3) Gates Sanity (per active task)\\n\\nFor each **Issue (label: task)** and linked PR:\\n\\n- [ ] **Scope Gate** — Problem + Acceptance Criteria present in the **Issue**.\\n- [ ] **Sandbox** — **Allowed paths** present in **Issue** & **PR**; diffs stay within them.\\n- [ ] **Design Gate** — PR describes interfaces, data flow, and failure modes (for new paths).\\n- [ ] **Evidence Gate (dev)** — tests/logs/screens satisfy the **DoD**.\\n- [ ] **Ship Gate (if merging)** — rollback noted; changelog if user‑visible.\\n\\n_Missing any artifact? Comment on the PR with the gap and reassign._\\n\\n---\\n\\n## 4) Direction & Feedback Closure\\n\\nFor each **active agent**:\\n\\n- [ ] Read today’s `feedback/<agent>/<YYYY‑MM‑DD>.md` → extract answers, blockers, decisions.\\n- [ ] Update `docs/directions/<agent>.md` with **tomorrow’s objective**, **constraints**, and links\\n      to the **Issue** (and PR if open).\\n- [ ] **Archive/remove** completed items and feedback that has been actioned from directions and feedback files\\n- [ ] Ensure the last entry in the agent’s feedback states: **status → next intent**.\\n\\n_Notes:_ Dev agents write only to their feedback log and code under Allowed paths.\\nDo **not** create or edit other docs.\\n\\n---\\n\\n## 5) Planning TTL & Drift Sweep\\n\\n- [ ] If any `docs/planning/*` is older than **2 days**, sweep and commit:\\n  ```bash\\n  node scripts/ops/archive-docs.mjs\\n  git commit -am \\\"chore: planning TTL sweep\\\" && git push\\n  ```\\n- [ ] Glance for any stray `.md` or cross‑agent edits in today’s PRs (reject/clean if found).\\n\\n---\\n\\n## 6) Security & Hygiene\\n\\n- [ ] No secrets in local logs/console paste. Close terminals with creds; stop tunnels.\\n- [ ] Ensure `.env*` are **not staged**; `.gitignore` covers them.\\n- [ ] Inventory any newly rotated secrets in the private Security note (if applicable).\\n\\n---\\n\\n## 7) CEO Summary (paste in `feedback/manager/<YYYY‑MM‑DD>.md`)\\n\\n**Today’s Outcomes**\\n\\n- Shipped/merged: PRs #…, #…\\n- In progress: PRs #… (DoD % complete), Issues #…\\n- Incidents: secrets (Y/N), CI failures (count), rogue docs (count)\\n\\n**Next Goal (tomorrow)**\\n\\n- Primary objective: …\\n- Success criteria (from North Star): …\\n\\n**Agent Performance (quick grading)**\\n\\n- <agent> — **Score (1–5)**\\n  - 2–3 things done well:\\n    1. …\\n    2. …\\n  - 1–2 things to change:\\n    1. …\\n  - **One thing to stop entirely:** …\\n\\n(Repeat per active agent; tie feedback to DoD / Allowed paths / feedback discipline.)\\n\\n### 8) Run Drift Checklist (Manager-only, required)\\n\\nBefore finalizing shutdown:\\n\\n- [ ] Execute `docs/runbooks/drift_checklist.md` **in full** (after all agents have shut down).\\n- [ ] Confirm: HEAD secrets scan is clean; docs policy shows 0 violations; planning TTL sweep committed;\\n      required checks on `main` still enforced; directions ↔ feedback are consistent for tomorrow.\\n\\n## 9) Finalize\\n\\n- [ ] Merge or request changes with **explicit next steps** (per PR).\\n- [ ] Confirm branch protection required checks are **still on** for `main`.\\n- [ ] Optional: Add a **restart plan** comment to each active Issue with\\n      the **first 1–2 steps** the agent should take on startup.\\n\\n> Build/Dev mode safety: no customer messaging, payments, or production Shopify mutations.\\n> If the UI needs sample approvals to render, they must be **fixtures**\\n> (`provenance.mode=\\\"dev:test\\\"`, with `feedback_ref`, and **Apply disabled**).\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"SqCEQ8m+jfglIqF1f8qJVRQolXAp7jkMthMPH9AtvGU=\"}",
      "__type__": "DOCUMENT"
    },
    "docs/runbooks/manager_startup_checklist.md": {
      "__data__": "{\"id_\":\"docs/runbooks/manager_startup_checklist.md\",\"metadata\":{\"source\":\"docs/runbooks/manager_startup_checklist.md\",\"lastModified\":\"2025-10-19T00:09:22.319Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"# Manager Startup (On first run)\\n\\n## PATH\\n\\n- [ ] Navigate to repo root ~/HotDash/hot-dash/ or /home/justin/HotDash/hot-dash/\\n\\n## 0) Align to the Star (1–2 min)\\n\\n- [ ] Skim diffs in `docs/NORTH_STAR.md` and `docs/RULES.md` (if changed since yesterday).\\n- [ ] Open `docs/OPERATING_MODEL.md` header; confirm the pipeline: **Signals → Suggestions → Approvals → Actions → Audit → Learn**.\\n- [ ] Confirm gap-analysis items are integrated (Programmatic SEO, Guided Selling, CWV→$$, A/B, Media, Learning Loop) and Action Dock is reflected in dashboard config.\\n- [ ] MCP usage clarifications: Shopify (dev + storefront) via MCP; GA4/GSC via internal adapters (no MCP). Ensure directions reflect this.\\n- [ ] Autopublish: verify toggles exist but are OFF (see `docs/specs/hitl/approvals-framework.config.json`).\\n\\n## 1) Repo & CI Guardrails (2–4 min)\\n\\n- [ ] **Status checks green on `main`**: _Docs Policy, Danger, Gitleaks, Validate AI Agent Config_.\\n- [ ] **Push Protection & Secret Scanning** enabled (Settings → Code security & analysis).\\n- [ ] Run local policy checks:\\n  ```bash\\n  node scripts/policy/check-docs.mjs\\n  node scripts/policy/check-ai-config.mjs\\n  gitleaks detect --source . --redact\\n  ```\\n  _If any fail: stop, fix, commit before continuing._\\n\\n## 2) Tools & MCP Health (2–3 min)\\n\\n- [ ] `shopify version` OK; `supabase --version` OK.\\n- [ ] Chatwoot API reachable (`npm run ops:check-chatwoot-health`).\\n- [ ] **Agents SDK/HITL** config intact: `app/agents/config/agents.json` has `ai-customer.human_review: true` and reviewers.\\n- [ ] (If social enabled) Publer environment secret present (never hard-coded).\\n\\n## 3) Manager-Controlled Git — Daily Flow (new)\\n\\n- [ ] Run: `node scripts/policy/check-feedback.mjs --date 2025-10-15`\\n- [ ] For each agent with a WORK COMPLETE block today:\\n  - Create/checkout branch: `agent/<agent>/<YYYYMMDD>-<task>`\\n  - Add only files in Allowed paths; commit with evidence reference\\n  - Push and create PR (`gh pr create ...`)\\n- [ ] Merge when CI green; update direction to next task\\n\\n## 3) Project status review and Agent direction (3–5 min)\\n\\n### 3.1 At-a-glance (30–45 sec)\\n\\n- [ ] **Milestone** on track? (tasks ≤ 2-day molecules)\\n- [ ] **CI** green on active PRs (Docs Policy, Danger, Gitleaks, AI Config)\\n- [ ] **Main** releasable (build/smoke pass)\\n\\n### 3.2 Feedback sweep **first** (60–90 sec)\\n\\nFor each active agent:\\n\\n- [ ] Open `feedback/<agent>/<YYYY-MM-DD>.md`\\n- [ ] Extract **blockers**, unanswered questions, unexpected findings\\n- [ ] Tag each blocker with **owner** and **ETA** (you or agent)\\n- [ ] If a decision is needed, add a short **Issue comment** on the task (not in feedback)\\n\\n### 3.3 Issues & PRs (gate sanity) (60–90 sec)\\n\\nFor each **Issue (label: task)** and its linked PR:\\n\\n- [ ] **Scope Gate:** Problem + Acceptance Criteria present in Issue\\n- [ ] **Sandbox:** Issue lists **Allowed paths**; PR body repeats them\\n- [ ] **Design Gate:** PR describes interfaces/data flow/failure modes\\n- [ ] **Evidence Gate (dev):** unit/integration tests present or justified\\n- [ ] **Ship Gate (if merging today):** rollback noted; changelog if user-visible\\n- [ ] Missing anything? Comment on the PR with the gap and reassign\\n\\n### 3.4 Prioritize blockers (30–45 sec)\\n\\n- [ ] Rank top 3 blockers (env/data/API/review)\\n- [ ] Decide per blocker: **unblock now**, **de-scope**, or **timebox & escalate**\\n- [ ] Record the decision in the **Issue comment** (link from feedback)\\n\\n### 3.5 Update agent direction (45–60 sec)\\n\\nFor each active agent:\\n\\n- [ ] Open `docs/directions/<agent>.md` file must follow template `docs/directions/agenttemplate.md`\\n- [ ] **Set today’s objective** (≤ 2-day molecule) and **constraints**\\n- [ ] Reflect answers/decisions from step **3.2/3.4** into the direction file\\n- [ ] **Archive/remove** completed items (leave “done” note + PR link)\\n- [ ] Confirm the **task → Issue → PR** chain is explicit\\n- [ ] Ensure each agent direction includes Allowed paths and references MCP usage (Shopify via MCP; GA4/GSC via internal adapters; attach command logs)\\n\\n### 3.6 Sandboxes & safety (quick pass)\\n\\n- [ ] Diffs stay **within Allowed paths** (Danger enforces)\\n- [ ] No new `.md` outside allow-list (Docs Policy enforces)\\n- [ ] No secrets in code/logs; push protection **ON**\\n- [ ] Dev mode: **no customer messaging, payments, or production Shopify mutations**\\n\\n### 3.7 Today plan (30 sec)\\n\\n- [ ] Assign/resize 10–15 molecules **per agent**; confirm DoD + Allowed paths; sequence priority: Programmatic SEO → Guided Selling/Kit Composer → CWV→$$ → A/B harness; stage deep ads drilldowns later.\\n- [ ] Post a one-liner plan in `feedback/manager/<YYYY-MM-DD>.md`\\n\\n> **Note:** Approvals/HITL is **out of scope in build/dev mode**. If the UI needs sample approvals to render, use **fixture entries** with `provenance.mode=\\\"dev:test\\\"`, a `feedback_ref`, and **Apply disabled**.\\n\\n## 4 Drift Guard (2–4 min)\\n\\n- [ ] Run docs policy again on your working branch:\\n  ```bash\\n  node scripts/policy/check-docs.mjs\\n  ```\\n- [ ] **Planning TTL**: archive any `docs/planning/*` older than **2 days**:\\n  ```bash\\n  node scripts/ops/archive-docs.mjs\\n  git commit -am \\\"chore: planning TTL sweep\\\" && git push\\n  ```\\n- [ ] Glance for any stray `.md` or cross‑agent edits in repo and Bounce them.\\n\\n## 5 Quick Health Lights (Tiles should be green)\\n\\n- [ ] Tile P95 < **3s** (prod).\\n- [ ] Nightly rollup error rate < **0.5%** (last 24h).\\n- [ ] Approvals SLA for CX met; growth & inventory reviews on track.\\n- [ ] **0** secret incidents open.\\n\\n## 6 “Stop the Line” Triggers (do not proceed until resolved)\\n\\n- Secrets detected (local or CI) → rotate, purge history, re-scan.\\n- PR missing Issue linkage or Allowed paths → send back.\\n- Approvals without evidence/rollback or failing `/validate` → send back.\\n\\n## 7 Start the Day (2 min)\\n\\n- [ ] Create/resize **Tasks** (≤ 2-day molecules) and set in the Issue:\\n      **owner**, **DoD**, and **Allowed paths** (fnmatch).\\n- [ ] Update `docs/directions/<agent>.md` with **today’s objective** + **constraints**,\\n      and link the **Issue** (and PR if open).\\n- [ ] Move any blockers from yesterday’s `feedback/<agent>/<YYYY-MM-DD>.md`\\n      into the **Issue** as a comment with **resolver + ETA**.\\n- [ ] (Optional) Post a one-liner plan in `feedback/manager/<YYYY-MM-DD>.md`.\\n- [ ] Dev mode only: if UI needs sample approvals, use **fixtures** with\\n      `provenance.mode=\\\"dev:test\\\"`, a `feedback_ref`, and **Apply disabled**.\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"eIeonLzqWGTLovVhsXrNS9xCre0r+Si4Z/J2cODMr1w=\"}",
      "__type__": "DOCUMENT"
    },
    "docs/runbooks/production_deployment.md": {
      "__data__": "{\"id_\":\"docs/runbooks/production_deployment.md\",\"metadata\":{\"source\":\"docs/runbooks/production_deployment.md\",\"lastModified\":\"2025-10-19T01:13:55.789Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"# Production Deployment Runbook\\n\\n## Overview\\n\\nThis runbook describes the process for deploying the HotDash application to production on Fly.io.\\n\\n## Prerequisites\\n\\n- [ ] All CI checks passing on main branch\\n- [ ] Staging deployment successful and healthy\\n- [ ] Manager approval obtained\\n- [ ] Deployment window: Monday-Friday, 9am-5pm PT\\n- [ ] FLY_API_TOKEN configured in GitHub Secrets\\n- [ ] Verify `scripts/ci/ensure-analytics-modules.mjs` is present (temporary guard that backfills missing GA4 helpers during CI builds)\\n- [ ] Review latest staging workflow run to confirm smoke + rollback jobs succeeded (or captured artifacts when skipped)\\n\\n### Required CI Checks\\n\\nThe following CI checks MUST pass before production deployment:\\n\\n1. **Docs Policy** - Ensures all markdown files are in allowed paths\\n2. **Danger** - Validates PR has Issue linkage and allowed paths\\n3. **Gitleaks** - Scans for secrets in code\\n4. **AI Config** - Validates AI agent configuration\\n5. **Health Check** - Verifies health check workflow is functional\\n\\nThese checks are enforced by branch protection on `main` and verified during deployment.\\n\\n### Email Notifications\\n\\nAll deployments send email notifications to justin@hotrodan.com:\\n\\n- **Success:** ✅ Production Deployment Successful\\n- **Failure:** 🚨 Production Deployment Failed\\n- **Rollback:** ⚠️ Production Rollback Executed\\n\\nNotifications include:\\n\\n- Commit SHA\\n- Deployment reason\\n- Deployed by (GitHub actor)\\n- Deployment time and version\\n- Workflow run link\\n- Health check status\\n\\n## Deployment Process\\n\\n### Staging Smoke & Rollback Checklist\\n\\nBefore triggering production deploys, review the most recent `Deploy to Staging` workflow run:\\n\\n1. **Smoke job artifacts**\\n   - Artifact name: `smoke-<run_number>`.\\n   - Inspect `smoke-logs/http_status.txt` (expect `200`).\\n   - Review `smoke-logs/curl.log` for connection retries and final status.\\n   - Validate manifest at `smoke-logs/sha256_manifest.txt` to confirm integrity.\\n\\n2. **Rollback job readiness**\\n   - Artifact name: `rollback-<run_number>` (may be absent if deploy succeeded).\\n   - If present, ensure `rollback-logs/rollback.log` shows a Fly deploy using the previous `imageRef`.\\n   - Confirm `rollback-logs/status.log` shows healthy machines post-rollback.\\n   - Check `rollback-logs/app-missing.log` when Fly app does not exist (expected on first run).\\n\\n3. **Guard script verification**\\n   - Confirm build job executed `node scripts/ci/ensure-analytics-modules.mjs` without errors.\\n   - If the script created files, schedule follow-up to land real modules and remove the guard.\\n\\nOnly proceed to production once staging smoke passes (HTTP 200) and rollback either succeeds or safely skips.\\n\\n### Automated Deployment (Recommended)\\n\\n1. **Navigate to GitHub Actions**\\n   - Go to: https://github.com/Jgorzitza/HotDash/actions/workflows/deploy-production.yml\\n\\n2. **Click \\\"Run workflow\\\"**\\n   - Branch: `main`\\n   - Reason: Describe the deployment (e.g., \\\"Deploy v1.0.0 with new dashboard features\\\")\\n   - Skip staging check: Leave unchecked (only check for emergencies)\\n\\n3. **Monitor Deployment**\\n   - Watch the workflow progress\\n   - Verify each job completes successfully:\\n     - Pre-deployment validation\\n     - Build\\n     - Deploy\\n     - Health check\\n   - If health check fails, automatic rollback will trigger\\n\\n4. **Verify Deployment**\\n   - Check app URL: https://hotdash-production.fly.dev\\n   - Verify health endpoint: https://hotdash-production.fly.dev/health\\n   - Check Fly.io status: `fly status -a hotdash-production`\\n   - Verify email notification received (if deployment failed)\\n\\n### Verification Steps\\n\\nAfter deployment completes, perform these verification checks:\\n\\n1. **Health Check Verification**\\n\\n   ```bash\\n   # Check health endpoint\\n   curl https://hotdash-production.fly.dev/health\\n\\n   # Expected response:\\n   # {\\\"status\\\":\\\"healthy\\\",\\\"timestamp\\\":\\\"...\\\",\\\"uptime\\\":...}\\n   ```\\n\\n2. **Fly.io Status Verification**\\n\\n   ```bash\\n   # Check app status\\n   fly status -a hotdash-production\\n\\n   # Expected: Status = deployed, Machines = running\\n   ```\\n\\n3. **Application Functionality**\\n   - Navigate to https://hotdash-production.fly.dev\\n   - Verify login works\\n   - Check dashboard loads\\n   - Test critical features\\n\\n4. **Metrics Verification**\\n\\n   ```bash\\n   # Check metrics endpoint\\n   curl https://hotdash-production.fly.dev/metrics\\n\\n   # Should return Prometheus format metrics\\n   ```\\n\\n5. **Log Verification**\\n\\n   ```bash\\n   # Check recent logs\\n   fly logs -a hotdash-production --tail\\n\\n   # Look for deployment success messages\\n   # Verify no errors in startup\\n   ```\\n\\n## Rollback Process\\n\\n### Automated Rollback (Recommended)\\n\\n1. **Navigate to GitHub Actions**\\n   - Go to: https://github.com/Jgorzitza/HotDash/actions/workflows/rollback-production.yml\\n\\n2. **Click \\\"Run workflow\\\"**\\n   - Target version: Leave empty for previous version, or specify version number\\n   - Reason: Describe why rollback is needed (REQUIRED)\\n\\n3. **Monitor Rollback**\\n   - Watch the workflow progress\\n   - Verify rollback completes in < 2 minutes\\n   - Check health verification passes\\n\\n4. **Verify Rollback**\\n   - Check app is healthy: https://hotdash-production.fly.dev\\n   - Verify correct version deployed\\n   - Check Fly.io status: `fly status -a hotdash-production`\\n   - Verify email notification received\\n\\n### Rollback Verification Steps\\n\\nAfter rollback completes, verify the system is stable:\\n\\n1. **Version Verification**\\n\\n   ```bash\\n   # Check deployed version\\n   fly releases -a hotdash-production\\n\\n   # Verify rollback to previous version\\n   ```\\n\\n2. **Health Check**\\n\\n   ```bash\\n   # Verify health endpoint\\n   curl https://hotdash-production.fly.dev/health\\n\\n   # Expected: {\\\"status\\\":\\\"healthy\\\",...}\\n   ```\\n\\n3. **Functionality Test**\\n   - Test critical user flows\\n   - Verify no errors in logs\\n   - Check metrics are being collected\\n\\n4. **Incident Documentation**\\n   - Document what caused the rollback\\n   - Create GitHub issue if needed\\n   - Export to audit trail:\\n   ```bash\\n   ./scripts/ops/export-incident.sh \\\\\\n     --type \\\"rollback\\\" \\\\\\n     --severity \\\"warning\\\" \\\\\\n     --details \\\"Rolled back due to: <reason>\\\"\\n   ```\\n\\n### Rollback Time Targets\\n\\n- **Target:** < 5 minutes from trigger to healthy\\n- **Automated rollback:** Triggered on health check failure\\n- **Manual rollback:** Available via workflow_dispatch\\n- **Emergency rollback:** Use Fly CLI directly if GitHub Actions unavailable\\n\\n## Health Checks\\n\\n### Automated Health Checks\\n\\nThe deployment workflow automatically performs health checks:\\n\\n1. Tries `/health` endpoint (expects HTTP 200)\\n2. Falls back to `/` endpoint (expects HTTP 200 or 302)\\n3. Verifies Fly.io machine status\\n\\n### Manual Health Checks\\n\\n```bash\\n# Check HTTP endpoints\\ncurl -I https://hotdash-production.fly.dev/health\\ncurl -I https://hotdash-production.fly.dev/\\n\\n# Check Fly.io status\\nfly status -a hotdash-production\\n\\n# Check logs\\nfly logs -a hotdash-production\\n\\n# Check machine health\\nfly checks list -a hotdash-production\\n```\\n\\n## Monitoring\\n\\n### Key Metrics\\n\\n- **Uptime:** Target ≥ 99.9% (30-day)\\n- **Response Time:** P95 < 3s\\n- **Error Rate:** < 0.5%\\n- **Deployment Success Rate:** > 95%\\n- **Rollback Time:** < 5 minutes\\n\\n### Monitoring Tools\\n\\n- Fly.io Dashboard: https://fly.io/apps/hotdash-production/monitoring\\n- GitHub Actions: https://github.com/Jgorzitza/HotDash/actions\\n- Application Logs: `fly logs -a hotdash-production`\\n\\n## Troubleshooting\\n\\n### Deployment Fails\\n\\n1. **Check CI Status**\\n   - Verify all CI checks passed on main\\n   - Review GitHub Actions logs\\n\\n2. **Check Staging Health**\\n   - Verify staging is healthy\\n   - Test staging deployment first\\n\\n3. **Check Secrets**\\n   - Verify all required secrets are configured\\n   - Check for expired credentials\\n\\n4. **Check Logs**\\n\\n   ```bash\\n   fly logs -a hotdash-production\\n   ```\\n\\n5. **Rollback if Needed**\\n   - Use automated rollback workflow\\n\\n### Health Check Fails\\n\\n1. **Check Application Logs**\\n\\n   ```bash\\n   fly logs -a hotdash-production --tail\\n   ```\\n\\n2. **Check Machine Status**\\n\\n   ```bash\\n   fly status -a hotdash-production\\n   fly checks list -a hotdash-production\\n   ```\\n\\n3. **Restart Machine**\\n\\n   ```bash\\n   fly machine restart <machine-id> -a hotdash-production\\n   ```\\n\\n4. **Rollback if Persistent**\\n   - Use rollback workflow\\n   - Investigate issue in staging\\n\\n## Deployment Checklist\\n\\n### Pre-Deployment\\n\\n- [ ] All CI checks passing on main\\n- [ ] Staging deployment successful\\n- [ ] Staging health checks passing\\n- [ ] Manager approval obtained\\n- [ ] Within deployment window (Mon-Fri, 9am-5pm PT)\\n- [ ] Rollback plan reviewed\\n\\n### During Deployment\\n\\n- [ ] Deployment workflow triggered\\n- [ ] Build successful\\n- [ ] Deployment successful\\n- [ ] Health checks passing\\n- [ ] No errors in logs\\n\\n### Post-Deployment\\n\\n- [ ] Application accessible\\n- [ ] Health endpoint responding\\n- [ ] Key features verified\\n- [ ] Monitoring dashboards updated\\n- [ ] Deployment documented\\n\\n### If Rollback Needed\\n\\n- [ ] Rollback workflow triggered\\n- [ ] Rollback completed in < 5 minutes\\n- [ ] Health checks passing after rollback\\n- [ ] Incident documented\\n- [ ] Root cause investigation scheduled\\n\\n## Deployment Windows\\n\\n**Allowed:**\\n\\n- Monday-Friday, 9am-5pm Pacific Time\\n- Emergency deployments require manager approval\\n\\n**Avoided:**\\n\\n- Weekends\\n- Outside business hours\\n- Holidays\\n- During high-traffic periods\\n\\n## Version History\\n\\n- v1.0 (2025-10-15) - Initial production deployment runbook\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"R80JmPTO0lTVYVdlOyOr9omwpcDK20HxjSOMdaA9fxk=\"}",
      "__type__": "DOCUMENT"
    },
    "docs/runbooks/secrets.md": {
      "__data__": "{\"id_\":\"docs/runbooks/secrets.md\",\"metadata\":{\"source\":\"docs/runbooks/secrets.md\",\"lastModified\":\"2025-10-17T18:47:30.093Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"# Secrets Management Runbook\\n\\n**Owner:** devops\\n**Date:** 2025-10-16\\n**Status:** Production\\n\\n## Overview\\n\\nHotDash uses a secure secret management system with secrets stored in `vault/occ/**` (gitignored) and synchronized to GitHub Secrets and Fly.io secrets via automated sync script.\\n\\n## Secret Sync Automation\\n\\n### Sync Script\\n\\n**Location:** `scripts/ops/sync-secrets.sh`\\n\\n**Usage:**\\n\\n```bash\\n# Dry run (recommended first)\\n./scripts/ops/sync-secrets.sh --dry-run\\n\\n# Sync to both environments\\n./scripts/ops/sync-secrets.sh\\n\\n# Sync to production only\\n./scripts/ops/sync-secrets.sh --environment production\\n\\n# Sync to staging only\\n./scripts/ops/sync-secrets.sh --environment staging\\n```\\n\\n### What Gets Synced\\n\\n1. **Google Analytics Service Account**\\n   - File: `vault/occ/google/analytics-service-account.json`\\n   - Synced as: `GOOGLE_ANALYTICS_SERVICE_ACCOUNT`\\n\\n2. **Text-based Secrets**\\n   - Any `.txt` file in `vault/occ/**`\\n   - Converted to uppercase with underscores\\n   - Example: `vault/occ/shopify/api-key.txt` → `SHOPIFY_API_KEY`\\n\\n### Sync Process\\n\\n1. Read secrets from `vault/occ/**`\\n2. Validate secret format and content\\n3. Sync to GitHub Secrets via `gh secret set`\\n4. Sync to Fly secrets via `fly secrets set`\\n5. Verify sync completed successfully\\n\\n## Secrets Management Runbook\\n\\n**Owner:** integrations agent  \\n**Date:** 2025-10-16  \\n**Purpose:** Secrets and credentials management for all adapters\\n\\n---\\n\\n## Overview\\n\\nThis document describes the secrets required for all integration adapters and how to manage them across environments.\\n\\n**Environments:**\\n\\n- **Local:** Development on developer machines\\n- **Staging:** Testing environment (Fly.io staging app)\\n- **Production:** Live environment (Fly.io production app)\\n\\n---\\n\\n## Adapter Requirements\\n\\n### Shopify Admin GraphQL\\n\\n**Required Secrets:**\\n\\n- `SHOPIFY_API_KEY` - App API key from Partner Dashboard\\n- `SHOPIFY_API_SECRET` - App API secret from Partner Dashboard\\n- `SHOPIFY_STORE_URL` - Store domain (e.g., hotrodan.myshopify.com)\\n\\n**Storage:**\\n\\n- **Local:** `vault/occ/shopify/` (gitignored)\\n  - `api_key_staging.env`\\n  - `api_secret_staging.env`\\n  - `shop_domain_staging.env`\\n- **Staging:** Fly.io secrets (`fly secrets set`)\\n- **Production:** Fly.io secrets (`fly secrets set`)\\n\\n**Rotation:** Every 90 days or on exposure\\n\\n**Scopes Required:**\\n\\n- `read_orders`\\n- `read_products`\\n- `read_inventory`\\n- `read_marketplace_orders`\\n\\n---\\n\\n### Supabase\\n\\n**Required Secrets:**\\n\\n- `SUPABASE_URL` - Project URL\\n- `SUPABASE_ANON_KEY` - Anonymous key (frontend)\\n- `SUPABASE_SERVICE_KEY` - Service role key (backend)\\n\\n**Storage:**\\n\\n- **Local:** `vault/occ/supabase/` (gitignored)\\n  - `database_url_staging.env`\\n  - `service_key_staging.env`\\n- **Staging:** Fly.io secrets\\n- **Production:** Fly.io secrets\\n\\n**Rotation:** Every 90 days or on exposure\\n\\n**Project:** mmbjiyhsvniqxibzgyvx\\n\\n---\\n\\n### Chatwoot\\n\\n**Required Secrets:**\\n\\n- `CHATWOOT_API_TOKEN` - API access token\\n- `CHATWOOT_ACCOUNT_ID` - Account ID\\n- `CHATWOOT_BASE_URL` - API base URL (e.g., https://app.chatwoot.com)\\n\\n**Storage:**\\n\\n- **Local:** `vault/occ/chatwoot/` (gitignored)\\n  - `api_token_staging.env`\\n  - `account_id_staging.env`\\n- **Staging:** Fly.io secrets\\n- **Production:** Fly.io secrets\\n\\n**Rotation:** Every 90 days or on exposure\\n\\n**Rate Limit:** 10 requests/second\\n\\n---\\n\\n### Publer (Social Media)\\n\\n**Required Secrets:**\\n\\n- `PUBLER_API_KEY` - Publer API key\\n- `PUBLER_WORKSPACE_ID` - Workspace identifier (default: \\\"HotRodAN\\\")\\n\\n**Storage:**\\n\\n- **Local:** `vault/occ/publer/` (gitignored)\\n  - `api_key_staging.env`\\n  - `workspace_id_staging.env`\\n- **Staging:** Fly.io secrets (staging workspace)\\n- **Production:** Fly.io secrets (production workspace)\\n\\n**Rotation:** Every 90 days or on exposure\\n\\n**Platforms Supported:**\\n\\n- Facebook\\n- Instagram\\n- Twitter\\n- LinkedIn\\n- Pinterest\\n- TikTok\\n- YouTube\\n- Reddit\\n- Telegram\\n- Google Business\\n\\n---\\n\\n### Google Analytics (GA4)\\n\\n**Required Secrets:**\\n\\n- `GA4_PROPERTY_ID` - GA4 property ID\\n- `GA4_SERVICE_ACCOUNT_KEY` - Service account JSON key\\n\\n**Storage:**\\n\\n- **Local:** `vault/occ/google/` (gitignored)\\n  - `analytics-service-account.json`\\n  - `property_id_staging.env`\\n- **Staging:** Fly.io secrets (JSON as base64)\\n- **Production:** Fly.io secrets (JSON as base64)\\n\\n**Rotation:** Every 90 days\\n\\n**Project:** hotrodan-seo-reports\\n\\n---\\n\\n## Local Development Setup\\n\\n### 1. Clone Vault Credentials\\n\\n```bash\\n# Ensure vault/ directory exists and is gitignored\\nmkdir -p vault/occ/{shopify,supabase,chatwoot,publer,google}\\n\\n# Copy staging credentials from secure storage\\n# (Coordinate with manager for access)\\n```\\n\\n### 2. Load Environment Variables\\n\\n```bash\\n# Load all staging credentials\\nexport $(grep -v '^#' vault/occ/shopify/api_key_staging.env | xargs)\\nexport $(grep -v '^#' vault/occ/shopify/api_secret_staging.env | xargs)\\nexport $(grep -v '^#' vault/occ/supabase/database_url_staging.env | xargs)\\nexport $(grep -v '^#' vault/occ/supabase/service_key_staging.env | xargs)\\n# ... etc for other services\\n```\\n\\n### 3. Verify Credentials\\n\\n```bash\\n# Test MCP tools\\n./mcp/test-mcp-tools.sh\\n\\n# Expected output:\\n# ✓ Shopify MCP - Ready\\n# ✓ Supabase MCP - Ready\\n# ✓ All tools operational\\n```\\n\\n---\\n\\n## Staging Deployment\\n\\n### Set Secrets in Fly.io\\n\\n```bash\\n# Shopify\\nfly secrets set SHOPIFY_API_KEY=\\\"...\\\" --app hot-dash-staging\\nfly secrets set SHOPIFY_API_SECRET=\\\"...\\\" --app hot-dash-staging\\nfly secrets set SHOPIFY_STORE_URL=\\\"hotrodan.myshopify.com\\\" --app hot-dash-staging\\n\\n# Supabase\\nfly secrets set SUPABASE_URL=\\\"...\\\" --app hot-dash-staging\\nfly secrets set SUPABASE_ANON_KEY=\\\"...\\\" --app hot-dash-staging\\nfly secrets set SUPABASE_SERVICE_KEY=\\\"...\\\" --app hot-dash-staging\\n\\n# Chatwoot\\nfly secrets set CHATWOOT_API_TOKEN=\\\"...\\\" --app hot-dash-staging\\nfly secrets set CHATWOOT_ACCOUNT_ID=\\\"...\\\" --app hot-dash-staging\\nfly secrets set CHATWOOT_BASE_URL=\\\"https://app.chatwoot.com\\\" --app hot-dash-staging\\n\\n# Publer (staging workspace)\\nfly secrets set PUBLER_API_KEY=\\\"...\\\" --app hot-dash-staging\\nfly secrets set PUBLER_WORKSPACE_ID=\\\"HotRodAN-Staging\\\" --app hot-dash-staging\\n\\n# Google Analytics\\nfly secrets set GA4_PROPERTY_ID=\\\"...\\\" --app hot-dash-staging\\nfly secrets set GA4_SERVICE_ACCOUNT_KEY=\\\"$(cat vault/occ/google/analytics-service-account.json | base64)\\\" --app hot-dash-staging\\n```\\n\\n### Verify Secrets\\n\\n```bash\\n# List secrets (values are hidden)\\nfly secrets list --app hot-dash-staging\\n\\n# Expected output:\\n# NAME                        DIGEST\\n# SHOPIFY_API_KEY             abc123...\\n# SHOPIFY_API_SECRET          def456...\\n# SUPABASE_URL                ghi789...\\n# ...\\n```\\n\\n---\\n\\n## Production Deployment\\n\\n### Set Secrets in Fly.io\\n\\n```bash\\n# Use production credentials (NOT staging)\\nfly secrets set SHOPIFY_API_KEY=\\\"...\\\" --app hot-dash-production\\nfly secrets set SHOPIFY_API_SECRET=\\\"...\\\" --app hot-dash-production\\nfly secrets set SHOPIFY_STORE_URL=\\\"hotrodan.myshopify.com\\\" --app hot-dash-production\\n\\n# Supabase (production project)\\nfly secrets set SUPABASE_URL=\\\"...\\\" --app hot-dash-production\\nfly secrets set SUPABASE_ANON_KEY=\\\"...\\\" --app hot-dash-production\\nfly secrets set SUPABASE_SERVICE_KEY=\\\"...\\\" --app hot-dash-production\\n\\n# Chatwoot (production account)\\nfly secrets set CHATWOOT_API_TOKEN=\\\"...\\\" --app hot-dash-production\\nfly secrets set CHATWOOT_ACCOUNT_ID=\\\"...\\\" --app hot-dash-production\\nfly secrets set CHATWOOT_BASE_URL=\\\"https://app.chatwoot.com\\\" --app hot-dash-production\\n\\n# Publer (production workspace)\\nfly secrets set PUBLER_API_KEY=\\\"...\\\" --app hot-dash-production\\nfly secrets set PUBLER_WORKSPACE_ID=\\\"HotRodAN\\\" --app hot-dash-production\\n\\n# Google Analytics (production property)\\nfly secrets set GA4_PROPERTY_ID=\\\"...\\\" --app hot-dash-production\\nfly secrets set GA4_SERVICE_ACCOUNT_KEY=\\\"$(cat vault/occ/google/analytics-service-account-prod.json | base64)\\\" --app hot-dash-production\\n```\\n\\n---\\n\\n## Secret Rotation\\n\\n### When to Rotate\\n\\n- ✅ Every 90 days (scheduled)\\n- ✅ Immediately if exposed in code/logs\\n- ✅ Immediately if team member leaves\\n- ✅ If suspicious activity detected\\n\\n### Rotation Procedure\\n\\n1. **Generate new credential** in service (Shopify, Supabase, etc.)\\n2. **Update in vault/** for local development\\n3. **Update in Fly.io** for staging/production\\n4. **Test with new credential** in staging\\n5. **Deploy to production** if staging works\\n6. **Revoke old credential** in service\\n7. **Verify old credential no longer works**\\n8. **Document rotation** in this file\\n\\n### Rotation Log\\n\\n| Service  | Last Rotated | Next Rotation | Rotated By |\\n| -------- | ------------ | ------------- | ---------- |\\n| Shopify  | 2025-10-16   | 2026-01-14    | manager    |\\n| Supabase | 2025-10-16   | 2026-01-14    | manager    |\\n| Chatwoot | 2025-10-16   | 2026-01-14    | manager    |\\n| Publer   | 2025-10-16   | 2026-01-14    | manager    |\\n| GA4      | 2025-10-16   | 2026-01-14    | manager    |\\n\\n---\\n\\n## Security Best Practices\\n\\n### ✅ DO\\n\\n- Store secrets in `vault/` (gitignored)\\n- Use Fly.io secrets for deployment\\n- Rotate every 90 days\\n- Use minimal required permissions\\n- Document rotation in this file\\n- Test in staging before production\\n\\n### ❌ DON'T\\n\\n- Hardcode secrets in code\\n- Commit secrets to git\\n- Share secrets in chat/email\\n- Log secret values\\n- Use production secrets in staging\\n- Bypass secret rotation schedule\\n\\n---\\n\\n## Troubleshooting\\n\\n### Issue: \\\"Unable to authenticate with Shopify\\\"\\n\\n**Cause:** Invalid or expired API credentials\\n\\n**Fix:**\\n\\n1. Verify `SHOPIFY_API_KEY` and `SHOPIFY_API_SECRET` are set\\n2. Check credentials in Shopify Partner Dashboard\\n3. Rotate credentials if expired\\n4. Verify API scopes are correct\\n\\n### Issue: \\\"Supabase RPC call failed\\\"\\n\\n**Cause:** Invalid service key or project URL\\n\\n**Fix:**\\n\\n1. Verify `SUPABASE_URL` and `SUPABASE_SERVICE_KEY` are set\\n2. Check project settings in Supabase dashboard\\n3. Ensure service key has correct permissions\\n4. Rotate key if compromised\\n\\n### Issue: \\\"Chatwoot API rate limit exceeded\\\"\\n\\n**Cause:** Too many requests (> 10/sec)\\n\\n**Fix:**\\n\\n1. Implement rate limiting in code\\n2. Add caching to reduce API calls\\n3. Use webhooks instead of polling\\n\\n### Issue: \\\"Publer post failed\\\"\\n\\n**Cause:** Invalid API token or workspace\\n\\n**Fix:**\\n\\n1. Verify `PUBLER_API_KEY` is valid\\n2. Check `PUBLER_WORKSPACE_ID` matches workspace\\n3. Ensure workspace has connected social accounts\\n4. Verify API token has posting permissions\\n\\n---\\n\\n## Monitoring\\n\\n### Daily Checks\\n\\n- [ ] All secrets set in Fly.io (staging and production)\\n- [ ] No secrets in git history (Gitleaks clean)\\n- [ ] No secrets in logs\\n- [ ] Vault/ directory gitignored\\n\\n### Weekly Checks\\n\\n- [ ] Test all API connections\\n- [ ] Verify MCP tools operational\\n- [ ] Check for expiring credentials (< 30 days)\\n\\n### Monthly Checks\\n\\n- [ ] Review rotation schedule\\n- [ ] Audit secret usage\\n- [ ] Update rotation log\\n- [ ] Test secret rotation procedure\\n\\n---\\n\\n**Last Updated:** 2025-10-16  \\n**Maintained by:** integrations agent  \\n**Next Review:** 2025-11-16\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"wO6Glipc6rt+AgcRtwK8bCU8kZULXf3CP8pDv/GSrkI=\"}",
      "__type__": "DOCUMENT"
    },
    "docs/runbooks/support_webhooks.md": {
      "__data__": "{\"id_\":\"docs/runbooks/support_webhooks.md\",\"metadata\":{\"source\":\"docs/runbooks/support_webhooks.md\",\"lastModified\":\"2025-10-19T00:21:50.630Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"# Support Webhooks – Chatwoot Intake\\n\\nLast updated: 2025-10-18\\n\\n## Purpose\\n\\nDocument the evidence steps to verify Chatwoot → Agent SDK ingestion, retry policy, and observability before allowing customer-facing traffic.\\n\\n## Preconditions\\n\\n- `CHATWOOT_BASE_URL`, `CHATWOOT_API_TOKEN[_STAGING]`, `CHATWOOT_ACCOUNT_ID[_STAGING]`, and `CHATWOOT_WEBHOOK_SECRET` populated via `vault/occ/chatwoot/*.env` or environment.\\n- Agent SDK reachable (`AGENT_SDK_URL`, default `https://hotdash-agent-service.fly.dev`).\\n- Supabase + packages/memory connectivity confirmed (see `docs/runbooks/support_db_health.md`).\\n\\n## Health Check Procedure\\n\\n1. Export Chatwoot secrets (or ensure env files exist).\\n2. Run the script:\\n\\n   ```bash\\n   npm run ops:check-chatwoot-health\\n   ```\\n\\n   - Output file: `artifacts/integrations/<DATE>/chatwoot_health.jsonl`\\n   - Mirror to support evidence: `artifacts/support/<DATE>/ops/chatwoot-health.jsonl`\\n   - Success requires:\\n     - `/rails/health` (HTTP 2xx) **or** `/api` fallback 2xx\\n     - Authenticated probe `/api/v1/accounts/<ID>` returns 2xx/3xx\\n\\n3. Record the run in `feedback/support/<DATE>.md` with command + paths.\\n\\n## Retry Policy Verification\\n\\nHotdash webhook handler forwards payloads to Agent SDK using exponential backoff:\\n\\n- Attempts: 3 (configurable via `CHATWOOT_WEBHOOK_MAX_RETRIES`).\\n- Base delay: 500 ms (`CHATWOOT_WEBHOOK_RETRY_BASE_MS`).\\n- Applies full jitter and honors upstream `Retry-After` header when present.\\n- Non-OK responses after final attempt return HTTP 502 with `attempts` in payload.\\n- Structured logs emitted via `chatwootLogger` `service=hotdash-app:chatwoot`.\\n\\nTo run regression tests:\\n\\n```bash\\nnpx vitest run tests/integration/support.webhook.spec.ts\\n```\\n\\nAssertions cover success path, retry path, `Retry-After` respect, and failure exhaust.\\n\\n## Learning Signal Capture\\n\\n- Agent SDK stores draft outputs and approvals via `saveFeedbackSample` (packages/memory) when webhook succeeds.\\n- On Hotdash side, ensure `artifacts/support/<DATE>/ops/chatwoot-health*.jsonl` archived and linked in daily feedback.\\n- For CX grading loops, confirm Supabase `agent_sdk_approval_queue` entries (see `tests/integration/agent-sdk-webhook.spec.ts` once implemented) and AI logging via `logReplyGeneration` when downstream actions run.\\n\\n## Escalation\\n\\n- If retries exhaust (HTTP 502), open `reports/manager/ESCALATION.md` entry with timestamp, payload hash (redacted PII), and Agent SDK status.\\n- Coordinate with AI-Customer and AI-Knowledge agents to confirm grading pipeline is operational before resuming intake.\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"eXg0HT3e21jFhNsE0FRbd506v17/tUzt3VGj15MzCJM=\"}",
      "__type__": "DOCUMENT"
    },
    "649c2ff1-be0f-4011-837a-fbe2ea94cccb": {
      "__data__": "{\"id_\":\"649c2ff1-be0f-4011-837a-fbe2ea94cccb\",\"metadata\":{\"source\":\"docs/runbooks/agent_shutdown_checklist.md\",\"lastModified\":\"2025-10-18T07:27:16.189Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"docs/runbooks/agent_shutdown_checklist.md\",\"metadata\":{\"source\":\"docs/runbooks/agent_shutdown_checklist.md\",\"lastModified\":\"2025-10-18T07:27:16.189Z\"},\"hash\":\"AyWij9LlHiIHmKivmHPqcsUmwjoqJoHtawDMpej95JE=\"}},\"text\":\"# Agent Shutdown (Restart‑safe)\\n\\n> **Order of operations:** Agents shut down **first**, then the Manager runs their shutdown.  \\n> Goal: a **clean restart** where any agent can resume with zero hidden context.\\n>\\n> **No‑Wait Policy:** Do not wait for Manager acknowledgement. If told to shut down (or at end of day), execute this checklist immediately, capture evidence, and post the handoff note. Only pause if the Manager explicitly says “hold”.\\n\\n---\\n\\n## 0) Save State (≤ 1 min)\\n\\n- [ ] Do NOT commit/push. Manager will handle git operations.\\n- [ ] Ensure your feedback file contains the latest evidence and the completion block if applicable.\\n- [ ] Ensure PR body includes:\\n  - `Refs #<issue>` or `Fixes #<issue>` (when DoD is fully met)\\n  - A line: `Allowed paths: <pattern(s)>`\\n\\n---\\n\\n## 1) CI & Sandbox (≤ 1 min)\\n\\n- [ ] Diffs stay **within Allowed paths** (Danger will enforce on PR).\\n- [ ] No new `.md` outside allow-list (Docs Policy will fail otherwise).\\n- [ ] **Dev mode safety:** Do **not** send customer messages, take payments, or run production Shopify mutations.  \\n       If the UI needed sample “approvals,” ensure they are **fixtures** only:\\n      `provenance.mode=\\\"dev:test\\\"`, include `feedback_ref`, and **Apply disabled**.\\n\\n---\\n\\n## 2) Feedback — Final Entry for Today (2–4 min)\\n\\nOpen `feedback/<agent>/<YYYY‑MM‑DD>.md` and append this block:\\n\\n```md\\n### Shutdown — <HH:MM> (local time)\\n\\n**Status**\\n\\n- Task / Issue: #<id> — PR: #<id or draft> — Branch: agent/<agent>/<molecule>\\n- DoD completion: <percent or checklist state>\\n- What changed since last entry: <1–3 bullets>\\n\\n**Evidence**\\n\\n- Tests/logs/screens: <links or short notes>\\n- Tool calls (MCP/adapters) used: <list>\\n\\n**Blockers**\\n\\n- <concise description> → **owner**: <me/manager/other> — **ETA**: <date/time>\\n\\n**Next‑start plan (first 1–2 actions)**\\n\\n1. …\\n2. …\\n\\n**Self‑grade (1–5)**\\n\\n- Progress vs DoD: <1–5>\\n- Evidence quality: <1–5>\\n- Alignment (North Star / Rules / Allowed paths): <1–5>\\n- Tool discipline (MCP‑first, no freehand, no secrets): <1–5>\\n- Communication (feedback clarity & cadence): <1–5>\\n\\n**Retrospective**\\n\\n- 2–3 things I did well today:\\n  1. …\\n  2. …\\n- 1–2 things to do differently tomorrow:\\n  1. …\\n- **One thing I will stop entirely:** …\\n```\\n\\n> Keep it concise but specific. The Manager will rely on this to set tomorrow’s direction and unblock you immediately.\\n\\n---\\n\\n## 3) Handoff to Manager (≤ 1 min)\\n\\n- [ ] Verify your feedback file is up to date.\\n- [ ] Post a one-liner in the Issue comment:\\n      \\\"Shutdown complete — see latest feedback entry (includes WORK COMPLETE block if applicable).\\\"\\n- [ ] Manager will create/refresh PR and handle CI/review/merge.\\n\\n---\\n\\n## 4) Local Clean‑up (≤ 1 min)\\n\\n- [ ] Close terminals connected to secrets/tunnels; ensure `.env*` not staged.\\n- [ ] Stop any local services you started (db, tunnels, dev servers).\\n\\n---\\n\\n## 5) Signal Manager\\n\\n- [ ] Post a one‑liner in the **Issue comment**: “Shutdown complete — see latest feedback entry for status/next‑start plan.”\\n- [ ] @mention the Manager if a blocker needs immediate attention.\\n\\n---\\n\\n## Appendix — Quick Commands (optional)\\n\\n```bash\\n# Show changed files quickly\\ngit status -s\\n\\n# Push current branch\\ngit push -u origin HEAD\\n\\n# Create or mark draft PR via GitHub CLI (if you use it)\\ngh pr create --draft --fill || gh pr ready --undo  # toggle draft state\\n```\",\"textTemplate\":\"\",\"endCharIdx\":3338,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"3iBx4yXaZgAgk2RTnpzfm5ezcy4m9Xz69h0mIP7dZFI=\"}",
      "__type__": "TEXT"
    },
    "d4e7af0b-1c0c-4200-a428-e062de08c2b5": {
      "__data__": "{\"id_\":\"d4e7af0b-1c0c-4200-a428-e062de08c2b5\",\"metadata\":{\"source\":\"docs/runbooks/agent_startup_checklist.md\",\"lastModified\":\"2025-10-19T00:09:22.235Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"docs/runbooks/agent_startup_checklist.md\",\"metadata\":{\"source\":\"docs/runbooks/agent_startup_checklist.md\",\"lastModified\":\"2025-10-19T00:09:22.235Z\"},\"hash\":\"AHSkI8QfZVDR9AU2k+YLj7hPnrszowaeINn2f/JdH4Q=\"}},\"text\":\"# Agent Startup (Daily)\\n\\n## PATH\\n\\n- [ ] Navigate to repo root ~/HotDash/hot-dash/ or /home/justin/HotDash/hot-dash/\\n\\n## 0) Align to the Star (60 sec)\\n\\n- [ ] Skim `docs/NORTH_STAR.md`, `docs/OPERATING_MODEL.md`, and `docs/RULES.md`.\\n- [ ] If your direction conflicts with these, **pause** and post a short note in the Issue:\\n      “Direction misaligned with North Star/Operating Model — please confirm or revise.”\\n      (Agents are expected to hold the manager accountable for alignment.)\\n\\n## 1) Direction & Issue (60 sec)\\n\\n- [ ] Read `docs/directions/<agent>.md` — note **today’s objective** and **constraints**.\\n- [ ] Open your **Issue(s)**; copy the **DoD** and confirm **Allowed paths** (fnmatch).\\n- [ ] Start today’s header in `feedback/<agent>/<YYYY-MM-DD>.md` with your plan.\\n\\n## 2) Tools & Env (60–90 sec)\\n\\n- [ ] MCP tools resolve and respond (role-specific): Shopify Admin, Supabase, Chatwoot, etc. Shopify dev + storefront work requires MCP.\\n- [ ] GA4/GSC use internal adapters (no MCP). Use provided scripts/adapters and attach command + stderr to feedback.\\n- [ ] If a tool fails, paste the exact command + output in your feedback and **stop** until unblocked.\\n\\n## 3) Sandbox (30 sec)\\n\\n- [ ] Work only inside the Issue’s **Allowed paths** (Danger will fail out-of-scope diffs).\\n- [ ] Do NOT create branches; Manager controls all git operations.\\n\\n## 4) Feedback Discipline (throughout)\\n\\n- [ ] Append-only entries to `feedback/<agent>/<YYYY-MM-DD>.md`:\\n      commands + results, blockers (minimal repro), next intent.\\n- [ ] Do **not** create new `.md` beyond allow-list; don’t edit other agents’ files.\\n\\n## 5) Work Protocol\\n\\n- [ ] **MCP-first / server adapters only.** Shopify/Supabase/Fly/GitHub via MCP. GA4/GSC via internal adapters. No freehand HTTP or secrets in logs.\\n- [ ] Keep changes molecule-sized (≤ 2 days); commit early with Issue reference:\\n      `Refs #<issue>` → final slice uses `Fixes #<issue>`.\\n\\n## 6) Completion Protocol (when you finish a slice)\\n\\n- [ ] Do NOT open a PR yourself; Manager will.\\n- [ ] Append the completion block to `feedback/<agent>/<YYYY-MM-DD>.md`:\\n\\n  ```md\\n  ## WORK COMPLETE - READY FOR PR\\n\\n  Summary: <what you built>\\n  Files: <list>\\n  Tests: <summary>\\n  Evidence: <links/notes>\\n  ```\\n\\n- [ ] Ensure diffs stay within **Allowed paths**; include tests and evidence in your feedback.\\n\\n## 7) Build/Dev Mode Safety\\n\\n- [ ] **No** customer messaging, payments, or production Shopify mutations.\\n- [ ] If UI needs sample “approvals,” create **fixtures** only:\\n      `provenance.mode=\\\"dev:test\\\"`, include a `feedback_ref`, and keep **Apply disabled**.\\n- [ ] Autopublish toggles exist but are OFF. Do not enable; stage work behind flags.\\n\\n## 8) Escalation\\n\\n- [ ] If blocked > 10 minutes after tool attempts, log the blocker with exact error/output\\n      in your feedback file and @mention the manager in the **Issue** with a proposed next step.\",\"textTemplate\":\"\",\"endCharIdx\":2883,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"R79p0WECNY/+Gh8bjtN+Ncd/YkI5HL/yAeMzHTDc70E=\"}",
      "__type__": "TEXT"
    },
    "8b4a851c-b77e-4ec3-9b29-2a398f124dcc": {
      "__data__": "{\"id_\":\"8b4a851c-b77e-4ec3-9b29-2a398f124dcc\",\"metadata\":{\"source\":\"docs/runbooks/ai_agent_review_checklist.md\",\"lastModified\":\"2025-10-18T06:43:59.486Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"docs/runbooks/ai_agent_review_checklist.md\",\"metadata\":{\"source\":\"docs/runbooks/ai_agent_review_checklist.md\",\"lastModified\":\"2025-10-18T06:43:59.486Z\"},\"hash\":\"PrzCeQGCsRZbEFeN9tFnUJkID7HCIXn6CLk3pJ9MBpw=\"}},\"text\":\"# AI Agent Review Checklist (HITL)\\n\\n- Effective: 2025-10-18\\n- Scope: All customer-facing AI outputs, including approvals and public replies\\n\\n## Preconditions\\n\\n- [ ] Reviewer assigned in `app/agents/config/agents.json` (`ai-customer.human_review = true`)\\n- [ ] Evidence links present in PR and feedback entries\\n- [ ] Task → Issue → PR chain is explicit\\n\\n## Review Steps\\n\\n- [ ] Verify prompt, system instructions, and guardrails comply with `docs/RULES.md`\\n- [ ] Confirm no PII or secrets in prompts, logs, or artifacts\\n- [ ] Reproduce output locally with the exact inputs; attach transcripts\\n- [ ] Validate rollback/disable path (feature flag, revert plan)\\n- [ ] Check evaluation plan (manual or automated) and acceptance criteria\\n- [ ] Ensure customer-visible copy matches tone and product guidelines\\n\\n## Decision\\n\\n- [ ] Approve with links to evidence\\n- [ ] Request changes (list gaps + owner + ETA)\\n- [ ] Block (critical risk; add escalation)\\n\\n## Artifacts\\n\\n- Attach transcripts to `artifacts/ai-customer/<DATE>/review_*.jsonl` and hash them in a manifest\\n\\n## Escalation\\n\\n- If a credential or product decision is missing, pause that lane and file `reports/manager/ESCALATION.md`\",\"textTemplate\":\"\",\"endCharIdx\":1179,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"PczLI3azsvLPfh+eqpoEqGR6ZORetavxYGT4JPmBVxA=\"}",
      "__type__": "TEXT"
    },
    "b0c8f97f-581b-423a-bc07-e6fff9dc0aa2": {
      "__data__": "{\"id_\":\"b0c8f97f-581b-423a-bc07-e6fff9dc0aa2\",\"metadata\":{\"source\":\"docs/runbooks/data_staging_apply.md\",\"lastModified\":\"2025-10-19T01:16:01.498Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"docs/runbooks/data_staging_apply.md\",\"metadata\":{\"source\":\"docs/runbooks/data_staging_apply.md\",\"lastModified\":\"2025-10-19T01:16:01.498Z\"},\"hash\":\"eoQ7PRlONOXLQAlcElJg+NPO65pAQMK1XDqVkk+wjEk=\"},\"NEXT\":{\"nodeId\":\"8d0d6ab7-76c3-4282-80c5-8509a9d8c646\",\"metadata\":{},\"hash\":\"KCwIRjXqUH0naUoJIabHK4RX48KJwXyrV16vLtHWNmw=\"}},\"text\":\"# Data Staging Apply Runbook\\n\\n> Purpose: Rehearse Supabase migrations against staging using the IPv4 pooler, capture rollback evidence, and hand off a clean audit trail for manager sign-off.\\n\\n## Prerequisites\\n\\n- Repository checked out at `/home/justin/HotDash/hot-dash`.\\n- Vault access for Supabase staging secrets: `vault/occ/supabase/database_url_staging.env` and `vault/occ/supabase/service_key_staging.env`.\\n- Supabase CLI ≥ 2.48 installed (`supabase --version`).\\n- `psql` available in `PATH`.\\n- Feedback file for the day created at `feedback/data/<YYYY-MM-DD>.md`.\\n- `/tmp/data_plan.json` updated with the active molecule(s).\\n\\n## 0. Alignment & Logging\\n\\n1. Run through `docs/runbooks/agent_startup_checklist.md`.\\n2. Skim today’s direction at `docs/directions/data.md` for scope changes.\\n3. Start the daily header in `feedback/data/<YYYY-MM-DD>.md` with:\\n   - Objective\\n   - Planned commands\\n   - Artifact folder you will write to.\\n\\n## 1. Environment Setup\\n\\n```bash\\ncd /home/justin/HotDash/hot-dash\\nexport LOG_ROOT=\\\"artifacts/ops/$(date -u +%Y-%m-%d)\\\"\\nmkdir -p \\\"$LOG_ROOT\\\"\\nset -a\\nsource vault/occ/supabase/database_url_staging.env  # exports DATABASE_URL (IPv4 pooler, sslmode=require)\\nsource vault/occ/supabase/service_key_staging.env   # exports SUPABASE_SERVICE_KEY when needed\\nset +a\\n```\\n\\n- **Do not** mutate the DSN—staging connections must flow through the IPv4 session pooler; IPv6 hosts fail today.\\n- Capture the exact commands above in your feedback log.\\n- **MCP Credentials (browser-less workflow):** the Supabase CLI stores your OAuth session at `~/.supabase/access-token`. When MCP tooling or parity scripts need access, export it just-in-time without writing secrets to disk:\\n\\n  ```bash\\n  export SUPABASE_ACCESS_TOKEN=\\\"$(cat ~/.supabase/access-token)\\\"\\n  export SUPABASE_SERVICE_KEY=\\\"$(SUPABASE_ACCESS_TOKEN=\\\"$SUPABASE_ACCESS_TOKEN\\\" \\\\\\n    supabase projects api-keys get mmbjiyhsvniqxibzgyvx --output json \\\\\\n    | jq -r '.[] | select(.name==\\\"service_role\\\").api_key')\\\"\\n  ```\\n\\n  - Never commit these values; they are rotated per the Supabase dashboard.\\n  - Use the inline `curl`/MCP calls immediately, then `unset` both variables once evidence has been captured.\\n\\n## 2. Connectivity Check (Evidence Required)\\n\\n```bash\\npsql \\\"$DATABASE_URL\\\" -c \\\"select current_database(), inet_server_addr(), now();\\\" \\\\\\n  | tee \\\"$LOG_ROOT/ipv4_pooler_check_$(date -u +%H%M%S).log\\\"\\n```\\n\\nConfirm the server address resolves to the IPv4 pooler and attach the log path in your feedback.\\n\\n## 3. Inventory Pending Migrations\\n\\n```bash\\nsupabase migration list --db-url \\\"$DATABASE_URL\\\" \\\\\\n  | tee \\\"$LOG_ROOT/migration_status_pre_$(date -u +%H%M%S).txt\\\"\\n```\\n\\n- Identify the migrations you expect to touch (inventory bundle, knowledge base tables, analytics/dashboard RPCs).\\n- Note missing rollback scripts or prior partial applies; stage fixes before proceeding.\\n\\n## 4. Non-Destructive Apply Rehearsal\\n\\n1. Create a timestamped rehearsal directory:\\n\\n   ```bash\\n   export REHEARSAL_DIR=\\\"$LOG_ROOT/rehearsal_$(date -u +%Y%m%dT%H%M%SZ)\\\"\\n   mkdir -p \\\"$REHEARSAL_DIR\\\"\\n   ```\\n\\n2. Apply each migration file individually with `ON_ERROR_STOP` so failures surface quickly. Example pattern:\\n\\n   ```bash\\n   for file in supabase/migrations/2025101109*.sql \\\\\\n               supabase/migrations/2025101114*.sql \\\\\\n               supabase/migrations/20251015*.sql \\\\\\n               supabase/migrations/20251019004500_programmatic_seo_blueprints.sql; do\\n     echo \\\"==> $file\\\" | tee -a \\\"$REHEARSAL_DIR/migration_apply.log\\\"\\n     psql \\\"$DATABASE_URL\\\" -v ON_ERROR_STOP=1 -f \\\"$file\\\" \\\\\\n       >> \\\"$REHEARSAL_DIR/migration_apply.log\\\" 2>&1 || {\\n       echo \\\"!!\",\"textTemplate\":\"\",\"endCharIdx\":3614,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"WcpG/j4eQDVQeK4skvuAXvsqcVxnAaL+eJccb2QeVjI=\"}",
      "__type__": "TEXT"
    },
    "8d0d6ab7-76c3-4282-80c5-8509a9d8c646": {
      "__data__": "{\"id_\":\"8d0d6ab7-76c3-4282-80c5-8509a9d8c646\",\"metadata\":{\"source\":\"docs/runbooks/data_staging_apply.md\",\"lastModified\":\"2025-10-19T01:16:01.498Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"docs/runbooks/data_staging_apply.md\",\"metadata\":{\"source\":\"docs/runbooks/data_staging_apply.md\",\"lastModified\":\"2025-10-19T01:16:01.498Z\"},\"hash\":\"eoQ7PRlONOXLQAlcElJg+NPO65pAQMK1XDqVkk+wjEk=\"},\"PREVIOUS\":{\"nodeId\":\"b0c8f97f-581b-423a-bc07-e6fff9dc0aa2\",\"metadata\":{\"source\":\"docs/runbooks/data_staging_apply.md\",\"lastModified\":\"2025-10-19T01:16:01.498Z\"},\"hash\":\"ZvvlxzzVdEdsu792f5L06E9wLgZNbxPguIrxHfF3RIE=\"},\"NEXT\":{\"nodeId\":\"409a4703-b0c2-40a5-af2d-2015297cbd61\",\"metadata\":{},\"hash\":\"RVYWHygHrj/hMYzUSrlcsq5d0m9zkAjn0Dv6Pictbrc=\"}},\"text\":\"Apply each migration file individually with `ON_ERROR_STOP` so failures surface quickly. Example pattern:\\n\\n   ```bash\\n   for file in supabase/migrations/2025101109*.sql \\\\\\n               supabase/migrations/2025101114*.sql \\\\\\n               supabase/migrations/20251015*.sql \\\\\\n               supabase/migrations/20251019004500_programmatic_seo_blueprints.sql; do\\n     echo \\\"==> $file\\\" | tee -a \\\"$REHEARSAL_DIR/migration_apply.log\\\"\\n     psql \\\"$DATABASE_URL\\\" -v ON_ERROR_STOP=1 -f \\\"$file\\\" \\\\\\n       >> \\\"$REHEARSAL_DIR/migration_apply.log\\\" 2>&1 || {\\n       echo \\\"!! failure: $file\\\" | tee -a \\\"$REHEARSAL_DIR/migration_apply.log\\\"\\n     }\\n     echo >> \\\"$REHEARSAL_DIR/migration_apply.log\\\"\\n   done\\n   ```\\n\\n3. If a statement fails:\\n   - Record the error (line number, object) in feedback.\\n   - Attempt **up to three** fixes/replays per molecule, logging each attempt (`mcp_attempt#.jsonl`).\\n   - Update `/tmp/data_plan.json` with the new status and evidence paths.\\n\\n## 5. Rollback Rehearsal\\n\\n1. Locate companion rollback SQL in `supabase/migrations.backup/`.\\n2. For every migration you executed, run the rollback script in isolation:\\n\\n   ```bash\\n   for file in supabase/migrations.backup/*rollback*.sql; do\\n     echo \\\"==> rollback $file\\\" | tee -a \\\"$REHEARSAL_DIR/migration_rollback.log\\\"\\n     psql \\\"$DATABASE_URL\\\" -v ON_ERROR_STOP=1 -f \\\"$file\\\" \\\\\\n       >> \\\"$REHEARSAL_DIR/migration_rollback.log\\\" 2>&1 || {\\n       echo \\\"!! rollback failure: $file\\\" | tee -a \\\"$REHEARSAL_DIR/migration_rollback.log\\\"\\n     }\\n     echo >> \\\"$REHEARSAL_DIR/migration_rollback.log\\\"\\n   done\\n   ```\\n\\n3. Capture any missing rollback coverage and open a follow-up task if scripts are absent.\\n\\n## 6. RLS Contract Verification\\n\\nRun the canonical RLS contract tests against staging (after re-applying forward migrations if you rolled them back):\\n\\n```bash\\npsql \\\"$DATABASE_URL\\\" -f supabase/rls_tests.sql \\\\\\n  | tee \\\"$REHEARSAL_DIR/rls_contract.log\\\"\\n```\\n\\n- All tests must pass. Log any failure with the schema/table affected. The script now asserts RLS/policy coverage for the Programmatic SEO tables (`programmatic_seo_blueprints`, `programmatic_seo_generation_runs`, `programmatic_seo_internal_links`) in addition to inventory + approvals datasets.\\n- If the contract file is missing, halt and escalate to the manager.\\n\\n## 7. Post-Run Cleanup\\n\\n1. Re-run `supabase migration list --db-url \\\"$DATABASE_URL\\\"` and save to `\\\"$REHEARSAL_DIR/migration_status_post.txt\\\"`.\\n2. Move any intermediate `psql` transcripts into the rehearsal directory for a single artifact bundle.\\n3. Update `/tmp/data_plan.json` with:\\n   - `status` for each molecule (`completed`, `blocked`, etc.).\\n   - `evidence` arrays referencing the new log paths.\\n4. Append results to `artifacts/data/<date>/mcp_attempt#.jsonl` if you used MCP server calls.\\n\\n## 8. Feedback & Hand-off\\n\\nIn `feedback/data/<YYYY-MM-DD>.md` document:\\n\\n- Summary of apply + rollback outcomes.\\n- Links to key logs (connectivity check, apply log, rollback log, RLS contract).\\n- Any blockers (missing tables, duplicate indexes, absent rollback scripts).\\n- Next actions or escalations (e.g., coordination with DevOps for production window).\\n\\nFinally, notify the manager per `docs/directions/data.md` if production scheduling or additional approvals are required.\\n\\n## 9. Troubleshooting\\n\\n- **IPv6 errors:** Ensure you sourced the pooler DSN from vault; the host should end with `.pooler.supabase.co`.\\n- **Duplicate object errors:** Amend migrations to use `IF NOT EXISTS` / `DROP ... IF EXISTS` guards before the next rehearsal.\\n- **Missing tables or columns:** Verify prior migrations applied in staging; fetch history with `supabase migration fetch`.\\n- **Permission denied:** Confirm `service_key_staging.env` was sourced; some admin checks require `SUPABASE_SERVICE_KEY`.\",\"textTemplate\":\"\",\"startCharIdx\":3055,\"endCharIdx\":6812,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"9ymbNb5f9WjNzh4ecpgyt+p5SmrdJMPjy6bqYd/E+CU=\"}",
      "__type__": "TEXT"
    },
    "409a4703-b0c2-40a5-af2d-2015297cbd61": {
      "__data__": "{\"id_\":\"409a4703-b0c2-40a5-af2d-2015297cbd61\",\"metadata\":{\"source\":\"docs/runbooks/data_staging_apply.md\",\"lastModified\":\"2025-10-19T01:16:01.498Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"docs/runbooks/data_staging_apply.md\",\"metadata\":{\"source\":\"docs/runbooks/data_staging_apply.md\",\"lastModified\":\"2025-10-19T01:16:01.498Z\"},\"hash\":\"eoQ7PRlONOXLQAlcElJg+NPO65pAQMK1XDqVkk+wjEk=\"},\"PREVIOUS\":{\"nodeId\":\"8d0d6ab7-76c3-4282-80c5-8509a9d8c646\",\"metadata\":{\"source\":\"docs/runbooks/data_staging_apply.md\",\"lastModified\":\"2025-10-19T01:16:01.498Z\"},\"hash\":\"KCwIRjXqUH0naUoJIabHK4RX48KJwXyrV16vLtHWNmw=\"}},\"text\":\"- Any blockers (missing tables, duplicate indexes, absent rollback scripts).\\n- Next actions or escalations (e.g., coordination with DevOps for production window).\\n\\nFinally, notify the manager per `docs/directions/data.md` if production scheduling or additional approvals are required.\\n\\n## 9. Troubleshooting\\n\\n- **IPv6 errors:** Ensure you sourced the pooler DSN from vault; the host should end with `.pooler.supabase.co`.\\n- **Duplicate object errors:** Amend migrations to use `IF NOT EXISTS` / `DROP ... IF EXISTS` guards before the next rehearsal.\\n- **Missing tables or columns:** Verify prior migrations applied in staging; fetch history with `supabase migration fetch`.\\n- **Permission denied:** Confirm `service_key_staging.env` was sourced; some admin checks require `SUPABASE_SERVICE_KEY`.\\n- **Long-running statements:** Use `psql --set=lock_timeout='5s'` for rehearsal if locks persist; document any contention in feedback.\\n\\n## Version History\\n\\n- 2025-10-18: Recreated runbook with IPv4 pooler workflow, apply/rollback evidence requirements, and RLS contract validation.\",\"textTemplate\":\"\",\"startCharIdx\":6017,\"endCharIdx\":7094,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"NJCcDQQ3Fztwg3OeEslSwmWbLp0pjQPcTcC+UxrPaTg=\"}",
      "__type__": "TEXT"
    },
    "d4ea0323-5088-4eb2-a19f-95026f126554": {
      "__data__": "{\"id_\":\"d4ea0323-5088-4eb2-a19f-95026f126554\",\"metadata\":{\"source\":\"docs/runbooks/drift_checklist.md\",\"lastModified\":\"2025-10-17T18:47:30.093Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"docs/runbooks/drift_checklist.md\",\"metadata\":{\"source\":\"docs/runbooks/drift_checklist.md\",\"lastModified\":\"2025-10-17T18:47:30.093Z\"},\"hash\":\"tajdVwnl4GNAyUSLzScTighDhCWn6l0w/xOUmkxutQI=\"}},\"text\":\"# Drift Checklist (Daily at Shutdown) — Manager Only\\n\\n> **Who runs this:** Manager.  \\n> **When:** After **all agents** have completed their shutdown, and **before** you finalize Manager Shutdown.  \\n> **Goal:** no policy drift, no stray docs, no secret leaks, and a repo that restarts clean.\\n\\n---\\n\\n## 1) Secrets & Hygiene\\n\\n- [ ] **HEAD scan** (fast):\\n  ```bash\\n  gitleaks detect --source . --redact\\n  ```\\n- [ ] **History scan (Fri only)** or when you suspect a leak:\\n  ```bash\\n  gitleaks git -v --redact --report-format sarif --report-path .reports/gitleaks-history.sarif --log-opts=\\\"--all\\\" .\\n  ```\\n- [ ] Confirm **Push Protection** & **Secret Scanning** are enabled (Settings → Code security & analysis).\\n- [ ] Ensure `.env*` files are ignored and **not staged**.\\n\\n---\\n\\n## 2) Docs Governance (no sprawl)\\n\\n- [ ] Policy check (allow-list):\\n\\n  ```bash\\n  node scripts/policy/check-docs.mjs\\n  ```\\n\\n  Expect **0 violations**. Fix or quarantine via archive sweep (below).\\n\\n- [ ] **Planning TTL** (sweep anything > 2 days):\\n\\n  ```bash\\n  node scripts/ops/archive-docs.mjs\\n  git commit -am \\\"chore: planning TTL sweep\\\" && git push\\n  ```\\n\\n- [ ] **Stale docs clean-up**\\n  - [ ] Archive/remove any completed items from `docs/directions/<agent>.md` (leave “done” + PR link)\\n  - [ ] Move any one-off scratch notes into `feedback/<agent>/<YYYY-MM-DD>.md` or delete\\n\\n---\\n\\n## 3) CI & Required Checks\\n\\n- [ ] On `main`, the following are **required and passing**:\\n  - **Docs Policy**\\n  - **Danger**\\n  - **Gitleaks (Secrets Scan)**\\n  - **Validate AI Agent Config**\\n\\n- [ ] Sample PR sanity (create/choose one active PR):\\n  - [ ] **Docs Policy** passes (no rogue `.md`)\\n  - [ ] **Danger** passes (Issue linkage + Allowed paths present; tests if code changed)\\n  - [ ] **Gitleaks** passes\\n  - [ ] Diffs stay **within Allowed paths**\\n\\n---\\n\\n## 4) Sandboxes & Protections\\n\\n- [ ] **Branch protection** on `main` still enforces required checks.\\n- [ ] **CODEOWNERS** still guards `docs/**` and `feedback/**` (manager review).\\n- [ ] (Optional) Close **stale branches** (> 14 days no commits) unless actively used.\\n\\n---\\n\\n## 5) Directions & Feedback Consistency\\n\\n- [ ] For each active agent:\\n  - [ ] Today’s `feedback/<agent>/<YYYY-MM-DD>.md` ends with **status → next intent**\\n  - [ ] `docs/directions/<agent>.md` reflects **tomorrow’s objective** + constraints + Issue/PR links\\n  - [ ] Blockers have **owner + ETA** posted in the **Issue** (not only in feedback)\\n\\n---\\n\\n## 6) North Star & Plan\\n\\n- [ ] If scope changed today, update **NORTH_STAR** metrics and **PROJECT_PLAN** gates\\n- [ ] If not, confirm we’re still aligned: **no side projects, no extra docs**\\n\\n---\\n\\n## 7) Optional Deep Checks (weekly or after large changes)\\n\\n- [ ] Re-run history scan (see 1) and review SARIF in the Security tab\\n- [ ] Sample end-to-end flow: open a test PR → validate checks → ensure Danger rules catch missing artifacts\\n- [ ] Review **rulesets** (if used) to ensure path restrictions haven’t been loosened\\n\\n---\\n\\n## 8) Final State for Restart\\n\\n- [ ] Open Issues contain **DoD + Allowed paths + owner**\\n- [ ] Draft PRs exist for mid-slice work; bodies include **Fixes/Refs** and **Allowed paths**\\n- [ ] No dirty working tree: `git status` clean\\n- [ ] Post a one-liner in `feedback/manager/<YYYY-MM-DD>.md`: open PRs/Issues, top blockers, first action on restart\",\"textTemplate\":\"\",\"endCharIdx\":3312,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"6FmbhgzyfMTj+VHD85vSepBPt8eXtp2w9MU8YJ8/5Tw=\"}",
      "__type__": "TEXT"
    },
    "1abe4105-d906-4ae9-ad7f-74c2024505c7": {
      "__data__": "{\"id_\":\"1abe4105-d906-4ae9-ad7f-74c2024505c7\",\"metadata\":{\"source\":\"docs/runbooks/manager_emergency_startup.md\",\"lastModified\":\"2025-10-17T18:47:30.093Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"docs/runbooks/manager_emergency_startup.md\",\"metadata\":{\"source\":\"docs/runbooks/manager_emergency_startup.md\",\"lastModified\":\"2025-10-17T18:47:30.093Z\"},\"hash\":\"+BYSyOLZ3pnmhezNGtgwDJW/vPyn0hf/+gSyVpn0NkU=\"},\"NEXT\":{\"nodeId\":\"7177363e-8c44-4cdb-81c0-6374b9adcd79\",\"metadata\":{},\"hash\":\"ZY3qs3qzsGWfuAE60sPKE4QAiMH7kbfOhNScTIgk3iM=\"}},\"text\":\"# Manager Emergency Startup (Crash Recovery)\\n\\n> **When to use:** The machine crashed, agents didn’t finish shutdown, context may be missing.  \\n> **Goal:** Reconstruct current state safely and relaunch work with zero guesswork.\\n\\n---\\n\\n## PATH\\n\\n- [ ] Navigate to repo root ~/HotDash/hot-dash/ or /home/justin/HotDash/hot-dash/\\n\\n## 0) Safety First (no writes yet)\\n\\n- [ ] Disconnect tunnels/VPNs that may auto-run commands on resume.\\n- [ ] Do **not** force-push or delete anything. We will read & snapshot first.\\n\\n---\\n\\n## 1) Snapshot & Health (read-only where possible)\\n\\n### 1.1 Git status snapshot\\n\\n```bash\\ngit rev-parse --abbrev-ref HEAD\\ngit status -s\\ngit log --oneline -n 5\\ngit branch --list \\\"agent/*\\\"\\n```\\n\\n### 1.2 Find WIP/dangling work (reflog + stash)\\n\\n```bash\\ngit reflog -n 20\\ngit stash list\\n```\\n\\n- If you see `WIP` or local commits not on origin: note the SHAs. **Do not reset yet.**\\n\\n### 1.3 Confirm origin/remote\\n\\n```bash\\ngit remote -v\\ngit fetch --all --prune\\n```\\n\\n### 1.4 CI/Guardrails (read-only checks)\\n\\n- GitHub: `main` required checks still enforced (Docs Policy, Danger, Gitleaks, AI Config).\\n- Settings → Code security & analysis: Push Protection & Secret Scanning are **ON**.\\n\\n---\\n\\n## 2) Secret & Policy Sanity (fast scans)\\n\\n> Safe to run locally; does not modify state.\\n\\n```bash\\n# HEAD secrets scan\\ngitleaks detect --source . --redact\\n\\n# Docs allow-list (violations indicate untracked/dirty MD drift)\\nnode scripts/policy/check-docs.mjs || true\\n```\\n\\n- If either flags a problem, note it for **Step 6** (triage). Do not fix yet; finish state recovery first.\\n\\n---\\n\\n## 3) Recover Agent Work-In-Progress\\n\\n### 3.1 Ensure every agent has a branch\\n\\n```bash\\ngit branch --list \\\"agent/*\\\" | sed 's/* //'\\n```\\n\\n- If an agent was active and has **no** branch:\\n  - Check reflog for their local WIP commit; create a temp branch:\\n    ```bash\\n    git checkout -b recover/<agent>/<date>-<time> <SHA_FROM_REFLOG>\\n    ```\\n\\n### 3.2 Draft PRs for mid-slice work\\n\\nFor each branch without a PR, create a **Draft PR** (optional via GitHub CLI):\\n\\n```bash\\n# from branch agent/<agent>/<molecule>\\ngh pr create --draft --fill || true\\n```\\n\\n- In the PR body, add (or verify):\\n  - `Refs #<issue>` (or `Fixes #<issue>` if complete)\\n  - `Allowed paths: <pattern(s)>`\\n  - Brief **Design sketch** if new code paths\\n  - Links to tests/logs/screens if they exist\\n\\n> Draft PRs preserve state so agents can resume on any machine.\\n\\n---\\n\\n## 4) Rebuild Context from Logs & Files\\n\\n### 4.1 Feedback logs\\n\\n```bash\\nls -1 feedback/*/$(date +%F).md 2>/dev/null || true\\n```\\n\\n- If today’s logs are missing for an agent, check **yesterday’s** file and the last PR comments.\\n- If the terminal/history holds context:\\n  - Copy relevant, **non-secret** command lines & outcomes into today’s feedback log with a new “Recovery Note” section.\\n\\n### 4.2 Directions\\n\\n- Open `docs/directions/<agent>.md` and ensure it points at the current **Issue** and **PR**.\\n- If direction is out of date, add a short “Recovery Objective” for the next 2–4 hours.\\n\\n### 4.3 Issues\\n\\n- For each active Issue, add a manager comment:\\n  - “Crash recovery: branch = …, PR = …, next step = …, blocker owner/ETA = …”\\n\\n---\\n\\n## 5) Tool & Env Smoke (read-only or safe checks)\\n\\n```bash\\n# Shopify CLI present\\nshopify version\\n\\n# Supabase CLI present\\nsupabase --version\\n\\n# Quick MCP/adapter pings as read-only (or via health endpoints if you have them)\\n# e.g.\",\"textTemplate\":\"\",\"endCharIdx\":3377,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"TDob5ymS7DafmW5+rxQxjB8nhTiKMOv28M6udSTO2AM=\"}",
      "__type__": "TEXT"
    },
    "7177363e-8c44-4cdb-81c0-6374b9adcd79": {
      "__data__": "{\"id_\":\"7177363e-8c44-4cdb-81c0-6374b9adcd79\",\"metadata\":{\"source\":\"docs/runbooks/manager_emergency_startup.md\",\"lastModified\":\"2025-10-17T18:47:30.093Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"docs/runbooks/manager_emergency_startup.md\",\"metadata\":{\"source\":\"docs/runbooks/manager_emergency_startup.md\",\"lastModified\":\"2025-10-17T18:47:30.093Z\"},\"hash\":\"+BYSyOLZ3pnmhezNGtgwDJW/vPyn0hf/+gSyVpn0NkU=\"},\"PREVIOUS\":{\"nodeId\":\"1abe4105-d906-4ae9-ad7f-74c2024505c7\",\"metadata\":{\"source\":\"docs/runbooks/manager_emergency_startup.md\",\"lastModified\":\"2025-10-17T18:47:30.093Z\"},\"hash\":\"UbSu6F6KdIYQGIG3rlDgg4cOC3hvBg3TRZX65r59bR8=\"}},\"text\":\"### 4.2 Directions\\n\\n- Open `docs/directions/<agent>.md` and ensure it points at the current **Issue** and **PR**.\\n- If direction is out of date, add a short “Recovery Objective” for the next 2–4 hours.\\n\\n### 4.3 Issues\\n\\n- For each active Issue, add a manager comment:\\n  - “Crash recovery: branch = …, PR = …, next step = …, blocker owner/ETA = …”\\n\\n---\\n\\n## 5) Tool & Env Smoke (read-only or safe checks)\\n\\n```bash\\n# Shopify CLI present\\nshopify version\\n\\n# Supabase CLI present\\nsupabase --version\\n\\n# Quick MCP/adapter pings as read-only (or via health endpoints if you have them)\\n# e.g., curl -sSf http://localhost:<your-app-port>/health || true\\n```\\n\\n- If a tool is unavailable, note it in the Issue as a **blocker** with owner/ETA.\\n\\n---\\n\\n## 6) Triage & Fix (only now make small, safe changes)\\n\\n### 6.1 Secrets\\n\\n- If `gitleaks` flagged a leak:\\n  - Rotate the secret(s) and **do not** commit secrets in any form.\\n  - If necessary, schedule history cleanup with `git filter-repo` on a separate branch per the incident playbook.\\n\\n### 6.2 Docs policy violations\\n\\n- Run the planning TTL sweep (moves stray/old planning docs and reindexes):\\n  ```bash\\n  node scripts/ops/archive-docs.mjs\\n  git commit -am \\\"chore: planning TTL sweep\\\" && git push\\n  ```\\n\\n### 6.3 Stabilize PRs\\n\\n- Ensure PRs include Issue linkage and **Allowed paths**; keep as **Draft** until agents verify tests.\\n\\n---\\n\\n## 7) Relaunch Plan (make it explicit)\\n\\n- Create/resize Tasks (≤ 2-day molecules) for any recovered branches; set **DoD** + **Allowed paths**.\\n- Update `docs/directions/<agent>.md` with “Recovery Objective” + constraints + Issue/PR links.\\n- Post a one‑liner in `feedback/manager/$(date +%F).md`:\\n  - Open PRs/Issues recovered, top blockers & owners, **first step on restart** for each agent.\\n\\n---\\n\\n## 8) Optional: Fresh Clone Sanity (if local repo seems corrupted)\\n\\n```bash\\ncd ~ && mkdir -p CrashRecovery && cd CrashRecovery\\ngit clone git@github.com:<owner>/<repo>.git fresh\\ncd fresh && git fetch --all --prune\\n# Compare branches\\ngit branch -r | grep agent/\\n```\\n\\n- If diffs are confusing locally, continue work from `fresh/` on the recovered draft PR branches.\\n\\n---\\n\\n## 9) Greenlight\\n\\n- `main` checks green; Push Protection **ON**.\\n- Draft PRs exist for mid-slice work with Issue linkage + Allowed paths.\\n- Directions updated; Issues have a restart comment.\\n- Manager posts **Crash Recovery Summary** in today’s feedback.\\n\\n## 10) Proceed with work\\n\\n> You can now proceed with the normal **Manager Startup**.\\n\\n- Execute `docs/runbooks/manager_startup_checklist.md`\",\"textTemplate\":\"\",\"startCharIdx\":2796,\"endCharIdx\":5331,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"66Cao7U19nm1ZT2ZuPSpahixl8RNPDYegSzEfoJTXm4=\"}",
      "__type__": "TEXT"
    },
    "6c377b0d-ff6a-47c4-8bdd-f5f1662ba139": {
      "__data__": "{\"id_\":\"6c377b0d-ff6a-47c4-8bdd-f5f1662ba139\",\"metadata\":{\"source\":\"docs/runbooks/manager_shutdown_checklist.md\",\"lastModified\":\"2025-10-18T06:11:12.551Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"docs/runbooks/manager_shutdown_checklist.md\",\"metadata\":{\"source\":\"docs/runbooks/manager_shutdown_checklist.md\",\"lastModified\":\"2025-10-18T06:11:12.551Z\"},\"hash\":\"SqCEQ8m+jfglIqF1f8qJVRQolXAp7jkMthMPH9AtvGU=\"},\"NEXT\":{\"nodeId\":\"6c22afeb-47ff-4430-a3f8-638924eab179\",\"metadata\":{},\"hash\":\"Q7lin1++lSpFsYXxsoOhy8ayORgV1Zn5ssYdyCvweY4=\"}},\"text\":\"# Manager Shutdown (Restart‑safe, Complete)\\n\\n> Use this any time you step away or reboot. Goal: a **clean restart** where agents can resume with zero hidden context.\\n\\n---\\n\\n## 1) Normalize PRs & Issues\\n\\n- [ ] Every active **PR** links an **Issue** (`Fixes #<issue>`) **and** includes a line:\\n      `Allowed paths: <pattern(s)>` in the PR body.\\n- [ ] If work is mid‑slice, convert to **Draft PR** (preserve state; avoid local-only context).\\n- [ ] Add a short **Issue comment** (per task) with:\\n  - Current status (1 line)\\n  - **Next concrete step**\\n  - **Blockers** with **owner + ETA**\\n  - Links to any relevant logs/evidence (screenshots, test output)\\n\\n## 2a) Manager-Controlled Git \\u0014 Close Out\\n\\n- [ ] Run: `node scripts/policy/check-feedback.mjs --date 2025-10-15`\\n- [ ] For any agent with WORK COMPLETE but no PR yet, create branch/PR now\\n- [ ] For open PRs, ensure evidence links to the feedback file\\n- [ ] After merge, update directions to next task\\n\\n---\\n\\n## 2) CI & Guardrails (must be green)\\n\\n- [ ] `main` status checks **green**: _Docs Policy, Danger, Gitleaks, Validate AI Agent Config_.\\n- [ ] **Push Protection & Secret Scanning** enabled (Settings → Code security & analysis).\\n- [ ] Local pre‑shutdown checks (paste and run):\\n  ```bash\\n  node scripts/policy/check-docs.mjs\\n  node scripts/policy/check-ai-config.mjs\\n  gitleaks detect --source . --redact\\n  ```\\n  _If any fail: stop, fix, commit, and re‑run until green._\\n\\n---\\n\\n## 3) Gates Sanity (per active task)\\n\\nFor each **Issue (label: task)** and linked PR:\\n\\n- [ ] **Scope Gate** — Problem + Acceptance Criteria present in the **Issue**.\\n- [ ] **Sandbox** — **Allowed paths** present in **Issue** & **PR**; diffs stay within them.\\n- [ ] **Design Gate** — PR describes interfaces, data flow, and failure modes (for new paths).\\n- [ ] **Evidence Gate (dev)** — tests/logs/screens satisfy the **DoD**.\\n- [ ] **Ship Gate (if merging)** — rollback noted; changelog if user‑visible.\\n\\n_Missing any artifact? Comment on the PR with the gap and reassign._\\n\\n---\\n\\n## 4) Direction & Feedback Closure\\n\\nFor each **active agent**:\\n\\n- [ ] Read today’s `feedback/<agent>/<YYYY‑MM‑DD>.md` → extract answers, blockers, decisions.\\n- [ ] Update `docs/directions/<agent>.md` with **tomorrow’s objective**, **constraints**, and links\\n      to the **Issue** (and PR if open).\\n- [ ] **Archive/remove** completed items and feedback that has been actioned from directions and feedback files\\n- [ ] Ensure the last entry in the agent’s feedback states: **status → next intent**.\\n\\n_Notes:_ Dev agents write only to their feedback log and code under Allowed paths.\\nDo **not** create or edit other docs.\\n\\n---\\n\\n## 5) Planning TTL & Drift Sweep\\n\\n- [ ] If any `docs/planning/*` is older than **2 days**, sweep and commit:\\n  ```bash\\n  node scripts/ops/archive-docs.mjs\\n  git commit -am \\\"chore: planning TTL sweep\\\" && git push\\n  ```\\n- [ ] Glance for any stray `.md` or cross‑agent edits in today’s PRs (reject/clean if found).\\n\\n---\\n\\n## 6) Security & Hygiene\\n\\n- [ ] No secrets in local logs/console paste. Close terminals with creds; stop tunnels.\\n- [ ] Ensure `.env*` are **not staged**; `.gitignore` covers them.\\n- [ ] Inventory any newly rotated secrets in the private Security note (if applicable).\\n\\n---\\n\\n## 7) CEO Summary (paste in `feedback/manager/<YYYY‑MM‑DD>.md`)\\n\\n**Today’s Outcomes**\\n\\n- Shipped/merged: PRs #…, #…\\n- In progress: PRs #… (DoD % complete), Issues #…\\n- Incidents: secrets (Y/N), CI failures (count), rogue docs (count)\\n\\n**Next Goal (tomorrow)**\\n\\n- Primary objective: …\\n- Success criteria (from North Star): …\",\"textTemplate\":\"\",\"endCharIdx\":3556,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"V/OXD4En1bQ9EjUNPUEWa8LEwl/E29MaOzIAAx+CMUk=\"}",
      "__type__": "TEXT"
    },
    "6c22afeb-47ff-4430-a3f8-638924eab179": {
      "__data__": "{\"id_\":\"6c22afeb-47ff-4430-a3f8-638924eab179\",\"metadata\":{\"source\":\"docs/runbooks/manager_shutdown_checklist.md\",\"lastModified\":\"2025-10-18T06:11:12.551Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"docs/runbooks/manager_shutdown_checklist.md\",\"metadata\":{\"source\":\"docs/runbooks/manager_shutdown_checklist.md\",\"lastModified\":\"2025-10-18T06:11:12.551Z\"},\"hash\":\"SqCEQ8m+jfglIqF1f8qJVRQolXAp7jkMthMPH9AtvGU=\"},\"PREVIOUS\":{\"nodeId\":\"6c377b0d-ff6a-47c4-8bdd-f5f1662ba139\",\"metadata\":{\"source\":\"docs/runbooks/manager_shutdown_checklist.md\",\"lastModified\":\"2025-10-18T06:11:12.551Z\"},\"hash\":\"R/ISupOElLlQnMjNZ4xfN5tucbMwG6ZCtBwl1a24wt4=\"}},\"text\":\"md` or cross‑agent edits in today’s PRs (reject/clean if found).\\n\\n---\\n\\n## 6) Security & Hygiene\\n\\n- [ ] No secrets in local logs/console paste. Close terminals with creds; stop tunnels.\\n- [ ] Ensure `.env*` are **not staged**; `.gitignore` covers them.\\n- [ ] Inventory any newly rotated secrets in the private Security note (if applicable).\\n\\n---\\n\\n## 7) CEO Summary (paste in `feedback/manager/<YYYY‑MM‑DD>.md`)\\n\\n**Today’s Outcomes**\\n\\n- Shipped/merged: PRs #…, #…\\n- In progress: PRs #… (DoD % complete), Issues #…\\n- Incidents: secrets (Y/N), CI failures (count), rogue docs (count)\\n\\n**Next Goal (tomorrow)**\\n\\n- Primary objective: …\\n- Success criteria (from North Star): …\\n\\n**Agent Performance (quick grading)**\\n\\n- <agent> — **Score (1–5)**\\n  - 2–3 things done well:\\n    1. …\\n    2. …\\n  - 1–2 things to change:\\n    1. …\\n  - **One thing to stop entirely:** …\\n\\n(Repeat per active agent; tie feedback to DoD / Allowed paths / feedback discipline.)\\n\\n### 8) Run Drift Checklist (Manager-only, required)\\n\\nBefore finalizing shutdown:\\n\\n- [ ] Execute `docs/runbooks/drift_checklist.md` **in full** (after all agents have shut down).\\n- [ ] Confirm: HEAD secrets scan is clean; docs policy shows 0 violations; planning TTL sweep committed;\\n      required checks on `main` still enforced; directions ↔ feedback are consistent for tomorrow.\\n\\n## 9) Finalize\\n\\n- [ ] Merge or request changes with **explicit next steps** (per PR).\\n- [ ] Confirm branch protection required checks are **still on** for `main`.\\n- [ ] Optional: Add a **restart plan** comment to each active Issue with\\n      the **first 1–2 steps** the agent should take on startup.\\n\\n> Build/Dev mode safety: no customer messaging, payments, or production Shopify mutations.\\n> If the UI needs sample approvals to render, they must be **fixtures**\\n> (`provenance.mode=\\\"dev:test\\\"`, with `feedback_ref`, and **Apply disabled**).\",\"textTemplate\":\"\",\"startCharIdx\":2887,\"endCharIdx\":4755,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"Y1fshE32sRVByVrvhKQ+Hnmdh42Th8xN/6JHY2JkJoQ=\"}",
      "__type__": "TEXT"
    },
    "41f4f356-ad7a-4edf-a039-92dde7260817": {
      "__data__": "{\"id_\":\"41f4f356-ad7a-4edf-a039-92dde7260817\",\"metadata\":{\"source\":\"docs/runbooks/manager_startup_checklist.md\",\"lastModified\":\"2025-10-19T00:09:22.319Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"docs/runbooks/manager_startup_checklist.md\",\"metadata\":{\"source\":\"docs/runbooks/manager_startup_checklist.md\",\"lastModified\":\"2025-10-19T00:09:22.319Z\"},\"hash\":\"eIeonLzqWGTLovVhsXrNS9xCre0r+Si4Z/J2cODMr1w=\"},\"NEXT\":{\"nodeId\":\"c434ad91-f366-4102-b9ef-fc3a569abe39\",\"metadata\":{},\"hash\":\"hacgjsnKNSe6hdrgHNu6MBtg77Qn8uwLZbYeIPZRsDs=\"}},\"text\":\"# Manager Startup (On first run)\\n\\n## PATH\\n\\n- [ ] Navigate to repo root ~/HotDash/hot-dash/ or /home/justin/HotDash/hot-dash/\\n\\n## 0) Align to the Star (1–2 min)\\n\\n- [ ] Skim diffs in `docs/NORTH_STAR.md` and `docs/RULES.md` (if changed since yesterday).\\n- [ ] Open `docs/OPERATING_MODEL.md` header; confirm the pipeline: **Signals → Suggestions → Approvals → Actions → Audit → Learn**.\\n- [ ] Confirm gap-analysis items are integrated (Programmatic SEO, Guided Selling, CWV→$$, A/B, Media, Learning Loop) and Action Dock is reflected in dashboard config.\\n- [ ] MCP usage clarifications: Shopify (dev + storefront) via MCP; GA4/GSC via internal adapters (no MCP). Ensure directions reflect this.\\n- [ ] Autopublish: verify toggles exist but are OFF (see `docs/specs/hitl/approvals-framework.config.json`).\\n\\n## 1) Repo & CI Guardrails (2–4 min)\\n\\n- [ ] **Status checks green on `main`**: _Docs Policy, Danger, Gitleaks, Validate AI Agent Config_.\\n- [ ] **Push Protection & Secret Scanning** enabled (Settings → Code security & analysis).\\n- [ ] Run local policy checks:\\n  ```bash\\n  node scripts/policy/check-docs.mjs\\n  node scripts/policy/check-ai-config.mjs\\n  gitleaks detect --source . --redact\\n  ```\\n  _If any fail: stop, fix, commit before continuing._\\n\\n## 2) Tools & MCP Health (2–3 min)\\n\\n- [ ] `shopify version` OK; `supabase --version` OK.\\n- [ ] Chatwoot API reachable (`npm run ops:check-chatwoot-health`).\\n- [ ] **Agents SDK/HITL** config intact: `app/agents/config/agents.json` has `ai-customer.human_review: true` and reviewers.\\n- [ ] (If social enabled) Publer environment secret present (never hard-coded).\\n\\n## 3) Manager-Controlled Git — Daily Flow (new)\\n\\n- [ ] Run: `node scripts/policy/check-feedback.mjs --date 2025-10-15`\\n- [ ] For each agent with a WORK COMPLETE block today:\\n  - Create/checkout branch: `agent/<agent>/<YYYYMMDD>-<task>`\\n  - Add only files in Allowed paths; commit with evidence reference\\n  - Push and create PR (`gh pr create ...`)\\n- [ ] Merge when CI green; update direction to next task\\n\\n## 3) Project status review and Agent direction (3–5 min)\\n\\n### 3.1 At-a-glance (30–45 sec)\\n\\n- [ ] **Milestone** on track? (tasks ≤ 2-day molecules)\\n- [ ] **CI** green on active PRs (Docs Policy, Danger, Gitleaks, AI Config)\\n- [ ] **Main** releasable (build/smoke pass)\\n\\n### 3.2 Feedback sweep **first** (60–90 sec)\\n\\nFor each active agent:\\n\\n- [ ] Open `feedback/<agent>/<YYYY-MM-DD>.md`\\n- [ ] Extract **blockers**, unanswered questions, unexpected findings\\n- [ ] Tag each blocker with **owner** and **ETA** (you or agent)\\n- [ ] If a decision is needed, add a short **Issue comment** on the task (not in feedback)\\n\\n### 3.3 Issues & PRs (gate sanity) (60–90 sec)\\n\\nFor each **Issue (label: task)** and its linked PR:\\n\\n- [ ] **Scope Gate:** Problem + Acceptance Criteria present in Issue\\n- [ ] **Sandbox:** Issue lists **Allowed paths**; PR body repeats them\\n- [ ] **Design Gate:** PR describes interfaces/data flow/failure modes\\n- [ ] **Evidence Gate (dev):** unit/integration tests present or justified\\n- [ ] **Ship Gate (if merging today):** rollback noted; changelog if user-visible\\n- [ ] Missing anything?\",\"textTemplate\":\"\",\"endCharIdx\":3124,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"6zaaJ9yMQqOjudZQYxzeOYlg5D3iGirae39sNIXg0kA=\"}",
      "__type__": "TEXT"
    },
    "c434ad91-f366-4102-b9ef-fc3a569abe39": {
      "__data__": "{\"id_\":\"c434ad91-f366-4102-b9ef-fc3a569abe39\",\"metadata\":{\"source\":\"docs/runbooks/manager_startup_checklist.md\",\"lastModified\":\"2025-10-19T00:09:22.319Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"docs/runbooks/manager_startup_checklist.md\",\"metadata\":{\"source\":\"docs/runbooks/manager_startup_checklist.md\",\"lastModified\":\"2025-10-19T00:09:22.319Z\"},\"hash\":\"eIeonLzqWGTLovVhsXrNS9xCre0r+Si4Z/J2cODMr1w=\"},\"PREVIOUS\":{\"nodeId\":\"41f4f356-ad7a-4edf-a039-92dde7260817\",\"metadata\":{\"source\":\"docs/runbooks/manager_startup_checklist.md\",\"lastModified\":\"2025-10-19T00:09:22.319Z\"},\"hash\":\"ZSwSihOtER1TjxdyOe/r+TJTwWuzTuqTPj23g/yytHs=\"},\"NEXT\":{\"nodeId\":\"bf5b4100-d0c8-442c-ba7c-c4f1b3c7a008\",\"metadata\":{},\"hash\":\"CIg1A97+uE9WuZSUsiPyLUGge4sdMBCWBuB4HaYP4oQ=\"}},\"text\":\"md`\\n- [ ] Extract **blockers**, unanswered questions, unexpected findings\\n- [ ] Tag each blocker with **owner** and **ETA** (you or agent)\\n- [ ] If a decision is needed, add a short **Issue comment** on the task (not in feedback)\\n\\n### 3.3 Issues & PRs (gate sanity) (60–90 sec)\\n\\nFor each **Issue (label: task)** and its linked PR:\\n\\n- [ ] **Scope Gate:** Problem + Acceptance Criteria present in Issue\\n- [ ] **Sandbox:** Issue lists **Allowed paths**; PR body repeats them\\n- [ ] **Design Gate:** PR describes interfaces/data flow/failure modes\\n- [ ] **Evidence Gate (dev):** unit/integration tests present or justified\\n- [ ] **Ship Gate (if merging today):** rollback noted; changelog if user-visible\\n- [ ] Missing anything? Comment on the PR with the gap and reassign\\n\\n### 3.4 Prioritize blockers (30–45 sec)\\n\\n- [ ] Rank top 3 blockers (env/data/API/review)\\n- [ ] Decide per blocker: **unblock now**, **de-scope**, or **timebox & escalate**\\n- [ ] Record the decision in the **Issue comment** (link from feedback)\\n\\n### 3.5 Update agent direction (45–60 sec)\\n\\nFor each active agent:\\n\\n- [ ] Open `docs/directions/<agent>.md` file must follow template `docs/directions/agenttemplate.md`\\n- [ ] **Set today’s objective** (≤ 2-day molecule) and **constraints**\\n- [ ] Reflect answers/decisions from step **3.2/3.4** into the direction file\\n- [ ] **Archive/remove** completed items (leave “done” note + PR link)\\n- [ ] Confirm the **task → Issue → PR** chain is explicit\\n- [ ] Ensure each agent direction includes Allowed paths and references MCP usage (Shopify via MCP; GA4/GSC via internal adapters; attach command logs)\\n\\n### 3.6 Sandboxes & safety (quick pass)\\n\\n- [ ] Diffs stay **within Allowed paths** (Danger enforces)\\n- [ ] No new `.md` outside allow-list (Docs Policy enforces)\\n- [ ] No secrets in code/logs; push protection **ON**\\n- [ ] Dev mode: **no customer messaging, payments, or production Shopify mutations**\\n\\n### 3.7 Today plan (30 sec)\\n\\n- [ ] Assign/resize 10–15 molecules **per agent**; confirm DoD + Allowed paths; sequence priority: Programmatic SEO → Guided Selling/Kit Composer → CWV→$$ → A/B harness; stage deep ads drilldowns later.\\n- [ ] Post a one-liner plan in `feedback/manager/<YYYY-MM-DD>.md`\\n\\n> **Note:** Approvals/HITL is **out of scope in build/dev mode**. If the UI needs sample approvals to render, use **fixture entries** with `provenance.mode=\\\"dev:test\\\"`, a `feedback_ref`, and **Apply disabled**.\\n\\n## 4 Drift Guard (2–4 min)\\n\\n- [ ] Run docs policy again on your working branch:\\n  ```bash\\n  node scripts/policy/check-docs.mjs\\n  ```\\n- [ ] **Planning TTL**: archive any `docs/planning/*` older than **2 days**:\\n  ```bash\\n  node scripts/ops/archive-docs.mjs\\n  git commit -am \\\"chore: planning TTL sweep\\\" && git push\\n  ```\\n- [ ] Glance for any stray `.md` or cross‑agent edits in repo and Bounce them.\\n\\n## 5 Quick Health Lights (Tiles should be green)\\n\\n- [ ] Tile P95 < **3s** (prod).\\n- [ ] Nightly rollup error rate < **0.5%** (last 24h).\\n- [ ] Approvals SLA for CX met; growth & inventory reviews on track.\\n- [ ] **0** secret incidents open.\\n\\n## 6 “Stop the Line” Triggers (do not proceed until resolved)\\n\\n- Secrets detected (local or CI) → rotate, purge history, re-scan.\\n- PR missing Issue linkage or Allowed paths → send back.\\n- Approvals without evidence/rollback or failing `/validate` → send back.\\n\\n## 7 Start the Day (2 min)\\n\\n- [ ] Create/resize **Tasks** (≤ 2-day molecules) and set in the Issue:\\n      **owner**, **DoD**, and **Allowed paths** (fnmatch).\\n- [ ] Update `docs/directions/<agent>.\",\"textTemplate\":\"\",\"startCharIdx\":2401,\"endCharIdx\":5928,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"uYT30MOdLCTB/OmJC4DqgHhT0hyK3pufvcSlkqT74kQ=\"}",
      "__type__": "TEXT"
    },
    "bf5b4100-d0c8-442c-ba7c-c4f1b3c7a008": {
      "__data__": "{\"id_\":\"bf5b4100-d0c8-442c-ba7c-c4f1b3c7a008\",\"metadata\":{\"source\":\"docs/runbooks/manager_startup_checklist.md\",\"lastModified\":\"2025-10-19T00:09:22.319Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"docs/runbooks/manager_startup_checklist.md\",\"metadata\":{\"source\":\"docs/runbooks/manager_startup_checklist.md\",\"lastModified\":\"2025-10-19T00:09:22.319Z\"},\"hash\":\"eIeonLzqWGTLovVhsXrNS9xCre0r+Si4Z/J2cODMr1w=\"},\"PREVIOUS\":{\"nodeId\":\"c434ad91-f366-4102-b9ef-fc3a569abe39\",\"metadata\":{\"source\":\"docs/runbooks/manager_startup_checklist.md\",\"lastModified\":\"2025-10-19T00:09:22.319Z\"},\"hash\":\"hacgjsnKNSe6hdrgHNu6MBtg77Qn8uwLZbYeIPZRsDs=\"}},\"text\":\"- [ ] Nightly rollup error rate < **0.5%** (last 24h).\\n- [ ] Approvals SLA for CX met; growth & inventory reviews on track.\\n- [ ] **0** secret incidents open.\\n\\n## 6 “Stop the Line” Triggers (do not proceed until resolved)\\n\\n- Secrets detected (local or CI) → rotate, purge history, re-scan.\\n- PR missing Issue linkage or Allowed paths → send back.\\n- Approvals without evidence/rollback or failing `/validate` → send back.\\n\\n## 7 Start the Day (2 min)\\n\\n- [ ] Create/resize **Tasks** (≤ 2-day molecules) and set in the Issue:\\n      **owner**, **DoD**, and **Allowed paths** (fnmatch).\\n- [ ] Update `docs/directions/<agent>.md` with **today’s objective** + **constraints**,\\n      and link the **Issue** (and PR if open).\\n- [ ] Move any blockers from yesterday’s `feedback/<agent>/<YYYY-MM-DD>.md`\\n      into the **Issue** as a comment with **resolver + ETA**.\\n- [ ] (Optional) Post a one-liner plan in `feedback/manager/<YYYY-MM-DD>.md`.\\n- [ ] Dev mode only: if UI needs sample approvals, use **fixtures** with\\n      `provenance.mode=\\\"dev:test\\\"`, a `feedback_ref`, and **Apply disabled**.\",\"textTemplate\":\"\",\"startCharIdx\":5309,\"endCharIdx\":6392,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"2JTzStxXEgNbsHJT3n0a/+BCBCSy7ToV604oQ5kAbpc=\"}",
      "__type__": "TEXT"
    },
    "d0669369-57ee-4176-a379-beeb134f3d58": {
      "__data__": "{\"id_\":\"d0669369-57ee-4176-a379-beeb134f3d58\",\"metadata\":{\"source\":\"docs/runbooks/production_deployment.md\",\"lastModified\":\"2025-10-19T01:13:55.789Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"docs/runbooks/production_deployment.md\",\"metadata\":{\"source\":\"docs/runbooks/production_deployment.md\",\"lastModified\":\"2025-10-19T01:13:55.789Z\"},\"hash\":\"R80JmPTO0lTVYVdlOyOr9omwpcDK20HxjSOMdaA9fxk=\"},\"NEXT\":{\"nodeId\":\"678cc8e0-52a0-4762-865d-49b1a302a230\",\"metadata\":{},\"hash\":\"WARNwEAoVu7VsdAwWcgVnyNEC/VcYJmMdXIbW5U38S4=\"}},\"text\":\"# Production Deployment Runbook\\n\\n## Overview\\n\\nThis runbook describes the process for deploying the HotDash application to production on Fly.io.\\n\\n## Prerequisites\\n\\n- [ ] All CI checks passing on main branch\\n- [ ] Staging deployment successful and healthy\\n- [ ] Manager approval obtained\\n- [ ] Deployment window: Monday-Friday, 9am-5pm PT\\n- [ ] FLY_API_TOKEN configured in GitHub Secrets\\n- [ ] Verify `scripts/ci/ensure-analytics-modules.mjs` is present (temporary guard that backfills missing GA4 helpers during CI builds)\\n- [ ] Review latest staging workflow run to confirm smoke + rollback jobs succeeded (or captured artifacts when skipped)\\n\\n### Required CI Checks\\n\\nThe following CI checks MUST pass before production deployment:\\n\\n1. **Docs Policy** - Ensures all markdown files are in allowed paths\\n2. **Danger** - Validates PR has Issue linkage and allowed paths\\n3. **Gitleaks** - Scans for secrets in code\\n4. **AI Config** - Validates AI agent configuration\\n5. **Health Check** - Verifies health check workflow is functional\\n\\nThese checks are enforced by branch protection on `main` and verified during deployment.\\n\\n### Email Notifications\\n\\nAll deployments send email notifications to justin@hotrodan.com:\\n\\n- **Success:** ✅ Production Deployment Successful\\n- **Failure:** 🚨 Production Deployment Failed\\n- **Rollback:** ⚠️ Production Rollback Executed\\n\\nNotifications include:\\n\\n- Commit SHA\\n- Deployment reason\\n- Deployed by (GitHub actor)\\n- Deployment time and version\\n- Workflow run link\\n- Health check status\\n\\n## Deployment Process\\n\\n### Staging Smoke & Rollback Checklist\\n\\nBefore triggering production deploys, review the most recent `Deploy to Staging` workflow run:\\n\\n1. **Smoke job artifacts**\\n   - Artifact name: `smoke-<run_number>`.\\n   - Inspect `smoke-logs/http_status.txt` (expect `200`).\\n   - Review `smoke-logs/curl.log` for connection retries and final status.\\n   - Validate manifest at `smoke-logs/sha256_manifest.txt` to confirm integrity.\\n\\n2. **Rollback job readiness**\\n   - Artifact name: `rollback-<run_number>` (may be absent if deploy succeeded).\\n   - If present, ensure `rollback-logs/rollback.log` shows a Fly deploy using the previous `imageRef`.\\n   - Confirm `rollback-logs/status.log` shows healthy machines post-rollback.\\n   - Check `rollback-logs/app-missing.log` when Fly app does not exist (expected on first run).\\n\\n3. **Guard script verification**\\n   - Confirm build job executed `node scripts/ci/ensure-analytics-modules.mjs` without errors.\\n   - If the script created files, schedule follow-up to land real modules and remove the guard.\\n\\nOnly proceed to production once staging smoke passes (HTTP 200) and rollback either succeeds or safely skips.\\n\\n### Automated Deployment (Recommended)\\n\\n1. **Navigate to GitHub Actions**\\n   - Go to: https://github.com/Jgorzitza/HotDash/actions/workflows/deploy-production.yml\\n\\n2. **Click \\\"Run workflow\\\"**\\n   - Branch: `main`\\n   - Reason: Describe the deployment (e.g., \\\"Deploy v1.0.0 with new dashboard features\\\")\\n   - Skip staging check: Leave unchecked (only check for emergencies)\\n\\n3. **Monitor Deployment**\\n   - Watch the workflow progress\\n   - Verify each job completes successfully:\\n     - Pre-deployment validation\\n     - Build\\n     - Deploy\\n     - Health check\\n   - If health check fails, automatic rollback will trigger\\n\\n4. **Verify Deployment**\\n   - Check app URL: https://hotdash-production.fly.dev\\n   - Verify health endpoint: https://hotdash-production.fly.dev/health\\n   - Check Fly.io status: `fly status -a hotdash-production`\\n   - Verify email notification received (if deployment failed)\\n\\n### Verification Steps\\n\\nAfter deployment completes, perform these verification checks:\\n\\n1. **Health Check Verification**\\n\\n   ```bash\\n   # Check health endpoint\\n   curl https://hotdash-production.fly.dev/health\\n\\n   # Expected response:\\n   # {\\\"status\\\":\\\"healthy\\\",\\\"timestamp\\\":\\\"...\\\",\\\"uptime\\\":...}\\n   ```\\n\\n2. **Fly.io Status Verification**\\n\\n   ```bash\\n   # Check app status\\n   fly status -a hotdash-production\\n\\n   # Expected: Status = deployed, Machines = running\\n   ```\\n\\n3. **Application Functionality**\\n   - Navigate to https://hotdash-production.fly.dev\\n   - Verify login works\\n   - Check dashboard loads\\n   - Test critical features\\n\\n4.\",\"textTemplate\":\"\",\"endCharIdx\":4211,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"pl8p2ouu/B76NbWITWS0Qq3jFPMLNiRVqwEoGJZ+i+s=\"}",
      "__type__": "TEXT"
    },
    "678cc8e0-52a0-4762-865d-49b1a302a230": {
      "__data__": "{\"id_\":\"678cc8e0-52a0-4762-865d-49b1a302a230\",\"metadata\":{\"source\":\"docs/runbooks/production_deployment.md\",\"lastModified\":\"2025-10-19T01:13:55.789Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"docs/runbooks/production_deployment.md\",\"metadata\":{\"source\":\"docs/runbooks/production_deployment.md\",\"lastModified\":\"2025-10-19T01:13:55.789Z\"},\"hash\":\"R80JmPTO0lTVYVdlOyOr9omwpcDK20HxjSOMdaA9fxk=\"},\"PREVIOUS\":{\"nodeId\":\"d0669369-57ee-4176-a379-beeb134f3d58\",\"metadata\":{\"source\":\"docs/runbooks/production_deployment.md\",\"lastModified\":\"2025-10-19T01:13:55.789Z\"},\"hash\":\"r+q1Np5tDD7/bmM1xHHgn4NP5XRhZg8+DLagpwt1OBY=\"},\"NEXT\":{\"nodeId\":\"c72050c8-a303-4038-a688-e4d72346806c\",\"metadata\":{},\"hash\":\"0DwMBSOTdDGUDBGVQejyLljxTgmd03GxhW6buV80dhc=\"}},\"text\":\"io status: `fly status -a hotdash-production`\\n   - Verify email notification received (if deployment failed)\\n\\n### Verification Steps\\n\\nAfter deployment completes, perform these verification checks:\\n\\n1. **Health Check Verification**\\n\\n   ```bash\\n   # Check health endpoint\\n   curl https://hotdash-production.fly.dev/health\\n\\n   # Expected response:\\n   # {\\\"status\\\":\\\"healthy\\\",\\\"timestamp\\\":\\\"...\\\",\\\"uptime\\\":...}\\n   ```\\n\\n2. **Fly.io Status Verification**\\n\\n   ```bash\\n   # Check app status\\n   fly status -a hotdash-production\\n\\n   # Expected: Status = deployed, Machines = running\\n   ```\\n\\n3. **Application Functionality**\\n   - Navigate to https://hotdash-production.fly.dev\\n   - Verify login works\\n   - Check dashboard loads\\n   - Test critical features\\n\\n4. **Metrics Verification**\\n\\n   ```bash\\n   # Check metrics endpoint\\n   curl https://hotdash-production.fly.dev/metrics\\n\\n   # Should return Prometheus format metrics\\n   ```\\n\\n5. **Log Verification**\\n\\n   ```bash\\n   # Check recent logs\\n   fly logs -a hotdash-production --tail\\n\\n   # Look for deployment success messages\\n   # Verify no errors in startup\\n   ```\\n\\n## Rollback Process\\n\\n### Automated Rollback (Recommended)\\n\\n1. **Navigate to GitHub Actions**\\n   - Go to: https://github.com/Jgorzitza/HotDash/actions/workflows/rollback-production.yml\\n\\n2. **Click \\\"Run workflow\\\"**\\n   - Target version: Leave empty for previous version, or specify version number\\n   - Reason: Describe why rollback is needed (REQUIRED)\\n\\n3. **Monitor Rollback**\\n   - Watch the workflow progress\\n   - Verify rollback completes in < 2 minutes\\n   - Check health verification passes\\n\\n4. **Verify Rollback**\\n   - Check app is healthy: https://hotdash-production.fly.dev\\n   - Verify correct version deployed\\n   - Check Fly.io status: `fly status -a hotdash-production`\\n   - Verify email notification received\\n\\n### Rollback Verification Steps\\n\\nAfter rollback completes, verify the system is stable:\\n\\n1. **Version Verification**\\n\\n   ```bash\\n   # Check deployed version\\n   fly releases -a hotdash-production\\n\\n   # Verify rollback to previous version\\n   ```\\n\\n2. **Health Check**\\n\\n   ```bash\\n   # Verify health endpoint\\n   curl https://hotdash-production.fly.dev/health\\n\\n   # Expected: {\\\"status\\\":\\\"healthy\\\",...}\\n   ```\\n\\n3. **Functionality Test**\\n   - Test critical user flows\\n   - Verify no errors in logs\\n   - Check metrics are being collected\\n\\n4. **Incident Documentation**\\n   - Document what caused the rollback\\n   - Create GitHub issue if needed\\n   - Export to audit trail:\\n   ```bash\\n   ./scripts/ops/export-incident.sh \\\\\\n     --type \\\"rollback\\\" \\\\\\n     --severity \\\"warning\\\" \\\\\\n     --details \\\"Rolled back due to: <reason>\\\"\\n   ```\\n\\n### Rollback Time Targets\\n\\n- **Target:** < 5 minutes from trigger to healthy\\n- **Automated rollback:** Triggered on health check failure\\n- **Manual rollback:** Available via workflow_dispatch\\n- **Emergency rollback:** Use Fly CLI directly if GitHub Actions unavailable\\n\\n## Health Checks\\n\\n### Automated Health Checks\\n\\nThe deployment workflow automatically performs health checks:\\n\\n1. Tries `/health` endpoint (expects HTTP 200)\\n2. Falls back to `/` endpoint (expects HTTP 200 or 302)\\n3. Verifies Fly.io machine status\\n\\n### Manual Health Checks\\n\\n```bash\\n# Check HTTP endpoints\\ncurl -I https://hotdash-production.fly.dev/health\\ncurl -I https://hotdash-production.fly.dev/\\n\\n# Check Fly.io status\\nfly status -a hotdash-production\\n\\n# Check logs\\nfly logs -a hotdash-production\\n\\n# Check machine health\\nfly checks list -a hotdash-production\\n```\\n\\n## Monitoring\\n\\n### Key Metrics\\n\\n- **Uptime:** Target ≥ 99.9% (30-day)\\n- **Response Time:** P95 < 3s\\n- **Error Rate:** < 0.5%\\n- **Deployment Success Rate:** > 95%\\n- **Rollback Time:** < 5 minutes\\n\\n### Monitoring Tools\\n\\n- Fly.io Dashboard: https://fly.io/apps/hotdash-production/monitoring\\n- GitHub Actions: https://github.com/Jgorzitza/HotDash/actions\\n- Application Logs: `fly logs -a hotdash-production`\\n\\n## Troubleshooting\\n\\n### Deployment Fails\\n\\n1. **Check CI Status**\\n   - Verify all CI checks passed on main\\n   - Review GitHub Actions logs\\n\\n2.\",\"textTemplate\":\"\",\"startCharIdx\":3468,\"endCharIdx\":7484,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"8DTstr+KGG/wtU7LNXrcjVLcVwRNv6lkkfRjVLnU2oc=\"}",
      "__type__": "TEXT"
    },
    "c72050c8-a303-4038-a688-e4d72346806c": {
      "__data__": "{\"id_\":\"c72050c8-a303-4038-a688-e4d72346806c\",\"metadata\":{\"source\":\"docs/runbooks/production_deployment.md\",\"lastModified\":\"2025-10-19T01:13:55.789Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"docs/runbooks/production_deployment.md\",\"metadata\":{\"source\":\"docs/runbooks/production_deployment.md\",\"lastModified\":\"2025-10-19T01:13:55.789Z\"},\"hash\":\"R80JmPTO0lTVYVdlOyOr9omwpcDK20HxjSOMdaA9fxk=\"},\"PREVIOUS\":{\"nodeId\":\"678cc8e0-52a0-4762-865d-49b1a302a230\",\"metadata\":{\"source\":\"docs/runbooks/production_deployment.md\",\"lastModified\":\"2025-10-19T01:13:55.789Z\"},\"hash\":\"WARNwEAoVu7VsdAwWcgVnyNEC/VcYJmMdXIbW5U38S4=\"}},\"text\":\"io status\\nfly status -a hotdash-production\\n\\n# Check logs\\nfly logs -a hotdash-production\\n\\n# Check machine health\\nfly checks list -a hotdash-production\\n```\\n\\n## Monitoring\\n\\n### Key Metrics\\n\\n- **Uptime:** Target ≥ 99.9% (30-day)\\n- **Response Time:** P95 < 3s\\n- **Error Rate:** < 0.5%\\n- **Deployment Success Rate:** > 95%\\n- **Rollback Time:** < 5 minutes\\n\\n### Monitoring Tools\\n\\n- Fly.io Dashboard: https://fly.io/apps/hotdash-production/monitoring\\n- GitHub Actions: https://github.com/Jgorzitza/HotDash/actions\\n- Application Logs: `fly logs -a hotdash-production`\\n\\n## Troubleshooting\\n\\n### Deployment Fails\\n\\n1. **Check CI Status**\\n   - Verify all CI checks passed on main\\n   - Review GitHub Actions logs\\n\\n2. **Check Staging Health**\\n   - Verify staging is healthy\\n   - Test staging deployment first\\n\\n3. **Check Secrets**\\n   - Verify all required secrets are configured\\n   - Check for expired credentials\\n\\n4. **Check Logs**\\n\\n   ```bash\\n   fly logs -a hotdash-production\\n   ```\\n\\n5. **Rollback if Needed**\\n   - Use automated rollback workflow\\n\\n### Health Check Fails\\n\\n1. **Check Application Logs**\\n\\n   ```bash\\n   fly logs -a hotdash-production --tail\\n   ```\\n\\n2. **Check Machine Status**\\n\\n   ```bash\\n   fly status -a hotdash-production\\n   fly checks list -a hotdash-production\\n   ```\\n\\n3. **Restart Machine**\\n\\n   ```bash\\n   fly machine restart <machine-id> -a hotdash-production\\n   ```\\n\\n4. **Rollback if Persistent**\\n   - Use rollback workflow\\n   - Investigate issue in staging\\n\\n## Deployment Checklist\\n\\n### Pre-Deployment\\n\\n- [ ] All CI checks passing on main\\n- [ ] Staging deployment successful\\n- [ ] Staging health checks passing\\n- [ ] Manager approval obtained\\n- [ ] Within deployment window (Mon-Fri, 9am-5pm PT)\\n- [ ] Rollback plan reviewed\\n\\n### During Deployment\\n\\n- [ ] Deployment workflow triggered\\n- [ ] Build successful\\n- [ ] Deployment successful\\n- [ ] Health checks passing\\n- [ ] No errors in logs\\n\\n### Post-Deployment\\n\\n- [ ] Application accessible\\n- [ ] Health endpoint responding\\n- [ ] Key features verified\\n- [ ] Monitoring dashboards updated\\n- [ ] Deployment documented\\n\\n### If Rollback Needed\\n\\n- [ ] Rollback workflow triggered\\n- [ ] Rollback completed in < 5 minutes\\n- [ ] Health checks passing after rollback\\n- [ ] Incident documented\\n- [ ] Root cause investigation scheduled\\n\\n## Deployment Windows\\n\\n**Allowed:**\\n\\n- Monday-Friday, 9am-5pm Pacific Time\\n- Emergency deployments require manager approval\\n\\n**Avoided:**\\n\\n- Weekends\\n- Outside business hours\\n- Holidays\\n- During high-traffic periods\\n\\n## Version History\\n\\n- v1.0 (2025-10-15) - Initial production deployment runbook\",\"textTemplate\":\"\",\"startCharIdx\":6783,\"endCharIdx\":9363,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"GDbwlx7hO4SvFVTGX6SOL/ke4K+LhxR8tMh/syr8hXU=\"}",
      "__type__": "TEXT"
    },
    "68c9c87e-c905-42e0-82ee-adccf635e140": {
      "__data__": "{\"id_\":\"68c9c87e-c905-42e0-82ee-adccf635e140\",\"metadata\":{\"source\":\"docs/runbooks/secrets.md\",\"lastModified\":\"2025-10-17T18:47:30.093Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"docs/runbooks/secrets.md\",\"metadata\":{\"source\":\"docs/runbooks/secrets.md\",\"lastModified\":\"2025-10-17T18:47:30.093Z\"},\"hash\":\"wO6Glipc6rt+AgcRtwK8bCU8kZULXf3CP8pDv/GSrkI=\"},\"NEXT\":{\"nodeId\":\"61938827-bb9a-4a85-8107-da6627755b5b\",\"metadata\":{},\"hash\":\"iv2kcirGzeRQqQmvLltPVLerpq2Ha2G5XlNEXeIpgc4=\"}},\"text\":\"# Secrets Management Runbook\\n\\n**Owner:** devops\\n**Date:** 2025-10-16\\n**Status:** Production\\n\\n## Overview\\n\\nHotDash uses a secure secret management system with secrets stored in `vault/occ/**` (gitignored) and synchronized to GitHub Secrets and Fly.io secrets via automated sync script.\\n\\n## Secret Sync Automation\\n\\n### Sync Script\\n\\n**Location:** `scripts/ops/sync-secrets.sh`\\n\\n**Usage:**\\n\\n```bash\\n# Dry run (recommended first)\\n./scripts/ops/sync-secrets.sh --dry-run\\n\\n# Sync to both environments\\n./scripts/ops/sync-secrets.sh\\n\\n# Sync to production only\\n./scripts/ops/sync-secrets.sh --environment production\\n\\n# Sync to staging only\\n./scripts/ops/sync-secrets.sh --environment staging\\n```\\n\\n### What Gets Synced\\n\\n1. **Google Analytics Service Account**\\n   - File: `vault/occ/google/analytics-service-account.json`\\n   - Synced as: `GOOGLE_ANALYTICS_SERVICE_ACCOUNT`\\n\\n2. **Text-based Secrets**\\n   - Any `.txt` file in `vault/occ/**`\\n   - Converted to uppercase with underscores\\n   - Example: `vault/occ/shopify/api-key.txt` → `SHOPIFY_API_KEY`\\n\\n### Sync Process\\n\\n1. Read secrets from `vault/occ/**`\\n2. Validate secret format and content\\n3. Sync to GitHub Secrets via `gh secret set`\\n4. Sync to Fly secrets via `fly secrets set`\\n5. Verify sync completed successfully\\n\\n## Secrets Management Runbook\\n\\n**Owner:** integrations agent  \\n**Date:** 2025-10-16  \\n**Purpose:** Secrets and credentials management for all adapters\\n\\n---\\n\\n## Overview\\n\\nThis document describes the secrets required for all integration adapters and how to manage them across environments.\\n\\n**Environments:**\\n\\n- **Local:** Development on developer machines\\n- **Staging:** Testing environment (Fly.io staging app)\\n- **Production:** Live environment (Fly.io production app)\\n\\n---\\n\\n## Adapter Requirements\\n\\n### Shopify Admin GraphQL\\n\\n**Required Secrets:**\\n\\n- `SHOPIFY_API_KEY` - App API key from Partner Dashboard\\n- `SHOPIFY_API_SECRET` - App API secret from Partner Dashboard\\n- `SHOPIFY_STORE_URL` - Store domain (e.g., hotrodan.myshopify.com)\\n\\n**Storage:**\\n\\n- **Local:** `vault/occ/shopify/` (gitignored)\\n  - `api_key_staging.env`\\n  - `api_secret_staging.env`\\n  - `shop_domain_staging.env`\\n- **Staging:** Fly.io secrets (`fly secrets set`)\\n- **Production:** Fly.io secrets (`fly secrets set`)\\n\\n**Rotation:** Every 90 days or on exposure\\n\\n**Scopes Required:**\\n\\n- `read_orders`\\n- `read_products`\\n- `read_inventory`\\n- `read_marketplace_orders`\\n\\n---\\n\\n### Supabase\\n\\n**Required Secrets:**\\n\\n- `SUPABASE_URL` - Project URL\\n- `SUPABASE_ANON_KEY` - Anonymous key (frontend)\\n- `SUPABASE_SERVICE_KEY` - Service role key (backend)\\n\\n**Storage:**\\n\\n- **Local:** `vault/occ/supabase/` (gitignored)\\n  - `database_url_staging.env`\\n  - `service_key_staging.env`\\n- **Staging:** Fly.io secrets\\n- **Production:** Fly.io secrets\\n\\n**Rotation:** Every 90 days or on exposure\\n\\n**Project:** mmbjiyhsvniqxibzgyvx\\n\\n---\\n\\n### Chatwoot\\n\\n**Required Secrets:**\\n\\n- `CHATWOOT_API_TOKEN` - API access token\\n- `CHATWOOT_ACCOUNT_ID` - Account ID\\n- `CHATWOOT_BASE_URL` - API base URL (e.g., https://app.chatwoot.com)\\n\\n**Storage:**\\n\\n- **Local:** `vault/occ/chatwoot/` (gitignored)\\n  - `api_token_staging.env`\\n  - `account_id_staging.env`\\n- **Staging:** Fly.io secrets\\n- **Production:** Fly.io secrets\\n\\n**Rotation:** Every 90 days or on exposure\\n\\n**Rate Limit:** 10 requests/second\\n\\n---\\n\\n### Publer (Social Media)\\n\\n**Required Secrets:**\\n\\n- `PUBLER_API_KEY` - Publer API key\\n- `PUBLER_WORKSPACE_ID` - Workspace identifier (default: \\\"HotRodAN\\\")\\n\\n**Storage:**\\n\\n- **Local:** `vault/occ/publer/` (gitignored)\\n  - `api_key_staging.env`\\n  - `workspace_id_staging.env`\\n- **Staging:** Fly.\",\"textTemplate\":\"\",\"endCharIdx\":3594,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"XnnB/o3id7Ovy/eK1sNDny/kIlc2uVAkl5Fyt4/kTiU=\"}",
      "__type__": "TEXT"
    },
    "61938827-bb9a-4a85-8107-da6627755b5b": {
      "__data__": "{\"id_\":\"61938827-bb9a-4a85-8107-da6627755b5b\",\"metadata\":{\"source\":\"docs/runbooks/secrets.md\",\"lastModified\":\"2025-10-17T18:47:30.093Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"docs/runbooks/secrets.md\",\"metadata\":{\"source\":\"docs/runbooks/secrets.md\",\"lastModified\":\"2025-10-17T18:47:30.093Z\"},\"hash\":\"wO6Glipc6rt+AgcRtwK8bCU8kZULXf3CP8pDv/GSrkI=\"},\"PREVIOUS\":{\"nodeId\":\"68c9c87e-c905-42e0-82ee-adccf635e140\",\"metadata\":{\"source\":\"docs/runbooks/secrets.md\",\"lastModified\":\"2025-10-17T18:47:30.093Z\"},\"hash\":\"Tfwy1wzcet2SkftYx39Q/75f0wcIwXERavt+fF5Wl9o=\"},\"NEXT\":{\"nodeId\":\"8c4d49e0-46aa-4c74-b8a2-fce8533cfd41\",\"metadata\":{},\"hash\":\"uKzHKm9HX0Wy0ihi0IDfqtft4b/zu9fEr7Obl1lRWWQ=\"}},\"text\":\"g., https://app.chatwoot.com)\\n\\n**Storage:**\\n\\n- **Local:** `vault/occ/chatwoot/` (gitignored)\\n  - `api_token_staging.env`\\n  - `account_id_staging.env`\\n- **Staging:** Fly.io secrets\\n- **Production:** Fly.io secrets\\n\\n**Rotation:** Every 90 days or on exposure\\n\\n**Rate Limit:** 10 requests/second\\n\\n---\\n\\n### Publer (Social Media)\\n\\n**Required Secrets:**\\n\\n- `PUBLER_API_KEY` - Publer API key\\n- `PUBLER_WORKSPACE_ID` - Workspace identifier (default: \\\"HotRodAN\\\")\\n\\n**Storage:**\\n\\n- **Local:** `vault/occ/publer/` (gitignored)\\n  - `api_key_staging.env`\\n  - `workspace_id_staging.env`\\n- **Staging:** Fly.io secrets (staging workspace)\\n- **Production:** Fly.io secrets (production workspace)\\n\\n**Rotation:** Every 90 days or on exposure\\n\\n**Platforms Supported:**\\n\\n- Facebook\\n- Instagram\\n- Twitter\\n- LinkedIn\\n- Pinterest\\n- TikTok\\n- YouTube\\n- Reddit\\n- Telegram\\n- Google Business\\n\\n---\\n\\n### Google Analytics (GA4)\\n\\n**Required Secrets:**\\n\\n- `GA4_PROPERTY_ID` - GA4 property ID\\n- `GA4_SERVICE_ACCOUNT_KEY` - Service account JSON key\\n\\n**Storage:**\\n\\n- **Local:** `vault/occ/google/` (gitignored)\\n  - `analytics-service-account.json`\\n  - `property_id_staging.env`\\n- **Staging:** Fly.io secrets (JSON as base64)\\n- **Production:** Fly.io secrets (JSON as base64)\\n\\n**Rotation:** Every 90 days\\n\\n**Project:** hotrodan-seo-reports\\n\\n---\\n\\n## Local Development Setup\\n\\n### 1. Clone Vault Credentials\\n\\n```bash\\n# Ensure vault/ directory exists and is gitignored\\nmkdir -p vault/occ/{shopify,supabase,chatwoot,publer,google}\\n\\n# Copy staging credentials from secure storage\\n# (Coordinate with manager for access)\\n```\\n\\n### 2. Load Environment Variables\\n\\n```bash\\n# Load all staging credentials\\nexport $(grep -v '^#' vault/occ/shopify/api_key_staging.env | xargs)\\nexport $(grep -v '^#' vault/occ/shopify/api_secret_staging.env | xargs)\\nexport $(grep -v '^#' vault/occ/supabase/database_url_staging.env | xargs)\\nexport $(grep -v '^#' vault/occ/supabase/service_key_staging.env | xargs)\\n# ... etc for other services\\n```\\n\\n### 3. Verify Credentials\\n\\n```bash\\n# Test MCP tools\\n./mcp/test-mcp-tools.sh\\n\\n# Expected output:\\n# ✓ Shopify MCP - Ready\\n# ✓ Supabase MCP - Ready\\n# ✓ All tools operational\\n```\\n\\n---\\n\\n## Staging Deployment\\n\\n### Set Secrets in Fly.io\\n\\n```bash\\n# Shopify\\nfly secrets set SHOPIFY_API_KEY=\\\"...\\\" --app hot-dash-staging\\nfly secrets set SHOPIFY_API_SECRET=\\\"...\\\" --app hot-dash-staging\\nfly secrets set SHOPIFY_STORE_URL=\\\"hotrodan.myshopify.com\\\" --app hot-dash-staging\\n\\n# Supabase\\nfly secrets set SUPABASE_URL=\\\"...\\\" --app hot-dash-staging\\nfly secrets set SUPABASE_ANON_KEY=\\\"...\\\" --app hot-dash-staging\\nfly secrets set SUPABASE_SERVICE_KEY=\\\"...\\\" --app hot-dash-staging\\n\\n# Chatwoot\\nfly secrets set CHATWOOT_API_TOKEN=\\\"...\\\" --app hot-dash-staging\\nfly secrets set CHATWOOT_ACCOUNT_ID=\\\"...\\\" --app hot-dash-staging\\nfly secrets set CHATWOOT_BASE_URL=\\\"https://app.chatwoot.com\\\" --app hot-dash-staging\\n\\n# Publer (staging workspace)\\nfly secrets set PUBLER_API_KEY=\\\"...\\\" --app hot-dash-staging\\nfly secrets set PUBLER_WORKSPACE_ID=\\\"HotRodAN-Staging\\\" --app hot-dash-staging\\n\\n# Google Analytics\\nfly secrets set GA4_PROPERTY_ID=\\\"...\\\" --app hot-dash-staging\\nfly secrets set GA4_SERVICE_ACCOUNT_KEY=\\\"$(cat vault/occ/google/analytics-service-account.json | base64)\\\" --app hot-dash-staging\\n```\\n\\n### Verify Secrets\\n\\n```bash\\n# List secrets (values are hidden)\\nfly secrets list --app hot-dash-staging\\n\\n# Expected output:\\n# NAME                        DIGEST\\n# SHOPIFY_API_KEY             abc123...\\n# SHOPIFY_API_SECRET          def456...\",\"textTemplate\":\"\",\"startCharIdx\":3003,\"endCharIdx\":6482,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"L90QGLCRZAzqMextNzP9PCLwBzbWcySkoKpAP7qO8qk=\"}",
      "__type__": "TEXT"
    },
    "8c4d49e0-46aa-4c74-b8a2-fce8533cfd41": {
      "__data__": "{\"id_\":\"8c4d49e0-46aa-4c74-b8a2-fce8533cfd41\",\"metadata\":{\"source\":\"docs/runbooks/secrets.md\",\"lastModified\":\"2025-10-17T18:47:30.093Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"docs/runbooks/secrets.md\",\"metadata\":{\"source\":\"docs/runbooks/secrets.md\",\"lastModified\":\"2025-10-17T18:47:30.093Z\"},\"hash\":\"wO6Glipc6rt+AgcRtwK8bCU8kZULXf3CP8pDv/GSrkI=\"},\"PREVIOUS\":{\"nodeId\":\"61938827-bb9a-4a85-8107-da6627755b5b\",\"metadata\":{\"source\":\"docs/runbooks/secrets.md\",\"lastModified\":\"2025-10-17T18:47:30.093Z\"},\"hash\":\"iv2kcirGzeRQqQmvLltPVLerpq2Ha2G5XlNEXeIpgc4=\"},\"NEXT\":{\"nodeId\":\"233693f2-35f1-4bf9-bac0-58a66a1a1ec2\",\"metadata\":{},\"hash\":\"n96DeIZWvQRTQtfEs/rpTiFu5LjJgA37IpmKJoG1AC8=\"}},\"text\":\"--app hot-dash-staging\\nfly secrets set CHATWOOT_BASE_URL=\\\"https://app.chatwoot.com\\\" --app hot-dash-staging\\n\\n# Publer (staging workspace)\\nfly secrets set PUBLER_API_KEY=\\\"...\\\" --app hot-dash-staging\\nfly secrets set PUBLER_WORKSPACE_ID=\\\"HotRodAN-Staging\\\" --app hot-dash-staging\\n\\n# Google Analytics\\nfly secrets set GA4_PROPERTY_ID=\\\"...\\\" --app hot-dash-staging\\nfly secrets set GA4_SERVICE_ACCOUNT_KEY=\\\"$(cat vault/occ/google/analytics-service-account.json | base64)\\\" --app hot-dash-staging\\n```\\n\\n### Verify Secrets\\n\\n```bash\\n# List secrets (values are hidden)\\nfly secrets list --app hot-dash-staging\\n\\n# Expected output:\\n# NAME                        DIGEST\\n# SHOPIFY_API_KEY             abc123...\\n# SHOPIFY_API_SECRET          def456...\\n# SUPABASE_URL                ghi789...\\n# ...\\n```\\n\\n---\\n\\n## Production Deployment\\n\\n### Set Secrets in Fly.io\\n\\n```bash\\n# Use production credentials (NOT staging)\\nfly secrets set SHOPIFY_API_KEY=\\\"...\\\" --app hot-dash-production\\nfly secrets set SHOPIFY_API_SECRET=\\\"...\\\" --app hot-dash-production\\nfly secrets set SHOPIFY_STORE_URL=\\\"hotrodan.myshopify.com\\\" --app hot-dash-production\\n\\n# Supabase (production project)\\nfly secrets set SUPABASE_URL=\\\"...\\\" --app hot-dash-production\\nfly secrets set SUPABASE_ANON_KEY=\\\"...\\\" --app hot-dash-production\\nfly secrets set SUPABASE_SERVICE_KEY=\\\"...\\\" --app hot-dash-production\\n\\n# Chatwoot (production account)\\nfly secrets set CHATWOOT_API_TOKEN=\\\"...\\\" --app hot-dash-production\\nfly secrets set CHATWOOT_ACCOUNT_ID=\\\"...\\\" --app hot-dash-production\\nfly secrets set CHATWOOT_BASE_URL=\\\"https://app.chatwoot.com\\\" --app hot-dash-production\\n\\n# Publer (production workspace)\\nfly secrets set PUBLER_API_KEY=\\\"...\\\" --app hot-dash-production\\nfly secrets set PUBLER_WORKSPACE_ID=\\\"HotRodAN\\\" --app hot-dash-production\\n\\n# Google Analytics (production property)\\nfly secrets set GA4_PROPERTY_ID=\\\"...\\\" --app hot-dash-production\\nfly secrets set GA4_SERVICE_ACCOUNT_KEY=\\\"$(cat vault/occ/google/analytics-service-account-prod.json | base64)\\\" --app hot-dash-production\\n```\\n\\n---\\n\\n## Secret Rotation\\n\\n### When to Rotate\\n\\n- ✅ Every 90 days (scheduled)\\n- ✅ Immediately if exposed in code/logs\\n- ✅ Immediately if team member leaves\\n- ✅ If suspicious activity detected\\n\\n### Rotation Procedure\\n\\n1. **Generate new credential** in service (Shopify, Supabase, etc.)\\n2. **Update in vault/** for local development\\n3. **Update in Fly.io** for staging/production\\n4. **Test with new credential** in staging\\n5. **Deploy to production** if staging works\\n6. **Revoke old credential** in service\\n7. **Verify old credential no longer works**\\n8. **Document rotation** in this file\\n\\n### Rotation Log\\n\\n| Service  | Last Rotated | Next Rotation | Rotated By |\\n| -------- | ------------ | ------------- | ---------- |\\n| Shopify  | 2025-10-16   | 2026-01-14    | manager    |\\n| Supabase | 2025-10-16   | 2026-01-14    | manager    |\\n| Chatwoot | 2025-10-16   | 2026-01-14    | manager    |\\n| Publer   | 2025-10-16   | 2026-01-14    | manager    |\\n| GA4      | 2025-10-16   | 2026-01-14    | manager    |\\n\\n---\\n\\n## Security Best Practices\\n\\n### ✅ DO\\n\\n- Store secrets in `vault/` (gitignored)\\n- Use Fly.io secrets for deployment\\n- Rotate every 90 days\\n- Use minimal required permissions\\n- Document rotation in this file\\n- Test in staging before production\\n\\n### ❌ DON'T\\n\\n- Hardcode secrets in code\\n- Commit secrets to git\\n- Share secrets in chat/email\\n- Log secret values\\n- Use production secrets in staging\\n- Bypass secret rotation schedule\\n\\n---\\n\\n## Troubleshooting\\n\\n### Issue: \\\"Unable to authenticate with Shopify\\\"\\n\\n**Cause:** Invalid or expired API credentials\\n\\n**Fix:**\\n\\n1. Verify `SHOPIFY_API_KEY` and `SHOPIFY_API_SECRET` are set\\n2.\",\"textTemplate\":\"\",\"startCharIdx\":5753,\"endCharIdx\":9393,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"xsHHeUv8FYO7SCmMQjWhpMeWtRKa3CENora9hjIFZms=\"}",
      "__type__": "TEXT"
    },
    "233693f2-35f1-4bf9-bac0-58a66a1a1ec2": {
      "__data__": "{\"id_\":\"233693f2-35f1-4bf9-bac0-58a66a1a1ec2\",\"metadata\":{\"source\":\"docs/runbooks/secrets.md\",\"lastModified\":\"2025-10-17T18:47:30.093Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"docs/runbooks/secrets.md\",\"metadata\":{\"source\":\"docs/runbooks/secrets.md\",\"lastModified\":\"2025-10-17T18:47:30.093Z\"},\"hash\":\"wO6Glipc6rt+AgcRtwK8bCU8kZULXf3CP8pDv/GSrkI=\"},\"PREVIOUS\":{\"nodeId\":\"8c4d49e0-46aa-4c74-b8a2-fce8533cfd41\",\"metadata\":{\"source\":\"docs/runbooks/secrets.md\",\"lastModified\":\"2025-10-17T18:47:30.093Z\"},\"hash\":\"uKzHKm9HX0Wy0ihi0IDfqtft4b/zu9fEr7Obl1lRWWQ=\"}},\"text\":\"io secrets for deployment\\n- Rotate every 90 days\\n- Use minimal required permissions\\n- Document rotation in this file\\n- Test in staging before production\\n\\n### ❌ DON'T\\n\\n- Hardcode secrets in code\\n- Commit secrets to git\\n- Share secrets in chat/email\\n- Log secret values\\n- Use production secrets in staging\\n- Bypass secret rotation schedule\\n\\n---\\n\\n## Troubleshooting\\n\\n### Issue: \\\"Unable to authenticate with Shopify\\\"\\n\\n**Cause:** Invalid or expired API credentials\\n\\n**Fix:**\\n\\n1. Verify `SHOPIFY_API_KEY` and `SHOPIFY_API_SECRET` are set\\n2. Check credentials in Shopify Partner Dashboard\\n3. Rotate credentials if expired\\n4. Verify API scopes are correct\\n\\n### Issue: \\\"Supabase RPC call failed\\\"\\n\\n**Cause:** Invalid service key or project URL\\n\\n**Fix:**\\n\\n1. Verify `SUPABASE_URL` and `SUPABASE_SERVICE_KEY` are set\\n2. Check project settings in Supabase dashboard\\n3. Ensure service key has correct permissions\\n4. Rotate key if compromised\\n\\n### Issue: \\\"Chatwoot API rate limit exceeded\\\"\\n\\n**Cause:** Too many requests (> 10/sec)\\n\\n**Fix:**\\n\\n1. Implement rate limiting in code\\n2. Add caching to reduce API calls\\n3. Use webhooks instead of polling\\n\\n### Issue: \\\"Publer post failed\\\"\\n\\n**Cause:** Invalid API token or workspace\\n\\n**Fix:**\\n\\n1. Verify `PUBLER_API_KEY` is valid\\n2. Check `PUBLER_WORKSPACE_ID` matches workspace\\n3. Ensure workspace has connected social accounts\\n4. Verify API token has posting permissions\\n\\n---\\n\\n## Monitoring\\n\\n### Daily Checks\\n\\n- [ ] All secrets set in Fly.io (staging and production)\\n- [ ] No secrets in git history (Gitleaks clean)\\n- [ ] No secrets in logs\\n- [ ] Vault/ directory gitignored\\n\\n### Weekly Checks\\n\\n- [ ] Test all API connections\\n- [ ] Verify MCP tools operational\\n- [ ] Check for expiring credentials (< 30 days)\\n\\n### Monthly Checks\\n\\n- [ ] Review rotation schedule\\n- [ ] Audit secret usage\\n- [ ] Update rotation log\\n- [ ] Test secret rotation procedure\\n\\n---\\n\\n**Last Updated:** 2025-10-16  \\n**Maintained by:** integrations agent  \\n**Next Review:** 2025-11-16\",\"textTemplate\":\"\",\"startCharIdx\":8859,\"endCharIdx\":10840,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"LFa9c2ThWfz7yqABBvUouQ5KLm5NQdRiUQNwSzTOymY=\"}",
      "__type__": "TEXT"
    },
    "e0196040-5993-4413-9e70-e1dc30d7c73b": {
      "__data__": "{\"id_\":\"e0196040-5993-4413-9e70-e1dc30d7c73b\",\"metadata\":{\"source\":\"docs/runbooks/support_webhooks.md\",\"lastModified\":\"2025-10-19T00:21:50.630Z\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"docs/runbooks/support_webhooks.md\",\"metadata\":{\"source\":\"docs/runbooks/support_webhooks.md\",\"lastModified\":\"2025-10-19T00:21:50.630Z\"},\"hash\":\"eXg0HT3e21jFhNsE0FRbd506v17/tUzt3VGj15MzCJM=\"}},\"text\":\"# Support Webhooks – Chatwoot Intake\\n\\nLast updated: 2025-10-18\\n\\n## Purpose\\n\\nDocument the evidence steps to verify Chatwoot → Agent SDK ingestion, retry policy, and observability before allowing customer-facing traffic.\\n\\n## Preconditions\\n\\n- `CHATWOOT_BASE_URL`, `CHATWOOT_API_TOKEN[_STAGING]`, `CHATWOOT_ACCOUNT_ID[_STAGING]`, and `CHATWOOT_WEBHOOK_SECRET` populated via `vault/occ/chatwoot/*.env` or environment.\\n- Agent SDK reachable (`AGENT_SDK_URL`, default `https://hotdash-agent-service.fly.dev`).\\n- Supabase + packages/memory connectivity confirmed (see `docs/runbooks/support_db_health.md`).\\n\\n## Health Check Procedure\\n\\n1. Export Chatwoot secrets (or ensure env files exist).\\n2. Run the script:\\n\\n   ```bash\\n   npm run ops:check-chatwoot-health\\n   ```\\n\\n   - Output file: `artifacts/integrations/<DATE>/chatwoot_health.jsonl`\\n   - Mirror to support evidence: `artifacts/support/<DATE>/ops/chatwoot-health.jsonl`\\n   - Success requires:\\n     - `/rails/health` (HTTP 2xx) **or** `/api` fallback 2xx\\n     - Authenticated probe `/api/v1/accounts/<ID>` returns 2xx/3xx\\n\\n3. Record the run in `feedback/support/<DATE>.md` with command + paths.\\n\\n## Retry Policy Verification\\n\\nHotdash webhook handler forwards payloads to Agent SDK using exponential backoff:\\n\\n- Attempts: 3 (configurable via `CHATWOOT_WEBHOOK_MAX_RETRIES`).\\n- Base delay: 500 ms (`CHATWOOT_WEBHOOK_RETRY_BASE_MS`).\\n- Applies full jitter and honors upstream `Retry-After` header when present.\\n- Non-OK responses after final attempt return HTTP 502 with `attempts` in payload.\\n- Structured logs emitted via `chatwootLogger` `service=hotdash-app:chatwoot`.\\n\\nTo run regression tests:\\n\\n```bash\\nnpx vitest run tests/integration/support.webhook.spec.ts\\n```\\n\\nAssertions cover success path, retry path, `Retry-After` respect, and failure exhaust.\\n\\n## Learning Signal Capture\\n\\n- Agent SDK stores draft outputs and approvals via `saveFeedbackSample` (packages/memory) when webhook succeeds.\\n- On Hotdash side, ensure `artifacts/support/<DATE>/ops/chatwoot-health*.jsonl` archived and linked in daily feedback.\\n- For CX grading loops, confirm Supabase `agent_sdk_approval_queue` entries (see `tests/integration/agent-sdk-webhook.spec.ts` once implemented) and AI logging via `logReplyGeneration` when downstream actions run.\\n\\n## Escalation\\n\\n- If retries exhaust (HTTP 502), open `reports/manager/ESCALATION.md` entry with timestamp, payload hash (redacted PII), and Agent SDK status.\\n- Coordinate with AI-Customer and AI-Knowledge agents to confirm grading pipeline is operational before resuming intake.\",\"textTemplate\":\"\",\"endCharIdx\":2554,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"p1DLf9a5N5KhUriIT/1gF2o6jnfh/wWRE+QJq3uNPRE=\"}",
      "__type__": "TEXT"
    }
  },
  "docstore/metadata": {
    "docs/runbooks/agent_shutdown_checklist.md": {
      "docHash": "AyWij9LlHiIHmKivmHPqcsUmwjoqJoHtawDMpej95JE="
    },
    "docs/runbooks/agent_startup_checklist.md": {
      "docHash": "AHSkI8QfZVDR9AU2k+YLj7hPnrszowaeINn2f/JdH4Q="
    },
    "docs/runbooks/ai_agent_review_checklist.md": {
      "docHash": "PrzCeQGCsRZbEFeN9tFnUJkID7HCIXn6CLk3pJ9MBpw="
    },
    "docs/runbooks/data_staging_apply.md": {
      "docHash": "eoQ7PRlONOXLQAlcElJg+NPO65pAQMK1XDqVkk+wjEk="
    },
    "docs/runbooks/drift_checklist.md": {
      "docHash": "tajdVwnl4GNAyUSLzScTighDhCWn6l0w/xOUmkxutQI="
    },
    "docs/runbooks/manager_emergency_startup.md": {
      "docHash": "+BYSyOLZ3pnmhezNGtgwDJW/vPyn0hf/+gSyVpn0NkU="
    },
    "docs/runbooks/manager_shutdown_checklist.md": {
      "docHash": "SqCEQ8m+jfglIqF1f8qJVRQolXAp7jkMthMPH9AtvGU="
    },
    "docs/runbooks/manager_startup_checklist.md": {
      "docHash": "eIeonLzqWGTLovVhsXrNS9xCre0r+Si4Z/J2cODMr1w="
    },
    "docs/runbooks/production_deployment.md": {
      "docHash": "R80JmPTO0lTVYVdlOyOr9omwpcDK20HxjSOMdaA9fxk="
    },
    "docs/runbooks/secrets.md": {
      "docHash": "wO6Glipc6rt+AgcRtwK8bCU8kZULXf3CP8pDv/GSrkI="
    },
    "docs/runbooks/support_webhooks.md": {
      "docHash": "eXg0HT3e21jFhNsE0FRbd506v17/tUzt3VGj15MzCJM="
    },
    "649c2ff1-be0f-4011-837a-fbe2ea94cccb": {
      "docHash": "3iBx4yXaZgAgk2RTnpzfm5ezcy4m9Xz69h0mIP7dZFI=",
      "refDocId": "docs/runbooks/agent_shutdown_checklist.md"
    },
    "d4e7af0b-1c0c-4200-a428-e062de08c2b5": {
      "docHash": "R79p0WECNY/+Gh8bjtN+Ncd/YkI5HL/yAeMzHTDc70E=",
      "refDocId": "docs/runbooks/agent_startup_checklist.md"
    },
    "8b4a851c-b77e-4ec3-9b29-2a398f124dcc": {
      "docHash": "PczLI3azsvLPfh+eqpoEqGR6ZORetavxYGT4JPmBVxA=",
      "refDocId": "docs/runbooks/ai_agent_review_checklist.md"
    },
    "b0c8f97f-581b-423a-bc07-e6fff9dc0aa2": {
      "docHash": "WcpG/j4eQDVQeK4skvuAXvsqcVxnAaL+eJccb2QeVjI=",
      "refDocId": "docs/runbooks/data_staging_apply.md"
    },
    "8d0d6ab7-76c3-4282-80c5-8509a9d8c646": {
      "docHash": "9ymbNb5f9WjNzh4ecpgyt+p5SmrdJMPjy6bqYd/E+CU=",
      "refDocId": "docs/runbooks/data_staging_apply.md"
    },
    "409a4703-b0c2-40a5-af2d-2015297cbd61": {
      "docHash": "NJCcDQQ3Fztwg3OeEslSwmWbLp0pjQPcTcC+UxrPaTg=",
      "refDocId": "docs/runbooks/data_staging_apply.md"
    },
    "d4ea0323-5088-4eb2-a19f-95026f126554": {
      "docHash": "6FmbhgzyfMTj+VHD85vSepBPt8eXtp2w9MU8YJ8/5Tw=",
      "refDocId": "docs/runbooks/drift_checklist.md"
    },
    "1abe4105-d906-4ae9-ad7f-74c2024505c7": {
      "docHash": "TDob5ymS7DafmW5+rxQxjB8nhTiKMOv28M6udSTO2AM=",
      "refDocId": "docs/runbooks/manager_emergency_startup.md"
    },
    "7177363e-8c44-4cdb-81c0-6374b9adcd79": {
      "docHash": "66Cao7U19nm1ZT2ZuPSpahixl8RNPDYegSzEfoJTXm4=",
      "refDocId": "docs/runbooks/manager_emergency_startup.md"
    },
    "6c377b0d-ff6a-47c4-8bdd-f5f1662ba139": {
      "docHash": "V/OXD4En1bQ9EjUNPUEWa8LEwl/E29MaOzIAAx+CMUk=",
      "refDocId": "docs/runbooks/manager_shutdown_checklist.md"
    },
    "6c22afeb-47ff-4430-a3f8-638924eab179": {
      "docHash": "Y1fshE32sRVByVrvhKQ+Hnmdh42Th8xN/6JHY2JkJoQ=",
      "refDocId": "docs/runbooks/manager_shutdown_checklist.md"
    },
    "41f4f356-ad7a-4edf-a039-92dde7260817": {
      "docHash": "6zaaJ9yMQqOjudZQYxzeOYlg5D3iGirae39sNIXg0kA=",
      "refDocId": "docs/runbooks/manager_startup_checklist.md"
    },
    "c434ad91-f366-4102-b9ef-fc3a569abe39": {
      "docHash": "uYT30MOdLCTB/OmJC4DqgHhT0hyK3pufvcSlkqT74kQ=",
      "refDocId": "docs/runbooks/manager_startup_checklist.md"
    },
    "bf5b4100-d0c8-442c-ba7c-c4f1b3c7a008": {
      "docHash": "2JTzStxXEgNbsHJT3n0a/+BCBCSy7ToV604oQ5kAbpc=",
      "refDocId": "docs/runbooks/manager_startup_checklist.md"
    },
    "d0669369-57ee-4176-a379-beeb134f3d58": {
      "docHash": "pl8p2ouu/B76NbWITWS0Qq3jFPMLNiRVqwEoGJZ+i+s=",
      "refDocId": "docs/runbooks/production_deployment.md"
    },
    "678cc8e0-52a0-4762-865d-49b1a302a230": {
      "docHash": "8DTstr+KGG/wtU7LNXrcjVLcVwRNv6lkkfRjVLnU2oc=",
      "refDocId": "docs/runbooks/production_deployment.md"
    },
    "c72050c8-a303-4038-a688-e4d72346806c": {
      "docHash": "GDbwlx7hO4SvFVTGX6SOL/ke4K+LhxR8tMh/syr8hXU=",
      "refDocId": "docs/runbooks/production_deployment.md"
    },
    "68c9c87e-c905-42e0-82ee-adccf635e140": {
      "docHash": "XnnB/o3id7Ovy/eK1sNDny/kIlc2uVAkl5Fyt4/kTiU=",
      "refDocId": "docs/runbooks/secrets.md"
    },
    "61938827-bb9a-4a85-8107-da6627755b5b": {
      "docHash": "L90QGLCRZAzqMextNzP9PCLwBzbWcySkoKpAP7qO8qk=",
      "refDocId": "docs/runbooks/secrets.md"
    },
    "8c4d49e0-46aa-4c74-b8a2-fce8533cfd41": {
      "docHash": "xsHHeUv8FYO7SCmMQjWhpMeWtRKa3CENora9hjIFZms=",
      "refDocId": "docs/runbooks/secrets.md"
    },
    "233693f2-35f1-4bf9-bac0-58a66a1a1ec2": {
      "docHash": "LFa9c2ThWfz7yqABBvUouQ5KLm5NQdRiUQNwSzTOymY=",
      "refDocId": "docs/runbooks/secrets.md"
    },
    "e0196040-5993-4413-9e70-e1dc30d7c73b": {
      "docHash": "p1DLf9a5N5KhUriIT/1gF2o6jnfh/wWRE+QJq3uNPRE=",
      "refDocId": "docs/runbooks/support_webhooks.md"
    }
  },
  "docstore/ref_doc_info": {
    "docs/runbooks/agent_shutdown_checklist.md": {
      "nodeIds": ["649c2ff1-be0f-4011-837a-fbe2ea94cccb"],
      "extraInfo": {}
    },
    "docs/runbooks/agent_startup_checklist.md": {
      "nodeIds": ["d4e7af0b-1c0c-4200-a428-e062de08c2b5"],
      "extraInfo": {}
    },
    "docs/runbooks/ai_agent_review_checklist.md": {
      "nodeIds": ["8b4a851c-b77e-4ec3-9b29-2a398f124dcc"],
      "extraInfo": {}
    },
    "docs/runbooks/data_staging_apply.md": {
      "nodeIds": [
        "b0c8f97f-581b-423a-bc07-e6fff9dc0aa2",
        "8d0d6ab7-76c3-4282-80c5-8509a9d8c646",
        "409a4703-b0c2-40a5-af2d-2015297cbd61"
      ],
      "extraInfo": {}
    },
    "docs/runbooks/drift_checklist.md": {
      "nodeIds": ["d4ea0323-5088-4eb2-a19f-95026f126554"],
      "extraInfo": {}
    },
    "docs/runbooks/manager_emergency_startup.md": {
      "nodeIds": [
        "1abe4105-d906-4ae9-ad7f-74c2024505c7",
        "7177363e-8c44-4cdb-81c0-6374b9adcd79"
      ],
      "extraInfo": {}
    },
    "docs/runbooks/manager_shutdown_checklist.md": {
      "nodeIds": [
        "6c377b0d-ff6a-47c4-8bdd-f5f1662ba139",
        "6c22afeb-47ff-4430-a3f8-638924eab179"
      ],
      "extraInfo": {}
    },
    "docs/runbooks/manager_startup_checklist.md": {
      "nodeIds": [
        "41f4f356-ad7a-4edf-a039-92dde7260817",
        "c434ad91-f366-4102-b9ef-fc3a569abe39",
        "bf5b4100-d0c8-442c-ba7c-c4f1b3c7a008"
      ],
      "extraInfo": {}
    },
    "docs/runbooks/production_deployment.md": {
      "nodeIds": [
        "d0669369-57ee-4176-a379-beeb134f3d58",
        "678cc8e0-52a0-4762-865d-49b1a302a230",
        "c72050c8-a303-4038-a688-e4d72346806c"
      ],
      "extraInfo": {}
    },
    "docs/runbooks/secrets.md": {
      "nodeIds": [
        "68c9c87e-c905-42e0-82ee-adccf635e140",
        "61938827-bb9a-4a85-8107-da6627755b5b",
        "8c4d49e0-46aa-4c74-b8a2-fce8533cfd41",
        "233693f2-35f1-4bf9-bac0-58a66a1a1ec2"
      ],
      "extraInfo": {}
    },
    "docs/runbooks/support_webhooks.md": {
      "nodeIds": ["e0196040-5993-4413-9e70-e1dc30d7c73b"],
      "extraInfo": {}
    }
  }
}
