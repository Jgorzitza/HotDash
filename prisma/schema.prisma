// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "auth"]
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)

  @@schema("public")
}

model DashboardFact {
  id          Int      @id @default(autoincrement())
  shopDomain  String
  factType    String
  scope       String?
  value       Json
  metadata    Json?
  evidenceUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([shopDomain, factType])
  @@index([createdAt])
  @@schema("public")
}

model DecisionLog {
  id          Int      @id @default(autoincrement())
  scope       String
  actor       String
  action      String
  rationale   String?
  evidenceUrl String?
  shopDomain  String?
  externalRef String?
  payload     Json?
  createdAt   DateTime @default(now())

  @@index([scope, createdAt])
  @@schema("public")
}

model SalesPulseAction {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  actionType      String   @map("action_type")
  revenueVariance Decimal? @map("revenue_variance") @db.Decimal(12, 2)
  selectedAction  String?  @map("selected_action")
  notes           String?
  operatorName    String   @map("operator_name")
  metadata        Json     @default("{}")
  project         String   @default("occ")

  @@index([createdAt(sort: Desc)], map: "idx_sales_pulse_actions_created")
  @@index([actionType], map: "idx_sales_pulse_actions_type")
  @@index([project], map: "idx_sales_pulse_actions_project")
  @@map("sales_pulse_actions")
  @@schema("public")
}

model InventoryAction {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  actionType       String   @map("action_type")
  variantId        String?  @map("variant_id")
  sku              String?
  reorderQuantity  Int?     @map("reorder_quantity")
  vendorId         String?  @map("vendor_id") @db.Uuid
  velocityAnalysis String?  @map("velocity_analysis")
  operatorName     String   @map("operator_name")
  notes            String?
  metadata         Json     @default("{}")
  project          String   @default("occ")

  @@index([createdAt(sort: Desc)], map: "idx_inventory_actions_created")
  @@index([actionType], map: "idx_inventory_actions_type")
  @@index([variantId], map: "idx_inventory_actions_variant")
  @@index([project], map: "idx_inventory_actions_project")
  @@map("inventory_actions")
  @@schema("public")
}

model Notification {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  priority    String
  title       String
  message     String
  actionLabel String?   @map("action_label")
  actionUrl   String?   @map("action_url")
  readAt      DateTime? @map("read_at") @db.Timestamptz(6)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  project     String    @default("occ")

  @@index([userId], map: "idx_notifications_user")
  @@index([project], map: "idx_notifications_project")
  @@index([createdAt(sort: Desc)], map: "idx_notifications_created")
  @@map("notifications")
  @@schema("public")
}

model NotificationPreference {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId               String   @map("user_id") @db.Uuid
  browserNotifications Boolean  @default(false) @map("browser_notifications")
  soundEnabled         Boolean  @default(false) @map("sound_enabled")
  frequency            String   @default("realtime")
  queueWarnings        Boolean  @default(true) @map("queue_warnings")
  perfAlerts           Boolean  @default(true) @map("perf_alerts")
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  project              String   @default("occ")

  @@unique([userId, project])
  @@index([userId], map: "idx_notification_prefs_user")
  @@index([project], map: "idx_notification_prefs_project")
  @@map("notification_preferences")
  @@schema("public")
}

model UserPreference {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  tileOrder    String[] @default([]) @map("tile_order")
  visibleTiles String[] @default([]) @map("visible_tiles")
  defaultView  String   @default("grid") @map("default_view")
  theme        String   @default("auto")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  project      String   @default("occ")

  @@unique([userId, project])
  @@index([userId], map: "idx_user_preferences_user")
  @@index([project], map: "idx_user_preferences_project")
  @@map("user_preferences")
  @@schema("public")
}

model SocialPost {
  id           String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shopDomain   String            @map("shop_domain")
  platform     String
  status       String
  content      String
  mediaUrls    String[]          @default([]) @map("media_urls")
  scheduledAt  DateTime?         @map("scheduled_at") @db.Timestamptz(6)
  publishedAt  DateTime?         @map("published_at") @db.Timestamptz(6)
  publerPostId String?           @map("publer_post_id")
  createdBy    String            @map("created_by")
  createdAt    DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  metadata     Json              @default("{}")
  project      String            @default("occ")
  analytics    SocialAnalytics[]

  @@index([shopDomain, status, createdAt(sort: Desc)], map: "idx_social_posts_shop_status")
  @@index([platform], map: "idx_social_posts_platform")
  @@index([scheduledAt], map: "idx_social_posts_scheduled")
  @@index([project], map: "idx_social_posts_project")
  @@map("social_posts")
  @@schema("public")
}

// ============================================================================
// PHASE 7-8: GROWTH TABLES (Created 2025-10-21)
// ============================================================================

model SeoAudit {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shopDomain String   @map("shop_domain")
  crawledAt  DateTime @map("crawled_at") @db.Timestamptz(6)

  pagesCrawled    Int @map("pages_crawled")
  pagesWithIssues Int @map("pages_with_issues")
  totalIssues     Int @map("total_issues")

  avgLcp Decimal? @map("avg_lcp") @db.Decimal(8, 2)
  avgFid Decimal? @map("avg_fid") @db.Decimal(8, 2)
  avgCls Decimal? @map("avg_cls") @db.Decimal(5, 3)

  technicalScore   Int? @map("technical_score")
  contentScore     Int? @map("content_score")
  performanceScore Int? @map("performance_score")
  mobileScore      Int? @map("mobile_score")

  criticalIssues       Int @default(0) @map("critical_issues")
  highPriorityIssues   Int @default(0) @map("high_priority_issues")
  mediumPriorityIssues Int @default(0) @map("medium_priority_issues")
  lowPriorityIssues    Int @default(0) @map("low_priority_issues")

  auditProvider String? @map("audit_provider")
  auditUrl      String? @map("audit_url")
  metadata      Json    @default("{}")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  project   String   @default("occ")

  @@index([shopDomain, crawledAt(sort: Desc)], map: "idx_seo_audits_shop_crawled")
  @@index([project], map: "idx_seo_audits_project")
  @@map("seo_audits")
  @@schema("public")
}

model SeoRanking {
  id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shopDomain String @map("shop_domain")
  keyword    String

  position         Int?
  previousPosition Int? @map("previous_position")
  positionChange   Int? @map("position_change")

  searchVolume Int?    @map("search_volume")
  searchEngine String  @default("google") @map("search_engine")
  location     String?
  device       String?

  rankingUrl      String? @map("ranking_url")
  featuredSnippet Boolean @default(false) @map("featured_snippet")

  trackedAt DateTime @map("tracked_at") @db.Timestamptz(6)
  metadata  Json     @default("{}")
  project   String   @default("occ")

  @@index([shopDomain, keyword, trackedAt(sort: Desc)], map: "idx_seo_rankings_shop_keyword_tracked")
  @@index([keyword], map: "idx_seo_rankings_keyword")
  @@index([position], map: "idx_seo_rankings_position")
  @@index([project], map: "idx_seo_rankings_project")
  @@map("seo_rankings")
  @@schema("public")
}

model AdCampaign {
  id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shopDomain String @map("shop_domain")

  platformCampaignId String @map("platform_campaign_id")
  platform           String @default("google_ads")
  campaignName       String @map("campaign_name")
  campaignStatus     String @map("campaign_status")

  dailyBudget Decimal? @map("daily_budget") @db.Decimal(12, 2)
  totalBudget Decimal? @map("total_budget") @db.Decimal(12, 2)
  bidStrategy String?  @map("bid_strategy")

  startDate DateTime  @map("start_date") @db.Date
  endDate   DateTime? @map("end_date") @db.Date

  targetLocations String[] @default([]) @map("target_locations")
  targetKeywords  String[] @default([]) @map("target_keywords")

  createdBy String   @map("created_by")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  metadata Json   @default("{}")
  project  String @default("occ")

  performance AdPerformance[]

  @@index([shopDomain, campaignStatus], map: "idx_ad_campaigns_shop_status")
  @@index([platformCampaignId], map: "idx_ad_campaigns_platform_id")
  @@index([startDate, endDate], map: "idx_ad_campaigns_dates")
  @@index([project], map: "idx_ad_campaigns_project")
  @@map("ad_campaigns")
  @@schema("public")
}

model AdPerformance {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaignId String     @map("campaign_id") @db.Uuid
  campaign   AdCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  shopDomain String     @map("shop_domain")
  date       DateTime   @db.Date

  impressions Int @default(0)
  clicks      Int @default(0)
  conversions Int @default(0)

  cost    Decimal @default(0) @db.Decimal(12, 2)
  revenue Decimal @default(0) @db.Decimal(12, 2)

  ctr  Decimal? @db.Decimal(5, 2)
  cpc  Decimal? @db.Decimal(10, 2)
  cpa  Decimal? @db.Decimal(10, 2)
  roas Decimal? @db.Decimal(8, 2)

  avgPosition  Decimal? @map("avg_position") @db.Decimal(4, 2)
  qualityScore Decimal? @map("quality_score") @db.Decimal(3, 1)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  project   String   @default("occ")

  @@index([campaignId, date(sort: Desc)], map: "idx_ad_performance_campaign_date")
  @@index([shopDomain, date(sort: Desc)], map: "idx_ad_performance_shop_date")
  @@index([roas(sort: Desc)], map: "idx_ad_performance_roas")
  @@index([project], map: "idx_ad_performance_project")
  @@map("ad_performance")
  @@schema("public")
}

model SocialAnalytics {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  socialPostId String     @map("social_post_id") @db.Uuid
  socialPost   SocialPost @relation(fields: [socialPostId], references: [id], onDelete: Cascade)
  shopDomain   String     @map("shop_domain")
  platform     String

  views    Int @default(0)
  likes    Int @default(0)
  comments Int @default(0)
  shares   Int @default(0)
  saves    Int @default(0)

  reach       Int @default(0)
  impressions Int @default(0)

  linkClicks    Int @default(0) @map("link_clicks")
  profileVisits Int @default(0) @map("profile_visits")

  engagementRate Decimal? @map("engagement_rate") @db.Decimal(5, 2)

  videoViews   Int      @default(0) @map("video_views")
  avgWatchTime Decimal? @map("avg_watch_time") @db.Decimal(8, 2)

  measuredAt DateTime @map("measured_at") @db.Timestamptz(6)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  metadata Json   @default("{}")
  project  String @default("occ")

  @@index([socialPostId, measuredAt(sort: Desc)], map: "idx_social_analytics_post")
  @@index([shopDomain, platform, measuredAt(sort: Desc)], map: "idx_social_analytics_shop_platform")
  @@index([engagementRate(sort: Desc)], map: "idx_social_analytics_engagement")
  @@index([project], map: "idx_social_analytics_project")
  @@map("social_analytics")
  @@schema("public")
}

// ============================================================================
// PHASE 9: ONBOARDING TABLES (Created 2025-10-21)
// ============================================================================

model OnboardingProgress {
  id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String @map("user_id") @db.Uuid
  shopDomain String @map("shop_domain")

  stepKey      String @map("step_key")
  stepCategory String @map("step_category")
  stepOrder    Int    @map("step_order")

  status      String    @default("not_started")
  completedAt DateTime? @map("completed_at") @db.Timestamptz(6)
  skippedAt   DateTime? @map("skipped_at") @db.Timestamptz(6)

  attempts         Int @default(0)
  timeSpentSeconds Int @default(0) @map("time_spent_seconds")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  metadata Json   @default("{}")
  project  String @default("occ")

  @@unique([userId, shopDomain, stepKey])
  @@index([userId, shopDomain, stepOrder], map: "idx_onboarding_user_shop")
  @@index([status], map: "idx_onboarding_status")
  @@index([completedAt(sort: Desc)], map: "idx_onboarding_completed")
  @@index([project], map: "idx_onboarding_project")
  @@map("onboarding_progress")
  @@schema("public")
}

model FeatureTour {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String @map("user_id") @db.Uuid

  tourKey         String  @map("tour_key")
  tourName        String  @map("tour_name")
  tourDescription String? @map("tour_description")

  steps            Json
  triggerCondition String? @map("trigger_condition")

  status      String    @default("pending")
  startedAt   DateTime? @map("started_at") @db.Timestamptz(6)
  completedAt DateTime? @map("completed_at") @db.Timestamptz(6)
  dismissedAt DateTime? @map("dismissed_at") @db.Timestamptz(6)
  currentStep Int       @default(0) @map("current_step")

  timesShown   Int @default(0) @map("times_shown")
  interactions Int @default(0)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  metadata Json   @default("{}")
  project  String @default("occ")

  @@unique([userId, tourKey])
  @@index([userId, status], map: "idx_feature_tours_user_status")
  @@index([tourKey], map: "idx_feature_tours_key")
  @@index([completedAt(sort: Desc)], map: "idx_feature_tours_completed")
  @@index([project], map: "idx_feature_tours_project")
  @@map("feature_tours")
  @@schema("public")
}

// ============================================================================
// PHASE 10-13: ADVANCED TABLES (Created 2025-10-21)
// ============================================================================

model Experiment {
  id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shopDomain String @map("shop_domain")

  experimentKey  String  @map("experiment_key")
  experimentName String  @map("experiment_name")
  hypothesis     String?
  description    String?

  variants          Json
  trafficAllocation Decimal @default(100.00) @map("traffic_allocation") @db.Decimal(5, 2)

  status    String    @default("draft")
  startedAt DateTime? @map("started_at") @db.Timestamptz(6)
  endedAt   DateTime? @map("ended_at") @db.Timestamptz(6)

  primaryMetric    String?  @map("primary_metric")
  secondaryMetrics String[] @default([]) @map("secondary_metrics")

  targetSampleSize  Int? @map("target_sample_size")
  currentSampleSize Int  @default(0) @map("current_sample_size")

  winningVariant  String?  @map("winning_variant")
  confidenceLevel Decimal? @map("confidence_level") @db.Decimal(5, 2)

  createdBy String   @map("created_by")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  metadata Json   @default("{}")
  project  String @default("occ")

  results ExperimentResult[]

  @@unique([shopDomain, experimentKey])
  @@index([shopDomain, status], map: "idx_experiments_shop_status")
  @@index([experimentKey], map: "idx_experiments_key")
  @@index([startedAt, endedAt], map: "idx_experiments_dates")
  @@index([project], map: "idx_experiments_project")
  @@map("experiments")
  @@schema("public")
}

model ExperimentResult {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  experimentId String     @map("experiment_id") @db.Uuid
  experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  variantKey   String     @map("variant_key")

  participants Int @default(0)
  conversions  Int @default(0)

  conversionRate Decimal? @map("conversion_rate") @db.Decimal(6, 3)
  avgOrderValue  Decimal? @map("avg_order_value") @db.Decimal(12, 2)
  totalRevenue   Decimal? @map("total_revenue") @db.Decimal(12, 2)
  revenuePerUser Decimal? @map("revenue_per_user") @db.Decimal(12, 2)

  avgTimeOnSite Decimal? @map("avg_time_on_site") @db.Decimal(10, 2)
  bounceRate    Decimal? @map("bounce_rate") @db.Decimal(5, 2)
  pagesPerVisit Decimal? @map("pages_per_visit") @db.Decimal(5, 2)

  confidenceIntervalLower Decimal? @map("confidence_interval_lower") @db.Decimal(6, 3)
  confidenceIntervalUpper Decimal? @map("confidence_interval_upper") @db.Decimal(6, 3)
  pValue                  Decimal? @map("p_value") @db.Decimal(8, 6)

  measuredAt DateTime @map("measured_at") @db.Timestamptz(6)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  metadata Json   @default("{}")
  project  String @default("occ")

  @@index([experimentId, variantKey], map: "idx_experiment_results_experiment")
  @@index([conversionRate(sort: Desc)], map: "idx_experiment_results_conversion")
  @@index([measuredAt(sort: Desc)], map: "idx_experiment_results_measured")
  @@index([project], map: "idx_experiment_results_project")
  @@map("experiment_results")
  @@schema("public")
}

model KnowledgeBase {
  id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shopDomain String @map("shop_domain")

  documentKey  String @map("document_key")
  documentType String @map("document_type")
  title        String
  content      String

  // Note: Prisma doesn't natively support pgvector, use Unsupported type
  embedding Unsupported("vector(1536)")?

  sourceUrl String?  @map("source_url")
  tags      String[] @default([])
  category  String?

  version           Int             @default(1)
  isCurrent         Boolean         @default(true) @map("is_current")
  previousVersionId String?         @map("previous_version_id") @db.Uuid
  previousVersion   KnowledgeBase?  @relation("KnowledgeBaseVersions", fields: [previousVersionId], references: [id])
  nextVersions      KnowledgeBase[] @relation("KnowledgeBaseVersions")

  createdBy     String    @map("created_by")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  lastIndexedAt DateTime? @map("last_indexed_at") @db.Timestamptz(6)

  metadata Json   @default("{}")
  project  String @default("occ")

  @@unique([shopDomain, documentKey, version])
  @@index([shopDomain, documentType], map: "idx_knowledge_base_shop_type")
  @@index([isCurrent], map: "idx_knowledge_base_current")
  @@index([project], map: "idx_knowledge_base_project")
  @@map("knowledge_base")
  @@schema("public")
}

model CeoBriefing {
  id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shopDomain String @map("shop_domain")

  briefingType String   @map("briefing_type")
  periodStart  DateTime @map("period_start") @db.Date
  periodEnd    DateTime @map("period_end") @db.Date

  title            String
  executiveSummary String @map("executive_summary")
  keyMetrics       Json   @map("key_metrics")
  insights         Json
  recommendations  Json?

  status      String    @default("draft")
  generatedAt DateTime? @map("generated_at") @db.Timestamptz(6)
  reviewedAt  DateTime? @map("reviewed_at") @db.Timestamptz(6)
  reviewedBy  String?   @map("reviewed_by")

  generationModel  String? @map("generation_model")
  generationTokens Int?    @map("generation_tokens")
  generationTimeMs Int?    @map("generation_time_ms")

  rating        Int?
  feedbackNotes String? @map("feedback_notes")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  metadata Json   @default("{}")
  project  String @default("occ")

  @@index([shopDomain, briefingType, periodEnd(sort: Desc)], map: "idx_ceo_briefings_shop_type_period")
  @@index([status], map: "idx_ceo_briefings_status")
  @@index([generatedAt(sort: Desc)], map: "idx_ceo_briefings_generated")
  @@index([rating(sort: Desc)], map: "idx_ceo_briefings_rating")
  @@index([project], map: "idx_ceo_briefings_project")
  @@map("ceo_briefings")
  @@schema("public")
}

model Vendor {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  contactName       String?  @map("contact_name")
  contactEmail      String?  @map("contact_email")
  contactPhone      String?  @map("contact_phone")
  paymentTerms      String?  @map("payment_terms")
  leadTimeDays      Int      @default(14) @map("lead_time_days")
  shipMethod        String?  @map("ship_method")
  dropShip          Boolean  @default(false) @map("drop_ship")
  currency          String   @default("USD")
  reliabilityScore  Decimal? @map("reliability_score") @db.Decimal(5, 2)
  totalOrders       Int?     @default(0) @map("total_orders")
  onTimeDeliveries  Int?     @default(0) @map("on_time_deliveries")
  lateDeliveries    Int?     @default(0) @map("late_deliveries")
  isActive          Boolean  @default(true) @map("is_active")
  notes             String?
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  productMappings VendorProductMapping[]

  @@map("vendors")
  @@schema("public")
}

model VendorProductMapping {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vendorId           String   @map("vendor_id") @db.Uuid
  productId          String   @map("product_id")
  variantId          String   @map("variant_id")
  vendorSku          String   @map("vendor_sku")
  vendorProductName  String?  @map("vendor_product_name")
  costPerUnit        Decimal  @map("cost_per_unit") @db.Decimal(10, 2)
  minimumOrderQty    Int?     @default(1) @map("minimum_order_qty")
  isPreferred        Boolean  @default(false) @map("is_preferred")
  lastOrderedAt      DateTime? @map("last_ordered_at") @db.Timestamptz(6)
  notes              String?
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([vendorId, variantId])
  @@map("vendor_product_mappings")
  @@schema("public")
}

model PurchaseOrder {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  poNumber             String   @unique @map("po_number")
  vendorId             String   @map("vendor_id") @db.Uuid
  orderDate            DateTime @default(now()) @map("order_date") @db.Date
  expectedDeliveryDate DateTime @map("expected_delivery_date") @db.Date
  actualDeliveryDate   DateTime? @map("actual_delivery_date") @db.Date
  status               String   @default("pending")
  subtotal             Decimal? @db.Decimal(10, 2)
  freightCost          Decimal? @map("freight_cost") @db.Decimal(10, 2)
  dutyCost             Decimal? @map("duty_cost") @db.Decimal(10, 2)
  totalCost            Decimal? @map("total_cost") @db.Decimal(10, 2)
  onTime               Boolean? @map("on_time")
  daysLate             Int?     @map("days_late")
  notes                String?
  createdBy            String?  @map("created_by")
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  lineItems PurchaseOrderLineItem[]
  receipts  PurchaseOrderReceipt[]

  @@index([vendorId])
  @@index([status])
  @@index([orderDate(sort: Desc), expectedDeliveryDate(sort: Asc)])
  @@map("purchase_orders")
  @@schema("public")
}

model PurchaseOrderLineItem {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  poId          String   @map("po_id") @db.Uuid
  variantId     String   @map("variant_id")
  vendorSku     String   @map("vendor_sku")
  productName   String   @map("product_name")
  orderedQty    Int      @map("ordered_qty")
  receivedQty   Int      @default(0) @map("received_qty")
  costPerUnit   Decimal  @map("cost_per_unit") @db.Decimal(10, 2)
  weightPerUnit Decimal? @map("weight_per_unit") @db.Decimal(10, 4)
  lineTotal     Decimal? @map("line_total") @db.Decimal(10, 2)
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  purchaseOrder PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)
  receipts      PurchaseOrderReceipt[]

  @@index([poId])
  @@index([variantId])
  @@map("purchase_order_line_items")
  @@schema("public")
}

model PurchaseOrderReceipt {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  poId                  String   @map("po_id") @db.Uuid
  poLineItemId          String   @map("po_line_item_id") @db.Uuid
  receiptDate           DateTime @default(now()) @map("receipt_date") @db.Date
  qtyReceived           Int      @map("qty_received")
  vendorInvoiceAmount   Decimal  @map("vendor_invoice_amount") @db.Decimal(10, 2)
  allocatedFreight      Decimal  @default(0) @map("allocated_freight") @db.Decimal(10, 2)
  allocatedDuty         Decimal  @default(0) @map("allocated_duty") @db.Decimal(10, 2)
  totalReceiptCost      Decimal  @map("total_receipt_cost") @db.Decimal(10, 2)
  costPerUnit           Decimal  @map("cost_per_unit") @db.Decimal(10, 2)
  receivedBy            String?  @map("received_by")
  notes                 String?
  createdAt             DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  purchaseOrder PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)
  lineItem      PurchaseOrderLineItem @relation(fields: [poLineItemId], references: [id], onDelete: Cascade)
  costHistory   ProductCostHistory[]

  @@index([poId])
  @@index([poLineItemId])
  @@index([receiptDate(sort: Desc)])
  @@map("purchase_order_receipts")
  @@schema("public")
}

model ProductCostHistory {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  variantId           String   @map("variant_id")
  previousAlc         Decimal? @map("previous_alc") @db.Decimal(10, 2)
  newAlc              Decimal  @map("new_alc") @db.Decimal(10, 2)
  previousOnHand      Int?     @map("previous_on_hand")
  newOnHand           Int      @map("new_on_hand")
  receiptId           String?  @map("receipt_id") @db.Uuid
  receiptQty          Int      @map("receipt_qty")
  receiptCostPerUnit  Decimal  @map("receipt_cost_per_unit") @db.Decimal(10, 2)
  recordedAt          DateTime @default(now()) @map("recorded_at") @db.Timestamptz(6)

  receipt PurchaseOrderReceipt? @relation(fields: [receiptId], references: [id])

  @@index([variantId, recordedAt(sort: Desc)])
  @@index([receiptId])
  @@map("product_cost_history")
  @@schema("public")
}

model SeoSearchConsoleMetrics {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date                 DateTime  @db.Date
  periodDays           Int       @default(30) @map("period_days")
  clicks               Int       @default(0)
  impressions          Int       @default(0)
  ctr                  Decimal   @default(0) @db.Decimal(5, 4)
  position             Decimal   @default(0) @db.Decimal(5, 2)
  clicksChange7d       Decimal?  @map("clicks_change_7d") @db.Decimal(6, 2)
  impressionsChange7d  Decimal?  @map("impressions_change_7d") @db.Decimal(6, 2)
  ctrChange7d          Decimal?  @map("ctr_change_7d") @db.Decimal(6, 2)
  positionChange7d     Decimal?  @map("position_change_7d") @db.Decimal(6, 2)
  indexedPages         Int?      @map("indexed_pages")
  totalPages           Int?      @map("total_pages")
  coveragePct          Decimal?  @map("coverage_pct") @db.Decimal(5, 2)
  fetchedAt            DateTime  @default(now()) @map("fetched_at") @db.Timestamptz(6)
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  @@unique([date, periodDays])
  @@index([date(sort: Desc)])
  @@index([periodDays, date(sort: Desc)])
  @@map("seo_search_console_metrics")
  @@schema("public")
}

model SeoSearchQuery {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date        DateTime  @db.Date
  periodDays  Int       @default(30) @map("period_days")
  query       String
  clicks      Int       @default(0)
  impressions Int       @default(0)
  ctr         Decimal   @default(0) @db.Decimal(5, 4)
  position    Decimal   @default(0) @db.Decimal(5, 2)
  rank        Int
  fetchedAt   DateTime  @default(now()) @map("fetched_at") @db.Timestamptz(6)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  @@unique([date, periodDays, query])
  @@index([date(sort: Desc)])
  @@index([periodDays, date(sort: Desc)])
  @@index([date(sort: Desc), rank(sort: Asc)])
  @@map("seo_search_queries")
  @@schema("public")
}

model SeoLandingPage {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date            DateTime  @db.Date
  periodDays      Int       @default(30) @map("period_days")
  url             String
  clicks          Int       @default(0)
  impressions     Int       @default(0)
  ctr             Decimal   @default(0) @db.Decimal(5, 4)
  position        Decimal   @default(0) @db.Decimal(5, 2)
  clicksChange7d  Decimal?  @map("clicks_change_7d") @db.Decimal(6, 2)
  rank            Int
  fetchedAt       DateTime  @default(now()) @map("fetched_at") @db.Timestamptz(6)
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  @@unique([date, periodDays, url])
  @@index([date(sort: Desc)])
  @@index([periodDays, date(sort: Desc)])
  @@index([date(sort: Desc), rank(sort: Asc)])
  @@index([url, date(sort: Desc)])
  @@map("seo_landing_pages")
  @@schema("public")
}
