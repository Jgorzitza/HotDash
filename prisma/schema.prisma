// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

model DecisionLog {
  id          Int      @id @default(autoincrement())
  scope       String
  actor       String
  action      String
  rationale   String?
  evidenceUrl String?
  shopDomain  String?
  externalRef String?
  payload     Json?
  createdAt   DateTime @default(now())

  // Enhanced feedback tracking fields (added 2025-10-22)
  taskId              String?  @map("taskId")
  status              String?  @map("status")
  progressPct         Int?     @map("progressPct")
  blockerDetails      String?  @map("blockerDetails")
  blockedBy           String?  @map("blockedBy")
  durationEstimate    Decimal? @map("durationEstimate") @db.Decimal(5, 2)
  durationActual      Decimal? @map("durationActual") @db.Decimal(5, 2)
  nextAction          String?  @map("nextAction")

  @@index([scope, createdAt])
  @@index([actor, status, createdAt])
  @@index([taskId])
  @@index([status, createdAt])
  @@schema("public")
}

model TaskAssignment {
  id          Int      @id @default(autoincrement())
  
  // Assignment metadata
  assignedBy  String   // 'manager'
  assignedTo  String   // 'engineer', 'data', etc.
  taskId      String   @unique // 'ENG-029', 'DATA-017', etc.
  
  // Task details
  title       String
  description String   @db.Text
  acceptanceCriteria Json  // Array of criteria strings
  allowedPaths Json        // Array of path patterns
  
  // Priority & sizing
  priority    String   // 'P0', 'P1', 'P2', 'P3'
  phase       String?  // 'Phase 9', 'Phase 10', etc.
  estimatedHours Decimal? @db.Decimal(5, 2)
  
  // Dependencies & blocking
  dependencies Json?   // Array of taskIds this task depends on
  blocks      Json?    // Array of taskIds blocked by this task
  
  // Status & lifecycle
  status      String   // 'assigned', 'in_progress', 'completed', 'blocked', 'cancelled'
  assignedAt  DateTime @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  cancelledAt DateTime?
  
  // Context preservation
  completionNotes String? @db.Text  // Preserve context when marking complete
  cancellationReason String? @db.Text
  
  // Evidence & artifacts
  evidenceUrl String?
  issueUrl    String?  // GitHub issue URL
  prUrl       String?  // GitHub PR URL
  
  // Metadata
  payload     Json?    // Flexible field for additional context
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([assignedTo, status, priority])
  @@index([status, priority])
  @@index([assignedBy, assignedAt])
  @@index([phase, status])
  @@schema("public")
}

model SeoAudit {
  id          Int      @id @default(autoincrement())
  shopDomain  String
  auditType   String   // 'daily', 'manual', 'scheduled'
  status      String   // 'running', 'completed', 'failed'
  startedAt   DateTime @default(now())
  completedAt DateTime?
  totalPages  Int      @default(0)
  totalIssues Int      @default(0)
  criticalIssues Int   @default(0)
  warningIssues  Int    @default(0)
  infoIssues    Int    @default(0)
  pagesWithIssues Int  @default(0)
  durationMs  Int?     // Duration in milliseconds
  errorMessage String? // If status is 'failed'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  pages SeoAuditPage[]
  
  @@index([shopDomain, createdAt])
  @@index([status, startedAt])
  @@schema("public")
}

model SeoAuditPage {
  id          Int      @id @default(autoincrement())
  auditId     Int
  url         String
  title       String?
  titleLength Int      @default(0)
  metaDescription String?
  metaLength  Int      @default(0)
  h1Count     Int      @default(0)
  h1Text      String[] // Array of H1 text content
  imageCount  Int      @default(0)
  imagesWithoutAlt Int @default(0)
  issuesCount Int      @default(0)
  auditedAt   DateTime @default(now())
  
  // Relations
  audit SeoAudit @relation(fields: [auditId], references: [id], onDelete: Cascade)
  issues SeoAuditIssue[]
  
  @@index([auditId, url])
  @@index([issuesCount])
  @@schema("public")
}

model SeoAuditIssue {
  id          Int      @id @default(autoincrement())
  pageId      Int
  type        String   // 'missing_title', 'title_too_long', etc.
  severity    String   // 'critical', 'warning', 'info'
  element     String?  // 'title', 'meta description', 'h1', etc.
  currentValue String? // Current value if applicable
  recommendedValue String? // Recommended fix
  description String
  createdAt   DateTime @default(now())
  
  // Relations
  page SeoAuditPage @relation(fields: [pageId], references: [id], onDelete: Cascade)
  
  @@index([pageId, severity])
  @@index([type, severity])
  @@schema("public")
}
