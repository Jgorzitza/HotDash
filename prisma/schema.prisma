// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model DashboardFact {
  id          Int      @id @default(autoincrement())
  shopDomain  String
  factType    String
  scope       String?
  value       Json
  metadata    Json?
  evidenceUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([shopDomain, factType])
  @@index([createdAt])
}

model DecisionLog {
  id          Int      @id @default(autoincrement())
  scope       String
  actor       String
  action      String
  rationale   String?
  evidenceUrl String?
  shopDomain  String?
  externalRef String?
  payload     Json?
  createdAt   DateTime @default(now())

  @@index([scope, createdAt])
}

// Agent SDK Tables - For approval queue and training data
model AgentApproval {
  id                  String   @id @default(uuid())
  conversationId      BigInt
  serialized          Json
  lastInterruptions   Json?
  createdAt           DateTime @default(now())
  approvedBy          String?
  status              String   @default("pending") // pending, approved, rejected
  shopDomain          String?

  @@index([conversationId])
  @@index([createdAt])
  @@index([status])
}

model AgentFeedback {
  id             String   @id @default(uuid())
  conversationId BigInt
  inputText      String
  modelDraft     String
  safeToSend     Boolean  @default(true)
  labels         Json?
  rubric         Json?
  annotator      String?
  notes          String?
  meta           Json?
  createdAt      DateTime @default(now())
  shopDomain     String?

  @@index([conversationId])
  @@index([createdAt])
  @@index([safeToSend])
}

model AgentQuery {
  id             String   @id @default(uuid())
  query          String
  result         Json?
  conversationId BigInt?
  agent          String
  approved       Boolean  @default(false)
  humanEdited    Boolean  @default(false)
  latencyMs      Int?
  createdAt      DateTime @default(now())
  shopDomain     String?

  @@index([conversationId])
  @@index([createdAt])
  @@index([agent])
  @@index([approved])
}
