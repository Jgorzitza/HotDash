name: Dev MCP Ban - Production Safety

on:
  pull_request:
    branches: [main, agent-launch-20251024]
  push:
    branches: [main, agent-launch-20251024]

jobs:
  dev-mcp-ban:
    name: Enforce Dev MCP Ban
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Compute a sane diff for both PRs and pushes
      - name: Determine changed source files
        id: diff
        shell: bash
        run: |
          set -euo pipefail

          EVENT_NAME="${{ github.event_name }}"
          if [[ "$EVENT_NAME" == "pull_request" ]]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.sha }}"
          else
            # push
            BASE_SHA="${{ github.event.before }}"
            HEAD_SHA="${{ github.sha }}"
          fi

          # Ensure SHAs exist (avoid empty fetch targets)
          if [[ -z "${BASE_SHA}" || -z "${HEAD_SHA}" ]]; then
            echo "count=0" >> "$GITHUB_OUTPUT"
            printf "" > changed-ts.txt
            exit 0
          fi

          git fetch --no-tags --depth=200 origin "${BASE_SHA}" || true

          git diff --name-only "${BASE_SHA}" "${HEAD_SHA}" > changed.txt
          # Always create the TS list file, even if empty
          grep -E '\.(ts|tsx)$' changed.txt > changed-ts.txt || true

          count="$(wc -l < changed-ts.txt | tr -d ' ')"
          echo "count=${count}" >> "$GITHUB_OUTPUT"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for Dev MCP imports in production code
        if: ${{ steps.diff.outputs.count != '0' }}
        shell: bash
        run: |
          set -euo pipefail

          # Exclude known non-enforceable paths
          RAW="$(grep -Ev '^(app/services/growth-engine-support\.server\.ts|app/services/__tests__/growth-engine-support\.test\.ts)$' changed-ts.txt || true)"

          # Filter to files that still exist
          mapfile -t EXISTING < <(while IFS= read -r file; do
            [[ -n "$file" && -f "$file" ]] && echo "$file"
          done <<< "$RAW")

          if [[ ${#EXISTING[@]} -eq 0 ]]; then
            echo "✅ No enforceable TypeScript files changed; skipping Dev MCP scan"
            exit 0
          fi

          echo "🔍 Checking for Dev MCP imports in production code..."
          printf '• %s\n' "${EXISTING[@]}"

          MATCHES="$(grep -inE 'mcp.*dev|dev.*mcp' "${EXISTING[@]}" 2>/dev/null || true)"
          if [[ -n "$MATCHES" ]]; then
            echo "$MATCHES"
            echo "❌ Dev MCP imports detected in production code"
            echo "Dev MCP is for development/staging ONLY"
            echo "Production builds MUST FAIL if Dev MCP detected"
            echo ""
            echo "Allowed locations for Dev MCP:"
            echo "- scripts/ (non-runtime dev scripts)"
            echo "- tests/ (test utilities)"
            echo "- .cursor/ (Cursor IDE config)"
            echo "- docs/ (documentation)"
            echo ""
            echo "FORBIDDEN in production code:"
            echo "- app/ directory (runtime bundles)"
            echo ""
            echo "Please remove Dev MCP imports from app/ directory"
            exit 1
          fi

          echo "✅ No Dev MCP imports found in production code"

      - name: Skip scan (no applicable files)
        if: ${{ steps.diff.outputs.count == '0' }}
        run: |
          echo "✅ No TypeScript changes detected; skipping Dev MCP enforcement for this run"

      # PR-body check ONLY on pull_request events (pushes have no PR body)
      - name: Check PR body for Dev MCP Check section
        if: ${{ github.event_name == 'pull_request' }}
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
        shell: bash
        run: |
          set -euo pipefail
          cat > check_pr_body.py <<'PY'
import os
import re
import sys

body = os.environ.get("PR_BODY", "") or ""

if not re.search(r"^## Dev MCP Check", body, re.MULTILINE):
    sys.stderr.write("❌ PR body missing '## Dev MCP Check' section\n")
    sys.stderr.write("Required block including verification checklist is missing.\n")
    sys.exit(1)

if not re.search(r"Verified:\s*No[^\n]*(?:mcp.*dev|dev.*mcp)", body, re.IGNORECASE):
    sys.stderr.write("❌ Dev MCP Check section does not indicate verification\n")
    sys.stderr.write("Must include a line such as 'Verified: No mcp.*dev or dev.*mcp imports in app/ (searched with grep)'.\n")
    sys.exit(1)

print("✅ Dev MCP Check section validation passed")
PY
          python3 check_pr_body.py

      - name: Report results
        run: |
          echo "✅ Dev MCP Ban validation completed successfully"
          echo "No Dev MCP imports found in production code"
          echo "Production safety maintained"
