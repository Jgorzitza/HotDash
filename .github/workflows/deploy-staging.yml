name: Deploy Staging

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Context for this staging deployment'
        required: false
        type: string
  push:
    branches:
      - main
    paths:
      - 'app/**'
      - 'packages/**'
      - 'scripts/**'
      - 'shopify.*'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/deploy-staging.yml'

concurrency:
  group: deploy-staging
  cancel-in-progress: false

permissions:
  contents: read
  id-token: write

jobs:
  verify:
    runs-on: ubuntu-latest
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Typecheck
        run: npm run typecheck

      - name: Lint
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit

      - name: Run Playwright tests
        run: npm run test:e2e

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ github.run_number }}
          path: coverage/playwright
          retention-days: 14

  deploy:
    runs-on: ubuntu-latest
    needs: verify
    environment:
      name: staging
      url: ${{ steps.envmeta.outputs.app_url }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build application bundle
        run: npm run build

      - name: Capture environment metadata
        id: envmeta
        run: echo "app_url=$STAGING_APP_URL" >> "$GITHUB_OUTPUT"
        env:
          STAGING_APP_URL: ${{ secrets.STAGING_APP_URL }}

      - name: Deploy to Shopify staging
        id: deploy
        run: bash scripts/deploy/staging-deploy.sh
        env:
          SHOPIFY_CLI_AUTH_TOKEN: ${{ secrets.SHOPIFY_CLI_AUTH_TOKEN_STAGING }}
          SHOPIFY_API_KEY: ${{ secrets.SHOPIFY_API_KEY_STAGING }}
          SHOPIFY_API_SECRET: ${{ secrets.SHOPIFY_API_SECRET_STAGING }}
          STAGING_SHOP_DOMAIN: ${{ secrets.STAGING_SHOP_DOMAIN }}
          STAGING_APP_URL: ${{ secrets.STAGING_APP_URL }}
          STAGING_SMOKE_TEST_URL: ${{ secrets.STAGING_SMOKE_TEST_URL }}

      - name: Health check
        id: health_check
        run: |
          echo "Performing health check on staging..."
          MAX_RETRIES=5
          RETRY_DELAY=10
          
          for i in $(seq 1 $MAX_RETRIES); do
            if curl -f -s --max-time 10 ${{ secrets.STAGING_APP_URL }}/health > /dev/null 2>&1; then
              echo "Health check passed on attempt $i"
              exit 0
            fi
            echo "Health check failed on attempt $i, retrying in ${RETRY_DELAY}s..."
            sleep $RETRY_DELAY
          done
          
          echo "::error::Health check failed after $MAX_RETRIES attempts"
          exit 1

      - name: Run smoke tests
        id: smoke_test
        run: bash scripts/deploy/automated-smoke-test.sh
        env:
          TARGET_URL: ${{ secrets.STAGING_SMOKE_TEST_URL }}

      - name: Run Lighthouse audit (staging)
        env:
          LIGHTHOUSE_TARGET: ${{ secrets.STAGING_SMOKE_TEST_URL }}
        run: npm run test:lighthouse

      - name: Upload deployment artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: staging-deploy-${{ github.run_number }}
          path: |
            artifacts/deploy
            coverage/lighthouse
          retention-days: 14

  rollback_on_failure:
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    steps:
      - uses: actions/checkout@v4

      - name: Trigger rollback
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'rollback-deployment.yml',
              ref: 'main',
              inputs: {
                environment: 'staging',
                reason: `Auto-rollback: Staging deployment ${context.runId} failed health check or smoke tests`
              }
            });
            
            console.log('Rollback workflow triggered for failed staging deployment');

      - name: Create rollback alert
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš¨ Auto-Rollback Triggered: Staging Deployment Failed`,
              body: `Staging deployment failed and auto-rollback was triggered.\n\n**Failed Deployment**: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}\n\n**Reason**: Health check or smoke test failure\n\n**Action Required**: Review deployment logs and fix issues before next deploy.`,
              labels: ['deployment', 'rollback', 'staging', 'automated']
            })
