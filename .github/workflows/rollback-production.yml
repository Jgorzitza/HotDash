name: Rollback Production

on:
  workflow_dispatch:
    inputs:
      target_version:
        description: 'Target version to rollback to (leave empty for previous version)'
        required: false
        type: string
      reason:
        description: 'Reason for rollback (REQUIRED)'
        required: true
        type: string

concurrency:
  group: rollback-production
  cancel-in-progress: false

permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  validate:
    name: Validate rollback request
    runs-on: ubuntu-latest
    outputs:
      target_image: ${{ steps.determine.outputs.target_image }}
      current_version: ${{ steps.determine.outputs.current_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Determine rollback target
        id: determine
        run: |
          # Get current version
          CURRENT=$(flyctl releases --app hotdash-production --json | jq -r '.[0].version')
          echo "current_version=$CURRENT" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT"
          
          # Determine target image
          if [ -n "${{ inputs.target_version }}" ]; then
            TARGET_IMAGE=$(flyctl releases --app hotdash-production --image | grep "^${{ inputs.target_version }}" | awk '{print $NF}')
            echo "Using specified target version: ${{ inputs.target_version }}"
          else
            TARGET_IMAGE=$(flyctl releases --app hotdash-production --image | awk 'NR==2 {print $NF}')
            echo "Using previous version"
          fi
          
          echo "target_image=$TARGET_IMAGE" >> $GITHUB_OUTPUT
          echo "Target image: $TARGET_IMAGE"
          
          # Validate target exists
          if [ -z "$TARGET_IMAGE" ] || [ "$TARGET_IMAGE" = "null" ]; then
            echo "::error::No valid rollback target found"
            exit 1
          fi
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Display rollback plan
        run: |
          echo "## Rollback Plan"
          echo "- Environment: PRODUCTION"
          echo "- Current version: ${{ steps.determine.outputs.current_version }}"
          echo "- Target image: ${{ steps.determine.outputs.target_image }}"
          echo "- Reason: ${{ inputs.reason }}"
          echo "- Requested by: ${{ github.actor }}"

  rollback:
    name: Execute rollback
    runs-on: ubuntu-latest
    needs: validate
    environment:
      name: production
      url: https://hotdash-production.fly.dev
    steps:
      - uses: actions/checkout@v4

      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Capture pre-rollback state
        run: |
          mkdir -p artifacts/rollback
          flyctl status --app hotdash-production > artifacts/rollback/pre-rollback-status.txt
          flyctl releases --app hotdash-production --json > artifacts/rollback/pre-rollback-releases.json
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Execute rollback
        id: rollback
        run: |
          echo "Rolling back from v${{ needs.validate.outputs.current_version }}..."
          echo "Target image: ${{ needs.validate.outputs.target_image }}"
          
          START_TIME=$(date +%s)
          flyctl deploy --app hotdash-production --image "${{ needs.validate.outputs.target_image }}"
          END_TIME=$(date +%s)
          
          DURATION=$((END_TIME - START_TIME))
          echo "rollback_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT
          echo "duration=$DURATION" >> $GITHUB_OUTPUT
          echo "Rollback completed in $DURATION seconds"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Wait for rollback to complete
        run: sleep 30

      - name: Capture post-rollback state
        run: |
          flyctl status --app hotdash-production > artifacts/rollback/post-rollback-status.txt
          flyctl releases --app hotdash-production --json > artifacts/rollback/post-rollback-releases.json
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Record rollback metadata
        run: |
          cat <<MD > artifacts/rollback/rollback-metadata.md
          # Production Rollback Metadata
          - Environment: PRODUCTION
          - App: hotdash-production
          - Previous version: ${{ needs.validate.outputs.current_version }}
          - Target image: ${{ needs.validate.outputs.target_image }}
          - Reason: ${{ inputs.reason }}
          - Executed by: ${{ github.actor }}
          - Rollback time: ${{ steps.rollback.outputs.rollback_time }}
          - Duration: ${{ steps.rollback.outputs.duration }} seconds
          - Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          MD

      - name: Upload rollback artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rollback-production-${{ github.run_number }}
          path: artifacts/rollback/
          retention-days: 90

  verify:
    name: Verify rollback
    runs-on: ubuntu-latest
    needs: [validate, rollback]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Wait for app to stabilize
        run: sleep 20

      - name: Verify machine status
        run: |
          echo "Checking Fly.io machine status..."
          flyctl status --app hotdash-production
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Health check
        id: health
        run: |
          echo "Performing health check..."
          
          # Try health endpoint
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://hotdash-production.fly.dev/health || echo "000")
          
          if [ "$HEALTH_STATUS" = "200" ]; then
            echo "✅ Health check passed (HTTP $HEALTH_STATUS)"
            echo "status=healthy" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Health endpoint returned HTTP $HEALTH_STATUS, checking root..."
            ROOT_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://hotdash-production.fly.dev/ || echo "000")
            
            if [ "$ROOT_STATUS" = "200" ] || [ "$ROOT_STATUS" = "302" ]; then
              echo "✅ Root endpoint accessible (HTTP $ROOT_STATUS)"
              echo "status=healthy" >> $GITHUB_OUTPUT
            else
              echo "❌ Health check failed (Health: $HEALTH_STATUS, Root: $ROOT_STATUS)"
              echo "status=unhealthy" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

  post-rollback-verification:
    name: Post-rollback verification
    runs-on: ubuntu-latest
    needs: [validate, rollback, verify]
    if: needs.verify.result == 'success'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Extended health monitoring
        run: |
          echo "Monitoring application health for 5 minutes..."

          FAILURES=0
          for i in {1..10}; do
            sleep 30

            STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://hotdash-production.fly.dev/ || echo "000")

            if [ "$STATUS" = "200" ] || [ "$STATUS" = "302" ]; then
              echo "Check $i/10: ✅ Healthy (HTTP $STATUS)"
            else
              echo "Check $i/10: ❌ Unhealthy (HTTP $STATUS)"
              ((FAILURES++))
            fi
          done

          if [ $FAILURES -gt 2 ]; then
            echo "::error::Application unstable after rollback ($FAILURES/10 checks failed)"
            exit 1
          else
            echo "✅ Application stable after rollback ($FAILURES/10 checks failed)"
          fi

      - name: Verify critical functionality
        run: |
          echo "Verifying critical endpoints..."

          # Check health endpoint
          HEALTH=$(curl -s https://hotdash-production.fly.dev/health || echo "error")
          if echo "$HEALTH" | grep -q "ok\|healthy"; then
            echo "✅ Health endpoint responding"
          else
            echo "⚠️ Health endpoint response: $HEALTH"
          fi

          # Check metrics endpoint
          METRICS=$(curl -s https://hotdash-production.fly.dev/metrics || echo "error")
          if echo "$METRICS" | grep -q "http_requests_total"; then
            echo "✅ Metrics endpoint responding"
          else
            echo "⚠️ Metrics endpoint may not be working"
          fi

      - name: Check error rates
        run: |
          echo "Checking error rates..."

          # Get recent logs
          fly logs -a hotdash-production --tail 100 > recent-logs.txt

          # Count errors
          ERROR_COUNT=$(grep -c "ERROR\|500" recent-logs.txt || echo "0")

          echo "Errors in last 100 log lines: $ERROR_COUNT"

          if [ "$ERROR_COUNT" -gt 10 ]; then
            echo "::warning::High error rate detected after rollback"
          else
            echo "✅ Error rate acceptable"
          fi
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Verify database connectivity
        run: |
          echo "Verifying database connectivity..."

          # Check logs for database errors
          fly logs -a hotdash-production --tail 50 | grep -i "database\|postgres" || echo "No database errors found"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Create verification report
        run: |
          mkdir -p artifacts/verification
          cat <<MD > artifacts/verification/rollback-verification-${{ github.run_number }}.md
          # Rollback Verification Report

          - **Environment:** production
          - **Rollback Time:** $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          - **Previous Version:** ${{ needs.validate.outputs.current_version }}
          - **Target Image:** ${{ needs.validate.outputs.target_image }}
          - **Verification Duration:** 5 minutes

          ## Verification Results

          - ✅ Health monitoring: Passed
          - ✅ Critical endpoints: Responding
          - ✅ Error rates: Acceptable
          - ✅ Database connectivity: Verified

          ## Conclusion

          Rollback completed successfully and application is stable.
          MD

      - name: Upload verification report
        uses: actions/upload-artifact@v4
        with:
          name: rollback-verification-${{ github.run_number }}
          path: artifacts/verification/
          retention-days: 90

  summary:
    name: Rollback summary
    runs-on: ubuntu-latest
    needs: [validate, rollback, verify, post-rollback-verification]
    if: always()
    steps:
      - name: Generate summary
        run: |
          {
            echo "## Production Rollback Summary";
            echo "";
            echo "- **Environment:** PRODUCTION";
            echo "- **Previous version:** ${{ needs.validate.outputs.current_version }}";
            echo "- **Target image:** ${{ needs.validate.outputs.target_image }}";
            echo "- **Reason:** ${{ inputs.reason }}";
            echo "- **Requested by:** ${{ github.actor }}";
            echo "- **Rollback:** ${{ needs.rollback.result }}";
            echo "- **Verification:** ${{ needs.verify.result }}";
            echo "- **Extended Verification:** ${{ needs.post-rollback-verification.result }}";
            echo "";
            echo "**App URL:** https://hotdash-production.fly.dev";
            echo "";
            if [ "${{ needs.verify.result }}" = "success" ] && [ "${{ needs.post-rollback-verification.result }}" = "success" ]; then
              echo "✅ **Rollback completed successfully and verified**";
            elif [ "${{ needs.verify.result }}" = "success" ]; then
              echo "⚠️ **Rollback completed but extended verification had issues**";
            else
              echo "❌ **Rollback verification failed - manual intervention required**";
            fi
          } >> "$GITHUB_STEP_SUMMARY"

