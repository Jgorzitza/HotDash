#!/usr/bin/env node
/**
 * Purchase Order Generation Script
 *
 * Generates CSV files for products below ROP that need reordering.
 * Usage: node scripts/inventory/generate-po.mjs [--output=po.csv] [--min-qty=10]
 */

import { writeFileSync } from "fs";
import { join } from "path";

/**
 * Generate CSV content for purchase order
 *
 * @param {Array} items - Items needing reorder
 * @returns {string} CSV content
 */
export function generatePOCSV(items) {
  const headers = [
    "SKU",
    "Product",
    "Variant",
    "Current Qty",
    "ROP",
    "Safety Stock",
    "Order Qty",
    "Supplier",
    "Unit Cost",
    "Total Cost",
    "Priority",
  ];

  const rows = items.map((item) => [
    item.sku || "N/A",
    quote(item.productTitle),
    quote(item.variantTitle),
    item.currentQty,
    item.reorderPoint,
    item.safetyStock,
    item.orderQuantity,
    quote(item.supplier || "TBD"),
    item.unitCost ? item.unitCost.toFixed(2) : "0.00",
    item.orderQuantity * (item.unitCost || 0),
    item.priority || "medium",
  ]);

  return [headers.join(","), ...rows.map((row) => row.join(","))].join("\n");
}

/**
 * Quote CSV field if contains comma, quote, or newline
 */
function quote(value) {
  if (
    typeof value === "string" &&
    (value.includes(",") || value.includes('"') || value.includes("\n"))
  ) {
    return `"${value.replace(/"/g, '""')}"`;
  }
  return value;
}

/**
 * Filter items by priority
 *
 * @param {Array} items - All items
 * @param {string} minPriority - Minimum priority level (low, medium, high, critical)
 * @returns {Array} Filtered items
 */
export function filterByPriority(items, minPriority = "medium") {
  const priorityOrder = ["low", "medium", "high", "critical"];
  const minIndex = priorityOrder.indexOf(minPriority);

  return items.filter((item) => {
    const itemIndex = priorityOrder.indexOf(item.priority || "medium");
    return itemIndex >= minIndex;
  });
}

/**
 * Group items by supplier
 *
 * @param {Array} items - Items to group
 * @returns {Object} Items grouped by supplier
 */
export function groupBySupplier(items) {
  const grouped = {};

  for (const item of items) {
    const supplier = item.supplier || "Unknown";
    if (!grouped[supplier]) {
      grouped[supplier] = [];
    }
    grouped[supplier].push(item);
  }

  return grouped;
}

/**
 * Calculate PO totals
 *
 * @param {Array} items - Items in PO
 * @returns {Object} Summary totals
 */
export function calculatePOTotals(items) {
  const totalItems = items.length;
  const totalUnits = items.reduce((sum, item) => sum + item.orderQuantity, 0);
  const totalCost = items.reduce(
    (sum, item) => sum + item.orderQuantity * (item.unitCost || 0),
    0,
  );

  const byCriticality = {
    critical: items.filter((i) => i.priority === "critical").length,
    high: items.filter((i) => i.priority === "high").length,
    medium: items.filter((i) => i.priority === "medium").length,
    low: items.filter((i) => i.priority === "low").length,
  };

  return {
    totalItems,
    totalUnits,
    totalCost: totalCost.toFixed(2),
    byCriticality,
  };
}

/**
 * Save PO CSV to file
 *
 * @param {string} csv - CSV content
 * @param {string} filename - Output filename
 * @returns {string} Full path to saved file
 */
export function savePOCSV(csv, filename = "purchase-order.csv") {
  const outputPath = join(process.cwd(), filename);
  writeFileSync(outputPath, csv, "utf-8");
  return outputPath;
}

/**
 * Generate email body for PO
 *
 * @param {Array} items - Items in PO
 * @param {Object} totals - PO totals
 * @returns {string} Email body text
 */
export function generatePOEmailBody(items, totals) {
  const date = new Date().toISOString().split("T")[0];

  return `
Purchase Order Request - ${date}

Summary:
- Total Items: ${totals.totalItems}
- Total Units to Order: ${totals.totalUnits}
- Estimated Cost: $${totals.totalCost}

Priority Breakdown:
- Critical: ${totals.byCriticality.critical} items
- High: ${totals.byCriticality.high} items  
- Medium: ${totals.byCriticality.medium} items
- Low: ${totals.byCriticality.low} items

Items below reorder point:
${items
  .slice(0, 10)
  .map(
    (item) =>
      `- ${item.productTitle} (${item.variantTitle}): Order ${item.orderQuantity} units [${item.priority?.toUpperCase()}]`,
  )
  .join("\n")}
${items.length > 10 ? `\n... and ${items.length - 10} more items` : ""}

Please see attached CSV for complete purchase order details.

Generated by Hot Rod AN Inventory System
`.trim();
}

// CLI execution
if (import.meta.url === `file://${process.argv[1]}`) {
  // Example usage with mock data
  const mockItems = [
    {
      sku: "JAL-001",
      productTitle: "Jalapeño Salsa",
      variantTitle: "8oz",
      currentQty: 15,
      reorderPoint: 100,
      safetyStock: 30,
      orderQuantity: 115,
      supplier: "Hot Stuff Inc",
      unitCost: 3.5,
      priority: "critical",
    },
    {
      sku: "HSVP-12",
      productTitle: "Hot Sauce Variety Pack",
      variantTitle: "12-pack",
      currentQty: 25,
      reorderPoint: 60,
      safetyStock: 20,
      orderQuantity: 55,
      supplier: "Hot Stuff Inc",
      unitCost: 24.0,
      priority: "high",
    },
  ];

  const csv = generatePOCSV(mockItems);
  const filename = process.argv[2]?.replace("--output=", "") || "po-example.csv";
  const path = savePOCSV(csv, filename);

  const totals = calculatePOTotals(mockItems);
  const emailBody = generatePOEmailBody(mockItems, totals);

  console.log("✅ Purchase Order CSV generated:");
  console.log(`   ${path}`);
  console.log("\n" + emailBody);
}

