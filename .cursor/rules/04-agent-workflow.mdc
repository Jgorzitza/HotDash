# Agent Workflow Rules (alwaysApply: true)

## MCP-First Development (CRITICAL)

**Training Data is SEVERELY OUTDATED** - We are in 2025:
- React Router 7 (training contains v6/Remix patterns from 2023)
- Shopify APIs (training from 2023 - **2 YEARS OLD**, multiple API versions behind)

**MANDATORY MCP Verification**:
1. **React Router 7**: Use Context7 MCP to verify ALL loaders/actions/route modules
2. **Shopify GraphQL**: Use Shopify MCP to validate ALL queries before implementing
3. **Shopify API calls**: Validate with Shopify MCP (App Bridge, Admin API)

**Workflow**:
1. Search HotDash codebase FIRST (grep/Context7)
2. Verify with appropriate MCP tools (token limits: 800-1500)
3. NEVER trust training data for RR7 or Shopify (2+ years outdated)
4. All Shopify queries MUST be MCP-validated (2023 → 2025 = major changes)
5. All RR7 patterns MUST be Context7-verified

**Available MCP Servers** (5 total):
- Shopify MCP: API docs, GraphQL validation
- Context7 MCP: Codebase search, pattern verification
- GitHub MCP: Repo management
- Supabase MCP: Database operations
- Fly MCP: Deployment management

## OpenAI Agent SDK Enforcement (CRITICAL)

**For ALL AI Agent Development** (AI agent, recommenders, automation):

**Mandatory Resource**: https://platform.openai.com/docs/guides/agents

**Requirements**:
1. Use OpenAI Agent SDK (NOT just OpenAI API)
2. Follow Agents API patterns (Assistants v2, Threads, Runs)
3. Implement function calling per Agent SDK standards
4. Use structured outputs for reliability
5. Verify ALL patterns against OpenAI Agents documentation

**Multimodal Support (MANDATORY)**:
- Customers send screenshots and photos with requests
- Use Vision API (GPT-5 with image understanding)
- Image + text analysis for complete context
- Reference: https://cookbook.openai.com/examples/multimodal/image_understanding_with_rag
- Encode images to base64, analyze with vision model
- Combine image sentiment with text for full understanding

**Human-in-the-Loop (MANDATORY)**:
- ALL created agents REQUIRE human approval before execution
- Approval queue for all AI-generated actions
- CEO approval for high-impact decisions
- Train agents with correct tech information through feedback loops
- CEO voice/style training from hotrodan.com content

**Agent Training Requirements**:
1. Technical accuracy: Verify facts against MCP/docs (not training data)
2. CEO voice: Match tone/style from hotrodan.com
3. Approval feedback: Learn from CEO approvals/rejections
4. Iterative improvement: Adjust confidence based on outcomes
5. Historical data: Train on past customer interactions from Chatwoot

## Direction & Feedback Separation (CRITICAL)

**Direction Files** (`docs/directions/{agent}.md`):
- Manager writes tasks/priorities
- Agents READ ONLY (never modify)
- **ALL TASKS ARE ASSIGNED** - Execute them sequentially

**Feedback Files** (`feedback/{agent}.md`):
- Agents write progress updates
- ONLY to their own file
- Never write to other agents' feedback files
- Never write to feedback/manager.md

## Agent Execution Rules (CRITICAL)

**NEVER STOP TO ASK "WHAT'S NEXT"** - Your direction file HAS your tasks:

1. **Read your entire direction file** - All tasks are listed with priorities (P0, P1, P2)
2. **Execute tasks sequentially** - Start with P0, then P1, then P2
3. **Work until ALL assigned tasks complete** - Don't stop after one task
4. **Log blockers and continue** - If blocked on task 3, move to task 4
5. **Report every 2 hours** - Show progress, don't ask permission
6. **Only escalate if stuck >2 hours** - Try to unblock yourself first

**FORBIDDEN**:
- ❌ Stopping to ask "what should I do next?"
- ❌ Waiting for permission to continue
- ❌ Completing one task then going idle
- ❌ Asking if you should proceed with assigned tasks

**REQUIRED**:
- ✅ Read full direction file (all P0, P1, P2 tasks)
- ✅ Execute ALL tasks until direction complete
- ✅ Report progress every 2 hours (don't ask, just report)
- ✅ Log blockers and work around them
- ✅ Only stop when ALL assigned work done

## Evidence Requirements

**Every 2 Hours Report**:
```
## YYYY-MM-DDTHH:MM:SSZ — {Agent}: [Task] [Status]
**Working On**: [Task from direction]
**Progress**: [% or milestone]
**Evidence**: 
- Files: [paths]
- Tests: [X/Y passing]
- Build: [status]
**Blockers**: [None or details]
**Next**: [Next task]
```

**Evidence Format**:
- File paths (specific, not verbose)
- Command summaries (max 10 lines, NOT full output)
- Test results (counts, not all output)
- Git commits (hash + message)
- Performance metrics (with units)

**FORBIDDEN**:
- ❌ 100+ line npm install outputs
- ❌ Verbatim command logs
- ❌ Full stack traces (use summaries)
- ❌ Self-assigned tasks in feedback
- ❌ Ad-hoc documents in feedback/ root

## Compliance Checks

- Feedback file <5000 lines (archive if larger)
- No ad-hoc docs in feedback/ (only {agent}.md files)
- No self-assigned tasks (come from direction)
- Regular updates (every 2 hours minimum)
- Escalate blockers immediately (>2 hours stuck)

## File Structure

- **Direction** (Manager writes): `docs/directions/{agent}.md`
- **Feedback** (Agent writes): `feedback/{agent}.md`
- **Evidence** (Agent stores): `artifacts/{agent}/` or `/tmp/`
- **Rules** (Process): `.cursor/rules/*.mdc` (this file)

---

**Primary References**:
- This file: .cursor/rules/04-agent-workflow.mdc (alwaysApply: true)
- MCP-First: docs/NORTH_STAR.md
- Governance: docs/directions/README.md
- Quick Ref: docs/AGENT_RULES_REFERENCE.md (if exists)
