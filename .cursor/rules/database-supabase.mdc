---
globs: *.ts,*.tsx,supabase/migrations/*.sql
---

# Database & Supabase Patterns

**Reference**: [docs/directions/README.md](mdc:docs/directions/README.md)

## Supabase as Single Source of Truth

- ✅ ALL data in Supabase PostgreSQL
- ❌ NO other databases (MySQL, MongoDB, etc.)
- ✅ Chatwoot data also in Supabase
- ✅ Local dev: `supabase start` + local Postgres

## Connection Setup

### Local Development
```bash
supabase start
# Exports .env.local automatically
# DATABASE_URL=postgresql://postgres:postgres@127.0.0.1:54322/postgres
```

### Staging/Production
```typescript
import { createClient } from '@supabase/supabase-js';
import type { Database } from '~/types/supabase';

const supabase = createClient<Database>(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_KEY!
);
```

## Migrations

### Location
`supabase/migrations/` - All schema changes go here

### Naming Convention
`{timestamp}_{description}.sql`

Example: `20251013_add_picker_payments_table.sql`

### Migration Pattern

```sql
-- Forward migration
CREATE TABLE IF NOT EXISTS picker_payments (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  picker_id UUID NOT NULL REFERENCES pickers(id),
  amount DECIMAL(10,2) NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now()
);

-- Enable RLS
ALTER TABLE picker_payments ENABLE ROW LEVEL SECURITY;

-- RLS Policies
CREATE POLICY "Users can view own payments"
  ON picker_payments FOR SELECT
  USING (auth.uid() = picker_id);
```

### Apply Migrations

**Local**:
```bash
supabase db reset  # Applies all migrations fresh
```

**Production** (via Supabase MCP):
```typescript
mcp_supabase_apply_migration({
  name: "add_picker_payments_table",
  query: "CREATE TABLE..."
})
```

## Type Generation

Generate TypeScript types from database:

```bash
npx supabase gen types typescript --local > app/types/supabase.ts
```

## Query Patterns

### Type-Safe Queries

```typescript
import type { Database } from '~/types/supabase';

type Conversation = Database['public']['Tables']['conversations']['Row'];

const { data, error } = await supabase
  .from('conversations')
  .select('id, status, created_at')
  .eq('status', 'open')
  .order('created_at', { ascending: false })
  .limit(10);

if (error) throw error;
return data as Conversation[];
```

### Joins

```typescript
const { data } = await supabase
  .from('orders')
  .select(`
    id,
    total,
    customer:customers (
      id,
      email
    )
  `)
  .eq('status', 'pending');
```

### Insert

```typescript
const { data, error } = await supabase
  .from('conversations')
  .insert({
    shopify_order_id: orderId,
    status: 'open',
    priority: 'high'
  })
  .select()
  .single();
```

### Update

```typescript
const { data, error } = await supabase
  .from('conversations')
  .update({ status: 'resolved' })
  .eq('id', conversationId)
  .select()
  .single();
```

## Row Level Security (RLS)

**ALWAYS enable RLS** on new tables:

```sql
ALTER TABLE {table_name} ENABLE ROW LEVEL SECURITY;
```

**Create appropriate policies**:
```sql
-- Example: Users can only see their own data
CREATE POLICY "users_own_data"
  ON {table_name}
  FOR ALL
  USING (auth.uid() = user_id);
```

## Edge Functions

**Location**: `supabase/functions/`

**Pattern**:
```typescript
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
import { createClient } from '@supabase/supabase-js';

serve(async (req) => {
  const supabase = createClient(
    Deno.env.get('SUPABASE_URL')!,
    Deno.env.get('SUPABASE_SERVICE_KEY')!
  );
  
  // Your logic here
  
  return new Response(JSON.stringify({ success: true }), {
    headers: { 'Content-Type': 'application/json' }
  });
});
```

## Performance

### Indexing
Add indexes for frequently queried columns:
```sql
CREATE INDEX idx_conversations_status ON conversations(status);
CREATE INDEX idx_orders_created_at ON orders(created_at DESC);
```

### Pagination
```typescript
const pageSize = 50;
const { data } = await supabase
  .from('items')
  .select('*')
  .range(offset, offset + pageSize - 1);
```

## Error Handling

```typescript
const { data, error } = await supabase
  .from('table')
  .select('*');

if (error) {
  console.error('Supabase error:', error);
  throw new Error(`Database query failed: ${error.message}`);
}

if (!data || data.length === 0) {
  return json({ items: [] });
}

return json({ items: data });
```
