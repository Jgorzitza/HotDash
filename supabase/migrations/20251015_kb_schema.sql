-- Knowledge Base Schema Migration
-- Created: 2025-10-15
-- Purpose: Create tables for AI knowledge base system with learning extraction

-- Enable pgvector extension for embeddings
create extension if not exists vector;

-- KB Articles Table
create table if not exists kb_articles (
  id bigint generated by default as identity primary key,
  
  -- Core content
  question text not null,
  answer text not null,
  category text not null check (category in ('orders', 'shipping', 'returns', 'products', 'technical', 'policies')),
  tags text[] not null default '{}',
  
  -- Quality & confidence
  confidence_score decimal(3,2) not null default 0.50 check (confidence_score between 0 and 1),
  usage_count int not null default 0,
  success_count int not null default 0,
  avg_tone_grade decimal(3,2) check (avg_tone_grade is null or avg_tone_grade between 1 and 5),
  avg_accuracy_grade decimal(3,2) check (avg_accuracy_grade is null or avg_accuracy_grade between 1 and 5),
  avg_policy_grade decimal(3,2) check (avg_policy_grade is null or avg_policy_grade between 1 and 5),
  
  -- Metadata
  source text not null check (source in ('human_edit', 'template', 'extracted', 'manual')),
  created_by text not null,
  last_used_at timestamptz,
  created_at timestamptz default now(),
  updated_at timestamptz default now(),
  
  -- Search optimization
  embedding vector(1536),
  
  -- Soft delete
  archived_at timestamptz
);

-- Learning Edits Table
create table if not exists kb_learning_edits (
  id bigint generated by default as identity primary key,
  
  -- Link to approval
  approval_id bigint references approvals(id) on delete cascade,
  conversation_id bigint not null,
  
  -- Draft vs final
  ai_draft text not null,
  human_final text not null,
  edit_distance int not null,
  edit_ratio decimal(3,2) not null check (edit_ratio between 0 and 1),
  
  -- Grading
  tone_grade int check (tone_grade between 1 and 5),
  accuracy_grade int check (accuracy_grade between 1 and 5),
  policy_grade int check (policy_grade between 1 and 5),
  
  -- Context
  customer_question text not null,
  category text check (category in ('orders', 'shipping', 'returns', 'products', 'technical', 'policies')),
  tags text[] default '{}',
  
  -- Extracted learnings
  kb_article_id bigint references kb_articles(id),
  learning_type text check (learning_type in (
    'tone_improvement',
    'factual_correction', 
    'policy_clarification',
    'template_refinement',
    'new_pattern'
  )),
  
  -- Metadata
  reviewer text not null,
  created_at timestamptz default now()
);

-- Recurring Issues Table
create table if not exists kb_recurring_issues (
  id bigint generated by default as identity primary key,
  
  -- Issue identification
  issue_pattern text not null,
  category text not null check (category in ('orders', 'shipping', 'returns', 'products', 'technical', 'policies')),
  tags text[] not null default '{}',
  
  -- Frequency tracking
  occurrence_count int not null default 1,
  first_seen_at timestamptz not null default now(),
  last_seen_at timestamptz not null default now(),
  
  -- Resolution
  kb_article_id bigint references kb_articles(id),
  resolution_status text check (resolution_status in (
    'unresolved',
    'kb_created',
    'escalated',
    'product_issue',
    'policy_update_needed'
  )) not null default 'unresolved',
  
  -- Impact
  avg_resolution_time_minutes int,
  customer_satisfaction_score decimal(3,2) check (customer_satisfaction_score between 0 and 1),
  
  -- Metadata
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- KB Topics Table (for knowledge graph)
create table if not exists kb_topics (
  id bigint generated by default as identity primary key,
  name text not null unique,
  description text,
  parent_topic_id bigint references kb_topics(id),
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- KB Article Topics (many-to-many)
create table if not exists kb_article_topics (
  article_id bigint references kb_articles(id) on delete cascade,
  topic_id bigint references kb_topics(id) on delete cascade,
  relevance_score decimal(3,2) default 1.0 check (relevance_score between 0 and 1),
  primary key (article_id, topic_id)
);

-- KB Article Links (knowledge graph relationships)
create table if not exists kb_article_links (
  from_article_id bigint references kb_articles(id) on delete cascade,
  to_article_id bigint references kb_articles(id) on delete cascade,
  link_type text not null check (link_type in ('related', 'prerequisite', 'alternative', 'followup')),
  strength decimal(3,2) default 0.5 check (strength between 0 and 1),
  created_at timestamptz default now(),
  primary key (from_article_id, to_article_id, link_type)
);

-- KB Usage Tracking
create table if not exists kb_usage_log (
  id bigint generated by default as identity primary key,
  article_id bigint references kb_articles(id) on delete cascade,
  approval_id bigint references approvals(id) on delete cascade,
  used_in_draft boolean not null default true,
  was_helpful boolean,
  created_at timestamptz default now()
);

-- Indexes for performance
create index kb_articles_category_idx on kb_articles(category) where archived_at is null;
create index kb_articles_confidence_idx on kb_articles(confidence_score desc) where archived_at is null;
create index kb_articles_tags_idx on kb_articles using gin(tags);
create index kb_articles_embedding_idx on kb_articles using ivfflat(embedding vector_cosine_ops) with (lists = 100);
create index kb_articles_last_used_idx on kb_articles(last_used_at desc nulls last) where archived_at is null;
create index kb_articles_created_idx on kb_articles(created_at desc);

create index kb_learning_edits_approval_idx on kb_learning_edits(approval_id);
create index kb_learning_edits_category_idx on kb_learning_edits(category);
create index kb_learning_edits_grades_idx on kb_learning_edits(tone_grade, accuracy_grade, policy_grade);
create index kb_learning_edits_type_idx on kb_learning_edits(learning_type);
create index kb_learning_edits_created_idx on kb_learning_edits(created_at desc);

create index kb_recurring_issues_category_idx on kb_recurring_issues(category);
create index kb_recurring_issues_count_idx on kb_recurring_issues(occurrence_count desc);
create index kb_recurring_issues_status_idx on kb_recurring_issues(resolution_status);
create index kb_recurring_issues_last_seen_idx on kb_recurring_issues(last_seen_at desc);

create index kb_topics_parent_idx on kb_topics(parent_topic_id);
create index kb_article_topics_article_idx on kb_article_topics(article_id);
create index kb_article_topics_topic_idx on kb_article_topics(topic_id);

create index kb_article_links_from_idx on kb_article_links(from_article_id);
create index kb_article_links_to_idx on kb_article_links(to_article_id);

create index kb_usage_log_article_idx on kb_usage_log(article_id);
create index kb_usage_log_created_idx on kb_usage_log(created_at desc);

-- RLS policies
alter table kb_articles enable row level security;
alter table kb_learning_edits enable row level security;
alter table kb_recurring_issues enable row level security;
alter table kb_topics enable row level security;
alter table kb_article_topics enable row level security;
alter table kb_article_links enable row level security;
alter table kb_usage_log enable row level security;

-- Allow authenticated users to read KB articles
create policy "KB articles are viewable by authenticated users"
  on kb_articles for select
  using (auth.role() = 'authenticated' and archived_at is null);

-- Allow service role to manage KB
create policy "Service role can manage KB articles"
  on kb_articles for all
  using (auth.role() = 'service_role');

create policy "Service role can manage learning edits"
  on kb_learning_edits for all
  using (auth.role() = 'service_role');

create policy "Service role can manage recurring issues"
  on kb_recurring_issues for all
  using (auth.role() = 'service_role');

create policy "Service role can manage topics"
  on kb_topics for all
  using (auth.role() = 'service_role');

create policy "Service role can manage article topics"
  on kb_article_topics for all
  using (auth.role() = 'service_role');

create policy "Service role can manage article links"
  on kb_article_links for all
  using (auth.role() = 'service_role');

create policy "Service role can manage usage log"
  on kb_usage_log for all
  using (auth.role() = 'service_role');

-- Functions for automatic updates
create or replace function update_kb_article_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

create trigger kb_articles_updated_at
  before update on kb_articles
  for each row
  execute function update_kb_article_updated_at();

create trigger kb_recurring_issues_updated_at
  before update on kb_recurring_issues
  for each row
  execute function update_kb_article_updated_at();

create trigger kb_topics_updated_at
  before update on kb_topics
  for each row
  execute function update_kb_article_updated_at();

-- Function to calculate confidence score
create or replace function calculate_kb_confidence(
  p_usage_count int,
  p_success_count int,
  p_avg_tone decimal,
  p_avg_accuracy decimal,
  p_avg_policy decimal
)
returns decimal as $$
declare
  success_rate decimal;
  tone_score decimal;
  accuracy_score decimal;
  policy_score decimal;
begin
  -- Avoid division by zero
  if p_usage_count = 0 then
    return 0.50;
  end if;
  
  success_rate := p_success_count::decimal / p_usage_count::decimal;
  tone_score := coalesce(p_avg_tone / 5.0, 0.5);
  accuracy_score := coalesce(p_avg_accuracy / 5.0, 0.5);
  policy_score := coalesce(p_avg_policy / 5.0, 0.5);
  
  return (
    success_rate * 0.4 +
    accuracy_score * 0.3 +
    tone_score * 0.2 +
    policy_score * 0.1
  );
end;
$$ language plpgsql immutable;

-- Comments for documentation
comment on table kb_articles is 'Knowledge base articles with confidence scoring and embeddings';
comment on table kb_learning_edits is 'Tracks human edits to AI drafts for learning extraction';
comment on table kb_recurring_issues is 'Identifies and tracks recurring customer issues';
comment on table kb_topics is 'Hierarchical topic taxonomy for knowledge organization';
comment on table kb_article_topics is 'Many-to-many relationship between articles and topics';
comment on table kb_article_links is 'Knowledge graph relationships between articles';
comment on table kb_usage_log is 'Tracks KB article usage in AI drafts';

