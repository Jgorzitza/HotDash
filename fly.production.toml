# fly.toml app configuration file for HotDash Production
#
# See https://fly.io/docs/reference/configuration/ for information about how to use this file.
#
# Deploy with: flyctl deploy --config fly.production.toml --app hot-dash

app = 'hot-dash'
primary_region = 'ord'  # Chicago (central US for lowest latency)

# Kill timeout - graceful shutdown period
kill_signal = 'SIGINT'
kill_timeout = '30s'

[build]
  # Dockerfile-based build (automatically detected)

[env]
  HOST = '0.0.0.0'
  PORT = '3000'
  NODE_ENV = 'production'

[http_service]
  internal_port = 3000
  force_https = true
  
  # Auto-scaling configuration for production
  auto_stop_machines = 'off'  # Never auto-stop in production
  auto_start_machines = true
  min_machines_running = 2    # High availability: minimum 2 instances
  processes = ['app']
  
  # Connection limits
  [http_service.concurrency]
    type = 'connections'
    hard_limit = 250
    soft_limit = 200

# VM configuration for production
[[vm]]
  memory = '2gb'      # 2GB RAM for production workloads
  cpu_kind = 'shared'
  cpus = 2            # 2 vCPUs for better performance

# Auto-scaling configuration
[metrics]
  port = 9091  # Prometheus metrics endpoint
  path = '/metrics'

# Health check configuration
[[services]]
  protocol = 'tcp'
  internal_port = 3000
  processes = ['app']

  # HTTP service ports
  [[services.ports]]
    port = 80
    handlers = ['http']
    force_https = true

  [[services.ports]]
    port = 443
    handlers = ['tls', 'http']
  
  # Concurrency controls
  [services.concurrency]
    type = 'connections'
    hard_limit = 250
    soft_limit = 200

  # TCP health check (basic connectivity)
  [[services.tcp_checks]]
    interval = '15s'
    timeout = '2s'
    grace_period = '30s'  # Allow 30s for app startup
    restart_limit = 3     # Restart after 3 consecutive failures

  # HTTP health check (application-level)
  [[services.http_checks]]
    interval = '30s'
    timeout = '5s'
    grace_period = '30s'
    method = 'get'
    path = '/health'
    protocol = 'http'
    restart_limit = 3
    
    # Expected response
    [services.http_checks.headers]
      # Optional: Add custom headers if needed
      # X-Health-Check = 'fly'

# Multi-region deployment (optional - uncomment for global deployment)
# [[services.regions]]
#   region = 'ord'  # Chicago (primary)
# [[services.regions]]
#   region = 'iad'  # Virginia (east coast)
# [[services.regions]]
#   region = 'sjc'  # San Jose (west coast)

# Deployment strategy
[deploy]
  strategy = 'rolling'  # Rolling updates for zero downtime
  max_unavailable = 0.3  # Max 30% of instances down during deploy
  wait_timeout = '5m'    # Wait up to 5 minutes for health checks

# Experimental features
[experimental]
  auto_rollback = true  # Automatically rollback failed deployments
  enable_consul = false
  enable_etcd = false

# Process groups (optional - for separating worker processes)
# [processes]
#   app = 'npm start'
#   worker = 'node worker.js'

# Mounts (optional - for persistent storage)
# [[mounts]]
#   source = 'data'
#   destination = '/data'
#   initial_size = '1gb'

# Statics (optional - for serving static files via CDN)
# [statics]
#   guest_path = '/app/public'
#   url_prefix = '/static'


