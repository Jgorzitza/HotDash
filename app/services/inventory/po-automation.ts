/**
 * Purchase Order Automation Service (INVENTORY-011)
 *
 * Auto-generates purchase orders based on reorder alerts:
 * - Groups products by vendor for efficiency
 * - Calculates optimal order quantities
 * - HITL (Human-in-the-Loop) approval for POs > $1000
 * - Creates draft POs ready for review/submission
 *
 * Context7: /microsoft/typescript - type safety, algorithms
 * Context7: /prisma/docs - transactions, batch operations
 */

import type { ReorderAlert } from "./reorder-alerts";
import type { POStatus } from "./po-tracking";

export interface AutoPOItem {
  productId: string;
  productName: string;
  sku: string;
  quantity: number;
  costPerUnit: number;
  lineTotal: number;
  urgency: "critical" | "high" | "medium" | "low";
}

export interface AutoGeneratedPO {
  poNumber: string;
  vendorId: string;
  vendorName: string;
  items: AutoPOItem[];
  subtotal: number;
  estimatedTax: number; // 8% default
  totalCost: number;
  requiresApproval: boolean; // True if > $1000
  approvalStatus: "pending" | "approved" | "rejected" | null;
  estimatedDeliveryDate: string;
  leadTimeDays: number;
  createdAt: string;
  status: POStatus;
}

export interface POAutomationSummary {
  totalPOs: number;
  autoApprovedCount: number; // POs < $1000
  pendingApprovalCount: number; // POs >= $1000
  totalValue: number;
  purchaseOrders: AutoGeneratedPO[];
  generatedAt: string;
}

/**
 * Generate PO number
 *
 * Format: PO-YYYYMMDD-VENDOR-NNNN
 * Example: PO-20251021-VEN001-0001
 *
 * @param vendorId - Vendor identifier
 * @param sequence - Sequence number for the day
 * @returns PO number string
 */
export function generatePONumber(vendorId: string, sequence: number): string {
  const today = new Date();
  const dateStr = today.toISOString().split("T")[0].replace(/-/g, "");
  const seqStr = sequence.toString().padStart(4, "0");
  const vendorCode = vendorId.replace("vendor_", "VEN");

  return `PO-${dateStr}-${vendorCode}-${seqStr}`;
}

/**
 * Group reorder alerts by vendor
 *
 * Groups products that need reordering by their vendor to create
 * combined purchase orders, reducing shipping costs and admin overhead.
 *
 * @param alerts - Array of reorder alerts
 * @returns Map of vendorId to alerts
 */
export function groupAlertsByVendor(
  alerts: ReorderAlert[]
): Map<string, ReorderAlert[]> {
  const grouped = new Map<string, ReorderAlert[]>();

  for (const alert of alerts) {
    const vendorId = alert.vendor.vendorId;

    if (!grouped.has(vendorId)) {
      grouped.set(vendorId, []);
    }

    grouped.get(vendorId)!.push(alert);
  }

  return grouped;
}

/**
 * Calculate estimated tax
 *
 * Default: 8% sales tax
 * In production: Use actual tax rate based on location
 *
 * @param subtotal - Subtotal before tax
 * @param taxRate - Tax rate (default: 0.08 = 8%)
 * @returns Estimated tax amount
 */
export function calculateEstimatedTax(
  subtotal: number,
  taxRate: number = 0.08
): number {
  return Math.round(subtotal * taxRate * 100) / 100;
}

/**
 * Determine if PO requires HITL approval
 *
 * Approval required if:
 * - Total cost >= $1000
 * - Any item has "critical" urgency AND cost > $500
 *
 * @param totalCost - Total PO cost
 * @param items - PO items
 * @returns True if approval required
 */
export function requiresHITLApproval(
  totalCost: number,
  items: AutoPOItem[]
): boolean {
  // Always require approval for POs >= $1000
  if (totalCost >= 1000) {
    return true;
  }

  // Require approval for critical items > $500
  const hasCriticalExpensiveItem = items.some(
    (item) => item.urgency === "critical" && item.lineTotal > 500
  );

  return hasCriticalExpensiveItem;
}

/**
 * Auto-generate purchase order from vendor alerts
 *
 * Creates a draft PO for a specific vendor based on reorder alerts.
 *
 * @param vendorAlerts - Alerts for a single vendor
 * @param sequence - PO sequence number
 * @returns Auto-generated purchase order
 */
export function generatePOForVendor(
  vendorAlerts: ReorderAlert[],
  sequence: number
): AutoGeneratedPO {
  if (vendorAlerts.length === 0) {
    throw new Error("No alerts provided for PO generation");
  }

  // All alerts should be for the same vendor
  const firstAlert = vendorAlerts[0];
  const vendorId = firstAlert.vendor.vendorId;
  const vendorName = firstAlert.vendor.vendorName;
  const leadTimeDays = firstAlert.vendor.leadTimeDays;

  // Create PO items
  const items: AutoPOItem[] = vendorAlerts.map((alert) => ({
    productId: alert.productId,
    productName: alert.productName,
    sku: alert.sku,
    quantity: alert.recommendedOrderQty,
    costPerUnit: alert.vendor.costPerUnit,
    lineTotal: alert.estimatedCost,
    urgency: alert.urgency,
  }));

  // Calculate totals
  const subtotal = items.reduce((sum, item) => sum + item.lineTotal, 0);
  const estimatedTax = calculateEstimatedTax(subtotal);
  const totalCost = subtotal + estimatedTax;

  // Check if approval required
  const requiresApproval = requiresHITLApproval(totalCost, items);

  // Generate PO number
  const poNumber = generatePONumber(vendorId, sequence);

  // Calculate delivery date
  const deliveryDate = new Date();
  deliveryDate.setDate(deliveryDate.getDate() + leadTimeDays);

  // Determine status and approval status
  const status: POStatus = "draft";
  const approvalStatus = requiresApproval ? "pending" : null;

  return {
    poNumber,
    vendorId,
    vendorName,
    items,
    subtotal: Math.round(subtotal * 100) / 100,
    estimatedTax: Math.round(estimatedTax * 100) / 100,
    totalCost: Math.round(totalCost * 100) / 100,
    requiresApproval,
    approvalStatus,
    estimatedDeliveryDate: deliveryDate.toISOString(),
    leadTimeDays,
    createdAt: new Date().toISOString(),
    status,
  };
}

/**
 * Auto-generate all purchase orders from reorder alerts
 *
 * INVENTORY-011: Purchase Order Automation
 *
 * Process:
 * 1. Group alerts by vendor
 * 2. Generate PO for each vendor
 * 3. Flag POs >= $1000 for HITL approval
 * 4. Return summary with all generated POs
 *
 * @param alerts - Array of reorder alerts
 * @returns PO automation summary
 */
export async function autoGeneratePurchaseOrders(
  alerts: ReorderAlert[]
): Promise<POAutomationSummary> {
  if (alerts.length === 0) {
    return {
      totalPOs: 0,
      autoApprovedCount: 0,
      pendingApprovalCount: 0,
      totalValue: 0,
      purchaseOrders: [],
      generatedAt: new Date().toISOString(),
    };
  }

  // Group alerts by vendor
  const groupedByVendor = groupAlertsByVendor(alerts);

  // Generate POs for each vendor
  const purchaseOrders: AutoGeneratedPO[] = [];
  let sequence = 1;

  for (const [vendorId, vendorAlerts] of groupedByVendor.entries()) {
    const po = generatePOForVendor(vendorAlerts, sequence);
    purchaseOrders.push(po);
    sequence++;
  }

  // Calculate summary stats
  const autoApprovedCount = purchaseOrders.filter(
    (po) => !po.requiresApproval
  ).length;
  const pendingApprovalCount = purchaseOrders.filter(
    (po) => po.requiresApproval
  ).length;
  const totalValue = purchaseOrders.reduce((sum, po) => sum + po.totalCost, 0);

  // Sort POs: approval required first, then by total cost descending
  purchaseOrders.sort((a, b) => {
    if (a.requiresApproval && !b.requiresApproval) return -1;
    if (!a.requiresApproval && b.requiresApproval) return 1;
    return b.totalCost - a.totalCost;
  });

  return {
    totalPOs: purchaseOrders.length,
    autoApprovedCount,
    pendingApprovalCount,
    totalValue: Math.round(totalValue * 100) / 100,
    purchaseOrders,
    generatedAt: new Date().toISOString(),
  };
}

/**
 * Approve a purchase order (HITL action)
 *
 * @param poNumber - PO number to approve
 * @returns Updated PO with approved status
 */
export async function approvePurchaseOrder(
  poNumber: string
): Promise<{ success: boolean; message: string }> {
  // In production: Update database, send to vendor system
  return {
    success: true,
    message: `PO ${poNumber} approved and ready for submission to vendor`,
  };
}

/**
 * Reject a purchase order (HITL action)
 *
 * @param poNumber - PO number to reject
 * @param reason - Rejection reason
 * @returns Rejection confirmation
 */
export async function rejectPurchaseOrder(
  poNumber: string,
  reason: string
): Promise<{ success: boolean; message: string }> {
  // In production: Update database, log rejection reason
  return {
    success: true,
    message: `PO ${poNumber} rejected. Reason: ${reason}`,
  };
}


