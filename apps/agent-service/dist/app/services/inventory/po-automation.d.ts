/**
 * Purchase Order Automation Service (INVENTORY-011)
 *
 * Auto-generates purchase orders based on reorder alerts:
 * - Groups products by vendor for efficiency
 * - Calculates optimal order quantities
 * - HITL (Human-in-the-Loop) approval for POs > $1000
 * - Creates draft POs ready for review/submission
 *
 * Context7: /microsoft/typescript - type safety, algorithms
 * Context7: /prisma/docs - transactions, batch operations
 */
import type { ReorderAlert } from "./reorder-alerts";
import type { POStatus } from "./po-tracking";
export interface AutoPOItem {
    productId: string;
    productName: string;
    sku: string;
    quantity: number;
    costPerUnit: number;
    lineTotal: number;
    urgency: "critical" | "high" | "medium" | "low";
}
export interface AutoGeneratedPO {
    poNumber: string;
    vendorId: string;
    vendorName: string;
    items: AutoPOItem[];
    subtotal: number;
    estimatedTax: number;
    totalCost: number;
    requiresApproval: boolean;
    approvalStatus: "pending" | "approved" | "rejected" | null;
    estimatedDeliveryDate: string;
    leadTimeDays: number;
    createdAt: string;
    status: POStatus;
}
export interface POAutomationSummary {
    totalPOs: number;
    autoApprovedCount: number;
    pendingApprovalCount: number;
    totalValue: number;
    purchaseOrders: AutoGeneratedPO[];
    generatedAt: string;
}
/**
 * Generate PO number
 *
 * Format: PO-YYYYMMDD-VENDOR-NNNN
 * Example: PO-20251021-VEN001-0001
 *
 * @param vendorId - Vendor identifier
 * @param sequence - Sequence number for the day
 * @returns PO number string
 */
export declare function generatePONumber(vendorId: string, sequence: number): string;
/**
 * Group reorder alerts by vendor
 *
 * Groups products that need reordering by their vendor to create
 * combined purchase orders, reducing shipping costs and admin overhead.
 *
 * @param alerts - Array of reorder alerts
 * @returns Map of vendorId to alerts
 */
export declare function groupAlertsByVendor(alerts: ReorderAlert[]): Map<string, ReorderAlert[]>;
/**
 * Calculate estimated tax
 *
 * Default: 8% sales tax
 * In production: Use actual tax rate based on location
 *
 * @param subtotal - Subtotal before tax
 * @param taxRate - Tax rate (default: 0.08 = 8%)
 * @returns Estimated tax amount
 */
export declare function calculateEstimatedTax(subtotal: number, taxRate?: number): number;
/**
 * Determine if PO requires HITL approval
 *
 * Approval required if:
 * - Total cost >= $1000
 * - Any item has "critical" urgency AND cost > $500
 *
 * @param totalCost - Total PO cost
 * @param items - PO items
 * @returns True if approval required
 */
export declare function requiresHITLApproval(totalCost: number, items: AutoPOItem[]): boolean;
/**
 * Auto-generate purchase order from vendor alerts
 *
 * Creates a draft PO for a specific vendor based on reorder alerts.
 *
 * @param vendorAlerts - Alerts for a single vendor
 * @param sequence - PO sequence number
 * @returns Auto-generated purchase order
 */
export declare function generatePOForVendor(vendorAlerts: ReorderAlert[], sequence: number): AutoGeneratedPO;
/**
 * Auto-generate all purchase orders from reorder alerts
 *
 * INVENTORY-011: Purchase Order Automation
 *
 * Process:
 * 1. Group alerts by vendor
 * 2. Generate PO for each vendor
 * 3. Flag POs >= $1000 for HITL approval
 * 4. Return summary with all generated POs
 *
 * @param alerts - Array of reorder alerts
 * @returns PO automation summary
 */
export declare function autoGeneratePurchaseOrders(alerts: ReorderAlert[]): Promise<POAutomationSummary>;
/**
 * Approve a purchase order (HITL action)
 *
 * @param poNumber - PO number to approve
 * @returns Updated PO with approved status
 */
export declare function approvePurchaseOrder(poNumber: string): Promise<{
    success: boolean;
    message: string;
}>;
/**
 * Reject a purchase order (HITL action)
 *
 * @param poNumber - PO number to reject
 * @param reason - Rejection reason
 * @returns Rejection confirmation
 */
export declare function rejectPurchaseOrder(poNumber: string, reason: string): Promise<{
    success: boolean;
    message: string;
}>;
//# sourceMappingURL=po-automation.d.ts.map