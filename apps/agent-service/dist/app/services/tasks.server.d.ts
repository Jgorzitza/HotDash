import { Prisma } from "@prisma/client";
export interface AssignTaskInput {
    assignedBy: string;
    assignedTo: string;
    taskId: string;
    title: string;
    description: string;
    acceptanceCriteria: string[];
    allowedPaths: string[];
    priority: "P0" | "P1" | "P2" | "P3";
    phase?: string;
    estimatedHours?: number;
    dependencies?: string[];
    blocks?: string[];
    evidenceUrl?: string;
    issueUrl?: string;
    payload?: Prisma.InputJsonValue;
}
export interface UpdateTaskInput {
    taskId: string;
    status?: "assigned" | "in_progress" | "completed" | "blocked" | "cancelled";
    startedAt?: Date;
    completedAt?: Date;
    cancelledAt?: Date;
    completionNotes?: string;
    cancellationReason?: string;
    prUrl?: string;
    payload?: Prisma.InputJsonValue;
}
export declare function assignTask(input: AssignTaskInput): Promise<{
    status: string;
    description: string;
    id: number;
    evidenceUrl: string | null;
    taskId: string;
    payload: Prisma.JsonValue | null;
    createdAt: Date;
    updatedAt: Date;
    assignedBy: string;
    assignedTo: string;
    title: string;
    acceptanceCriteria: Prisma.JsonValue;
    allowedPaths: Prisma.JsonValue;
    priority: string;
    phase: string | null;
    estimatedHours: Prisma.Decimal | null;
    dependencies: Prisma.JsonValue | null;
    blocks: Prisma.JsonValue | null;
    assignedAt: Date;
    startedAt: Date | null;
    completedAt: Date | null;
    cancelledAt: Date | null;
    completionNotes: string | null;
    cancellationReason: string | null;
    issueUrl: string | null;
    prUrl: string | null;
}>;
export declare function updateTask(taskId: string, input: UpdateTaskInput): Promise<{
    status: string;
    description: string;
    id: number;
    evidenceUrl: string | null;
    taskId: string;
    payload: Prisma.JsonValue | null;
    createdAt: Date;
    updatedAt: Date;
    assignedBy: string;
    assignedTo: string;
    title: string;
    acceptanceCriteria: Prisma.JsonValue;
    allowedPaths: Prisma.JsonValue;
    priority: string;
    phase: string | null;
    estimatedHours: Prisma.Decimal | null;
    dependencies: Prisma.JsonValue | null;
    blocks: Prisma.JsonValue | null;
    assignedAt: Date;
    startedAt: Date | null;
    completedAt: Date | null;
    cancelledAt: Date | null;
    completionNotes: string | null;
    cancellationReason: string | null;
    issueUrl: string | null;
    prUrl: string | null;
}>;
export declare function getMyTasks(agent: string): Promise<{
    status: string;
    description: string;
    id: number;
    evidenceUrl: string | null;
    taskId: string;
    payload: Prisma.JsonValue | null;
    createdAt: Date;
    updatedAt: Date;
    assignedBy: string;
    assignedTo: string;
    title: string;
    acceptanceCriteria: Prisma.JsonValue;
    allowedPaths: Prisma.JsonValue;
    priority: string;
    phase: string | null;
    estimatedHours: Prisma.Decimal | null;
    dependencies: Prisma.JsonValue | null;
    blocks: Prisma.JsonValue | null;
    assignedAt: Date;
    startedAt: Date | null;
    completedAt: Date | null;
    cancelledAt: Date | null;
    completionNotes: string | null;
    cancellationReason: string | null;
    issueUrl: string | null;
    prUrl: string | null;
}[]>;
export declare function getMyNextTask(agent: string): Promise<{
    status: string;
    description: string;
    id: number;
    evidenceUrl: string | null;
    taskId: string;
    payload: Prisma.JsonValue | null;
    createdAt: Date;
    updatedAt: Date;
    assignedBy: string;
    assignedTo: string;
    title: string;
    acceptanceCriteria: Prisma.JsonValue;
    allowedPaths: Prisma.JsonValue;
    priority: string;
    phase: string | null;
    estimatedHours: Prisma.Decimal | null;
    dependencies: Prisma.JsonValue | null;
    blocks: Prisma.JsonValue | null;
    assignedAt: Date;
    startedAt: Date | null;
    completedAt: Date | null;
    cancelledAt: Date | null;
    completionNotes: string | null;
    cancellationReason: string | null;
    issueUrl: string | null;
    prUrl: string | null;
}>;
export declare function getTaskDetails(taskId: string): Promise<{
    status: string;
    description: string;
    id: number;
    evidenceUrl: string | null;
    taskId: string;
    payload: Prisma.JsonValue | null;
    createdAt: Date;
    updatedAt: Date;
    assignedBy: string;
    assignedTo: string;
    title: string;
    acceptanceCriteria: Prisma.JsonValue;
    allowedPaths: Prisma.JsonValue;
    priority: string;
    phase: string | null;
    estimatedHours: Prisma.Decimal | null;
    dependencies: Prisma.JsonValue | null;
    blocks: Prisma.JsonValue | null;
    assignedAt: Date;
    startedAt: Date | null;
    completedAt: Date | null;
    cancelledAt: Date | null;
    completionNotes: string | null;
    cancellationReason: string | null;
    issueUrl: string | null;
    prUrl: string | null;
}>;
export declare function getAllAgentTasks(): Promise<{
    status: string;
    description: string;
    id: number;
    evidenceUrl: string | null;
    taskId: string;
    payload: Prisma.JsonValue | null;
    createdAt: Date;
    updatedAt: Date;
    assignedBy: string;
    assignedTo: string;
    title: string;
    acceptanceCriteria: Prisma.JsonValue;
    allowedPaths: Prisma.JsonValue;
    priority: string;
    phase: string | null;
    estimatedHours: Prisma.Decimal | null;
    dependencies: Prisma.JsonValue | null;
    blocks: Prisma.JsonValue | null;
    assignedAt: Date;
    startedAt: Date | null;
    completedAt: Date | null;
    cancelledAt: Date | null;
    completionNotes: string | null;
    cancellationReason: string | null;
    issueUrl: string | null;
    prUrl: string | null;
}[]>;
export declare function getBlockedTasks(): Promise<{
    status: string;
    description: string;
    id: number;
    evidenceUrl: string | null;
    taskId: string;
    payload: Prisma.JsonValue | null;
    createdAt: Date;
    updatedAt: Date;
    assignedBy: string;
    assignedTo: string;
    title: string;
    acceptanceCriteria: Prisma.JsonValue;
    allowedPaths: Prisma.JsonValue;
    priority: string;
    phase: string | null;
    estimatedHours: Prisma.Decimal | null;
    dependencies: Prisma.JsonValue | null;
    blocks: Prisma.JsonValue | null;
    assignedAt: Date;
    startedAt: Date | null;
    completedAt: Date | null;
    cancelledAt: Date | null;
    completionNotes: string | null;
    cancellationReason: string | null;
    issueUrl: string | null;
    prUrl: string | null;
}[]>;
export declare function getCompletedTasks(since?: Date): Promise<{
    status: string;
    description: string;
    id: number;
    evidenceUrl: string | null;
    taskId: string;
    payload: Prisma.JsonValue | null;
    createdAt: Date;
    updatedAt: Date;
    assignedBy: string;
    assignedTo: string;
    title: string;
    acceptanceCriteria: Prisma.JsonValue;
    allowedPaths: Prisma.JsonValue;
    priority: string;
    phase: string | null;
    estimatedHours: Prisma.Decimal | null;
    dependencies: Prisma.JsonValue | null;
    blocks: Prisma.JsonValue | null;
    assignedAt: Date;
    startedAt: Date | null;
    completedAt: Date | null;
    cancelledAt: Date | null;
    completionNotes: string | null;
    cancellationReason: string | null;
    issueUrl: string | null;
    prUrl: string | null;
}[]>;
export declare function assignMultipleTasks(tasks: AssignTaskInput[]): Promise<any[]>;
export declare function completeTask(taskId: string, completionNotes: string): Promise<{
    status: string;
    description: string;
    id: number;
    evidenceUrl: string | null;
    taskId: string;
    payload: Prisma.JsonValue | null;
    createdAt: Date;
    updatedAt: Date;
    assignedBy: string;
    assignedTo: string;
    title: string;
    acceptanceCriteria: Prisma.JsonValue;
    allowedPaths: Prisma.JsonValue;
    priority: string;
    phase: string | null;
    estimatedHours: Prisma.Decimal | null;
    dependencies: Prisma.JsonValue | null;
    blocks: Prisma.JsonValue | null;
    assignedAt: Date;
    startedAt: Date | null;
    completedAt: Date | null;
    cancelledAt: Date | null;
    completionNotes: string | null;
    cancellationReason: string | null;
    issueUrl: string | null;
    prUrl: string | null;
}>;
export declare function cancelTask(taskId: string, cancellationReason: string): Promise<{
    status: string;
    description: string;
    id: number;
    evidenceUrl: string | null;
    taskId: string;
    payload: Prisma.JsonValue | null;
    createdAt: Date;
    updatedAt: Date;
    assignedBy: string;
    assignedTo: string;
    title: string;
    acceptanceCriteria: Prisma.JsonValue;
    allowedPaths: Prisma.JsonValue;
    priority: string;
    phase: string | null;
    estimatedHours: Prisma.Decimal | null;
    dependencies: Prisma.JsonValue | null;
    blocks: Prisma.JsonValue | null;
    assignedAt: Date;
    startedAt: Date | null;
    completedAt: Date | null;
    cancelledAt: Date | null;
    completionNotes: string | null;
    cancellationReason: string | null;
    issueUrl: string | null;
    prUrl: string | null;
}>;
//# sourceMappingURL=tasks.server.d.ts.map